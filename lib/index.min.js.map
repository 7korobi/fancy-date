{"version":3,"sources":["webpack://VuePetitStore/webpack/universalModuleDefinition","webpack://VuePetitStore/webpack/bootstrap","webpack://VuePetitStore/./src/fancy-date.coffee","webpack://VuePetitStore/./src/index.coffee","webpack://VuePetitStore/./src/sample.coffee","webpack://VuePetitStore/./src/time.coffee","webpack://VuePetitStore/external \"lodash\""],"names":[],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VuePetitStore\"] = factory();\n\telse\n\t\troot[\"VuePetitStore\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.coffee\");\n","  \n{\n  timezone\n  by_tempo\n  to_timer\n  to_msec\n  to_sec\n  to_tempo_by\n  to_tempo_bare\n} = require \"./time\"\n_ = require \"lodash\"\n\nreg_parse = /(\\d+)年(\\d+)月(\\d+)日\\(([^)])\\)(\\d+)時(\\d+)分(\\d+)秒/\nreg_token = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g\ndefault_parse_format  = \"y年M月d日\"\ndefault_format_format = \"Gy年M月d日(E)H時m分s秒\"\n\ncalc_set = (path, o)->\n  for key, val of o\n    @calc[path][key] = val?[path] || val\n\nsub_define = (msec, size)->\n  range = [size]\n  msec = msec / size\n  { range, msec }\n\ndaily_define = (msec, day)->\n  range = [Math.floor(msec / day)]\n  msec = range[0] * day\n  { range, msec }\n\ndaily_measure = (msec, day)->\n  range = [Math.floor(msec / day), Math.ceil(msec / day)]\n  { range, msec }\n\n\nclass Indexer\n  constructor: ( dic, code, label, @idx, list )->\n    @label = label\n    if list\n      if list.length\n        dic.list[code] = list\n        @list = list\n        @length = list.length\n      else\n        @length = list\n    else\n      \n\n  at: (idx)->\n    if @list\n      @list[ idx ]\n    else\n      idx\n\n\nexport class FancyDate\n  constructor: (o)->\n    if o\n      { @dic, @calc } = _.cloneDeep o\n    else\n      @dic = { list: {} }\n      @calc =\n        eras: []\n        divs: {}\n        idx:  {}\n        zero: {}\n        msec: {}\n        range: {}\n\n  dup: ->\n    new @constructor @\n\n  planet: (\n    [ revolution, spring ]\n    moon_args\n    [ rotation, rotation_zero ] \n    axtial_tilt\n    geo\n  )->\n    year   = daily_measure revolution, rotation\n    day    = daily_define    rotation, rotation\n    if moon_args\n      [ synodic, synodic_zero ] = moon_args\n      moon   = daily_measure    synodic, rotation\n    calc_set.call @, \"range\", { year, moon, day }\n    calc_set.call @, \"msec\",  { year, moon, day }\n\n    [lat, lng] = geo\n    tz_offset = rotation / 360 * lng\n\n    Object.assign @dic, { geo, lat, lng, axtial_tilt, spring, synodic_zero, rotation_zero, tz_offset }\n    @\n\n  era: ( era, eras = [] )->\n    G = new Indexer @dic, 'G', '', 0, [\"紀元前\", ...eras.map(([s,])=> s)]\n    Object.assign @dic, { era, eras }\n    @\n\n  calendar: (start, start_at, leaps = null, month_divs = null )->\n    Object.assign @dic, { month_divs, leaps, start, start_at }\n    @\n\n  rolls: ( weeks, etos )->\n    if weeks\n      weeks = new Indexer @dic, 'E', ...weeks\n    if etos\n      etos  = new Indexer @dic, 'T', ...etos\n    Object.assign @dic, { weeks, etos }\n    @\n\n  yeary: ( months, days )->\n    months = new Indexer @dic, 'M', ...months\n    days   = new Indexer @dic, 'd', ...days\n    Object.assign @dic, { months, days }\n    @\n\n  moony: ( moons )->\n    moons = new Indexer @dic, 'N', ...moons\n    Object.assign @dic, { moons }\n    @\n\n  seasonly: ( seasons )->\n    seasons = new Indexer @dic, 'Z', ...seasons\n    Object.assign @dic, { seasons }\n    @\n\n  daily: (hours, minutes, seconds, is_solor = false)->\n    hours   = new Indexer @dic, 'H', ...hours\n    minutes = new Indexer @dic, 'm', ...minutes\n    seconds = new Indexer @dic, 's', ...seconds\n    Object.assign @dic, { hours, minutes, seconds, is_solor }\n    @\n\n  init: ->\n    G = (s, list)=> if ! list || idx = list.indexOf(s) < 0 then s - 0 else idx\n    T = Z = w = M = d = D = (s, list)=> if ! list || idx = list.indexOf(s) < 0 then s - 1 else idx\n    e = E = N = J = Y = y = u = H = m = s = S = (s)=> s - 0\n    @dic.indexer = { G, u,Y,y,M,d, H,m,s,S, e,E, Z,N,T, D,w,J }\n\n    at = (list, now_idx)->\n      if list\n        s = list[now_idx]\n        if s?\n          s\n\n    G = (o)-> o.label\n    M = (o, list, length)->\n      \"#{\n        if o.is_leap\n          \"閏\"\n        else\n          \"\"\n      }#{ at( list, o.now_idx ) ? _.padStart o.now_idx + 1, length, '0' }\"\n    T = Z = w = d = D = (o, list, length)=> at( list, o.now_idx ) ? _.padStart o.now_idx + 1, length, '0'\n    H = m = e = E = N = (o, list, length)=> at( list, o.now_idx ) ? _.padStart o.now_idx, length, '0'\n    J = Y = y = u = s = (o, list, length)=> _.padStart o.now_idx, length, '0'\n    S = ( o, list, length )=>\n      \"#{ o.now_idx / @calc.msec.second }\"[2..]\n    @dic.labeler = { G, u,Y,y,M,d, H,m,s,S, e,E, Z,N,T, D,w,J }\n\n\n    season = sub_define    @calc.msec.year, @dic.seasons.length\n    month  = daily_measure @calc.msec.year / @dic.months.length, @calc.msec.day\n    week   = daily_define  @dic.weeks.length * @calc.msec.day, @calc.msec.day\n\n    hour   = sub_define    @calc.msec.day, @dic.hours.length\n    if @dic.is_solor\n      minute = sub_define      hour.msec,  @dic.minutes.length\n      second = sub_define    minute.msec,  minute.msec / 1000\n      calc_set.call @, \"range\", { season, month, week, hour, minute, second }\n      calc_set.call @, \"msec\",  { season, month, week, hour, minute, second }\n    else\n      minute = sub_define      hour.msec,  @dic.minutes.length\n      second = sub_define    minute.msec,  minute.msec / 1000\n      calc_set.call @, \"range\", { season, month, week, hour, minute, second }\n      calc_set.call @, \"msec\",  { season, month, week, hour, minute, second }\n\n    @def_table()\n    Object.assign @calc.idx,  @def_idx()\n    Object.assign @calc.zero, @def_zero()\n\n    zero = @calc.zero.era\n    list =\n      for [ title, msec ], idx in @dic.eras\n        { u } = @to_tempos msec\n        a = [ title, msec, u.now_idx]\n        @calc.eras.push a\n        msec - zero\n    list.push Infinity\n    @table.msec.era = list\n\n    G = T = (list)=> \"(#{ list.join(\"|\") })\"\n    M = d = H = m = e = E = Z = N = (list)=>\n      if list\n        \"(#{ list.join(\"|\") })\"\n      else\n        \"(\\\\d+)\"\n    D = w = u = Y = y = s = S = (list)=> \"(\\\\d+)\"\n    J = (list)=> \"([\\\\d.]+)\"\n\n    @dic.regex = {}\n    for key, f of { G, u,Y,y,M,d, H,m,s,S, e,E, Z,N,T, D,w,J }\n      @dic.regex[key] = f @dic.list[key]\n    @\n\n  def_table_by_leap_day: ->\n    day = @calc.msec.day\n    upto = (src)->\n      msec = 0\n      for i in src\n        msec += i * day\n\n    [...leaps, period] = @dic.leaps\n\n    range =\n      year:\n        for idx in [0...period]\n          is_leap = 0\n          for div, mode in leaps\n            continue if idx % div\n            is_leap = ! mode % 2\n          @calc.range.year[is_leap]\n    range.year[0] = @calc.range.year[1]\n    years = _.uniq range.year\n\n    { months, month_divs } = @dic\n    unless month_divs\n      month_divs =\n        for str, idx in months\n          @calc.range.month[1 - idx % 2]\n      month_divs[1] = 0\n    month_sum = 0\n    for i in month_divs\n      month_sum += i\n\n    range.month = {}\n    for size in years\n      a = Array.from month_divs\n      idx = month_divs.indexOf 0\n      a[idx] = size - month_sum\n      range.month[size] = a\n\n    year = upto range.year\n    period = year[year.length - 1]\n    period = daily_define period, day\n    calc_set.call @, \"msec\", { period }\n\n    month = {}\n    for size in years\n      month[size * day] = upto range.month[size]\n\n    @table = { range, msec: { year, month } }\n    ({ size }, path)->\n      switch path\n        when 'year'\n          year\n        when 'month'\n          month[size]\n        else\n          null\n\n  def_table_by_leap_month: ->\n    day = @calc.msec.day\n    upto = (src)->\n      msec = 0\n      for i in src\n        msec += i * day\n\n    years = _.uniq @calc.range.year\n\n    { months, month_divs } = @dic\n    month_sum = 0\n    for i in month_divs\n      month_sum += i\n\n    range =\n      month: {}\n    for size in years\n      a = Array.from month_divs\n      idx = month_divs.indexOf 0\n      a[idx] = size - month_sum\n      range.month[size] = a\n\n    month = {}\n    for size in years\n      month[size * day] = upto range.month[size]\n\n    @table = { range, msec: { month } }\n    ({ size }, path)->\n      switch path\n        when 'month'\n          month[size]\n        else\n          null\n  def_table_by_season: ->\n    @table = { range: {}, msec: {} }\n    (o, path)-> null\n\n  def_table: ->\n    @get_table =\n      if @dic.leaps?\n        @def_table_by_leap_day()\n      else\n        if @dic.month_divs?\n          @def_table_by_leap_month()\n        else\n          @def_table_by_season()\n\n  def_idx: ->\n    if @dic.weeks?\n      week = @dic.weeks.length\n    if @dic.etos?\n      eto  = @dic.etos.length\n    Object.assign @calc.divs, { week, eto }\n\n    [,year, month, day, week, hour, minute, second] = @dic.start.match reg_parse\n    year   = year   - 0\n    month  = month  - 0\n    day    = day    - 0\n    hour   = hour   - 0\n    minute = minute - 0\n    second = second - 0\n    if @dic.etos?\n      eto    = @dic.etos.idx\n    if @dic.weeks?\n      week   = @dic.weeks.idx\n    if @dic.seasons?\n      season = @dic.seasons.idx\n    moon   = 0\n\n    if @dic.leaps?\n      [..., full_period] = @dic.leaps\n      period = full_period\n      Object.assign @calc.divs, { period }\n\n      period = Math.floor year / @calc.divs.period\n      year   = year % @calc.divs.period\n\n    { period, year, month, moon, week, eto, day, hour, minute, second, season }\n\n  def_zero: ->\n    zero_size = (path, idx = 0)=>\n      0 - (@calc.idx[path] - idx) * @calc.msec[path]\n    zero   = @dic.start_at - @dic.tz_offset\n    second = zero   + zero_size \"second\"\n    minute = second + zero_size \"minute\"\n    hour   = minute + zero_size \"hour\"\n    day    = hour   + zero_size \"day\", 1\n    week   = day    + zero_size(\"week\") / @calc.divs.week\n\n    # JD\n    jd = -2440587.5 * @calc.msec.day\n    ld = jd + 2299159.5 * @calc.msec.day\n    mjd = jd + 2400000.5 * @calc.msec.day\n\n    # 単純のため平気法。\n    season = @dic.spring + zero_size \"season\" # 立春点\n    { since } = to_tempo_bare @calc.msec.year, @dic.start_at, season\n    season = since + zero_size \"year\"\n    moon   = 0 - @dic.synodic_zero\n\n    if @dic.leaps?\n      year_size = @calc.msec.day * @table.range.year[ @calc.idx.year %% @calc.divs.period ]\n\n      month  = day   - (@table.msec.month[year_size][ @calc.idx.month - 2 ] || 0)\n      year   = month - (@table.msec.year[             @calc.idx.year  - 1 ] || 0)\n      period = year  + zero_size \"period\"\n\n      season += zero_size \"period\"\n\n    # 元号\n    era = @dic.eras[0]?[1] || Infinity\n    @calc.eras = []\n    if @dic.leaps?\n      if period < era\n        era = period + @table.msec.year[0]\n        @calc.eras = [[@dic.era, era, 1]]\n    else\n      if season < era\n        era = season + @calc.msec.year\n        @calc.eras = [[@dic.era, era, 1]]\n\n    { period, era, week, season, moon, day, jd,ld,mjd }\n\n  precision: ->\n    gaps = [( @calc.msec.year / @calc.msec.day ) - @calc.range.year[0]]\n    if @dic.leaps\n      for v, idx in @dic.leaps\n        gap = gaps[gaps.length - 1]\n        if idx % 2\n          gap += 1 / v\n        else\n          gap -= 1 / v\n        gaps.push gap\n    minute: @calc.range.second\n    leap: gaps.map (i)=> parseInt 1 / i\n\n###\nhttp://bakamoto.sakura.ne.jp/buturi/2hinode.pdf\nベクトルで\na1 = e1 * cos(lat/360) + e3 * sin(lat/360)\na2 = e3 * cos(lat/360) - e1 * sin(lat/360)\nT = (赤緯, 時角)->\n  a1 * sin(赤緯) + cos(赤緯) * (a2 * cos(時角) - e2 * sin(時角))\nT = ( lat, 赤緯, 時角 )->\n  e1 * ( cos(lat/360) * sin(赤緯) - sin(lat/360) * cos(赤緯) * cos(時角) ) +\n  e2 * (-cos(赤緯) * sin(時角)) +\n  e3 * ( sin(lat/360) * sin(赤緯) + cos(lat/360) * cos(赤緯) * cos(時角) )\n\nK   = @dic.axtial_tilt / 360\n高度 = -50/60\n時角 = ( lat, 高度, 赤緯 )->\n  acos(( sin(高度) - sin(lat/360) * sin(赤緯) ) / cos(lat/360) * cos(赤緯) )\n方向 = ( lat, 高度, 赤緯, 時角 )->\n  acos(( cos(lat/360) * sin(赤緯) - sin(lat/360) * cos(赤緯) * cos(時角) ) / cos(高度) )\n季節 = 春分点からの移動角度\n赤緯 = asin( sin(K) * sin(季節) )\n赤経 = atan( tan(季節) * cos(K) )\n南中時刻 = ->\n  正午 + 時角 + ( 赤経 - 季節 ) + 平均値 + tz_offset\n日の出 = ->\n  南中時刻 - 時角\n日の入 = ->\n  南中時刻 + 時角\n###\n\n  solor: (utc, idx = 2, { last_at, next_at } = to_tempo_bare @calc.msec.day, @calc.zero.day, utc )->\n    days = [\n        6      # golden hour end         / golden hour\n      -18 / 60 # sunrise bottom edge end / sunset bottom edge start\n      -50 / 60 # sunrise top edge start  / sunset top edge end\n       -6      # dawn                    / dusk\n      -12      # nautical dawn           / nautical dusk\n      -18      # night end               / night\n    ]\n    { asin, acos, atan, sin, cos, tan, PI } = Math\n    deg_to_rad  = 2 * PI / 360\n    year_to_rad = 2 * PI / @calc.msec.year\n    rad_to_day  = @calc.msec.day / ( 2 * PI )\n    deg_to_day  = @calc.msec.day / 360\n\n    高度 = days[idx]        * deg_to_rad\n    K   = @dic.axtial_tilt * deg_to_rad\n    lat = @dic.lat         * deg_to_rad\n\n    T0  = to_tempo_bare @calc.msec.year, @calc.zero.season, utc\n\n    # 南中差分の計算がテキトウになってしまった。あとで検討。\n    南中差分A = Math.floor 2   * deg_to_day * sin(( T0.since              ) * year_to_rad     )\n    南中差分B = Math.floor 2.5 * deg_to_day * sin(( T0.since + 1296000000 ) * year_to_rad * 2 )\n    南中時刻 = ( last_at + next_at ) / 2 + 南中差分A + 南中差分B\n    真夜中 = last_at + 南中差分A + 南中差分B\n\n    T1 = to_tempo_bare @calc.msec.year, @dic.spring, 南中時刻\n\n    spring = T1.last_at\n    季節 = T1.since * year_to_rad\n    赤緯 = asin( sin(K) * sin(季節) )\n    赤経 = atan( tan(季節) * cos(K) )\n    時角 = acos(( sin(高度) - sin(lat) * sin(赤緯) ) / (cos(lat) * cos(赤緯)) )\n    方向 = acos(( cos(lat) * sin(赤緯) - sin(lat) * cos(赤緯) * cos(時角) ) / cos(高度) )\n\n    日の出 = Math.floor 南中時刻 - 時角 * rad_to_day\n    日の入 = Math.floor 南中時刻 + 時角 * rad_to_day\n    { \n      T0: [@calc.msec.year, @calc.zero.season, utc],\n      utc,idx,高度,K,lat,T1,南中差分A,南中差分B,  時角,方向, last_at, 真夜中,日の出,南中時刻,日の入, next_at }\n\n  to_tempo_by_solor: (utc, day)->\n    { 日の出, 南中時刻, 日の入 } = @solor utc, 2, day\n    size = @dic.hours.length / 4\n\n    list = []\n    next_at = 0\n    msec = ( 日の出 - day.last_at ) / size\n    for idx in [0        ... 1 * size]\n      next_at += msec\n      list.push Math.floor next_at\n\n    next_at = 日の出 - day.last_at\n    msec = ( 日の入 - 日の出 ) / ( 2 * size )\n    for idx in [1 * size ... 3 * size]\n      next_at += msec\n      list.push Math.floor next_at\n\n    next_at = day.size\n    msec = ( day.next_at - 日の入 ) / size\n\n    tails = []\n    for idx in [3 * size ... 4 * size]\n      tails.push Math.ceil next_at\n      next_at -= msec\n    list.push ...tails.reverse()\n    to_tempo_by list, day.last_at, utc\n\n  to_tempos: (utc)->\n    drill_down = (base, path, at = utc)=>\n      table = @get_table base, path\n      if table\n        o = to_tempo_by table, base.last_at, at\n      else\n        b_size = @calc.msec[path]\n        o = to_tempo_bare b_size, base.last_at, at\n        o.length = base.size / o.size\n      o.path = path\n      o\n\n    to_tempo_mod = (path, sub, write_at = utc)=>\n      { now_idx, next_at, size, zero } = to_tempo_bare @calc.msec[path], @calc.zero[path], write_at\n      do2 = to_tempo_bare @calc.msec[sub], @calc.zero[sub], next_at\n      if do2.last_at <= write_at\n        do3 = to_tempo_bare @calc.msec[sub], @calc.zero[sub], next_at + size\n        now_idx += 1\n        last_at = do2.last_at\n        next_at = do3.last_at\n\n      else\n        do1 = to_tempo_bare @calc.msec[sub], @calc.zero[sub], next_at - size\n        last_at = do1.last_at\n        next_at = do2.last_at\n      size   =  next_at -  last_at\n      remain =  next_at - write_at\n      since  = write_at -  last_at\n      timeout = remain\n      { last_at, write_at, next_at, timeout, since, remain, zero, now_idx, size }\n\n    J = to_tempo_bare @calc.msec.day, @calc.zero.jd, utc # ユリウス日\n\n    # season in year_of_planet\n    Zz = to_tempo_bare @calc.msec.year, @calc.zero.season, utc # 太陽年\n    Z  = drill_down Zz, \"season\" # 太陽年の二十四節気\n\n    # 正月中気と正月\n    N0_p = Zz.last_at + @calc.msec.season\n    N0 = to_tempo_mod \"moon\", \"day\", N0_p\n\n    # 今月と中気\n    Nn = to_tempo_mod \"moon\", \"day\"\n    Zs = drill_down Zz, \"season\", Nn.last_at\n    center_at =\n      if Zs.now_idx & 1\n        Zs.last_at\n      else\n        Zs.next_at\n    unless Nn.last_at <= center_at < Nn.next_at\n      Zs = drill_down Zz, \"season\", Nn.next_at\n      center_at =\n        if Zs.now_idx & 1\n          Zs.last_at\n        else\n          Zs.next_at\n      unless Nn.last_at <= center_at < Nn.next_at\n        Nn.is_leap = true\n\n    switch Zs.now_idx >> 1\n      when -1\n        # 太陽年初に0月が出てしまう。昨年末にする。\n        Zz = to_tempo_bare Zz.size, Zz.zero, Zs.last_at\n      when @dic.seasons.length >> 1\n        # 太陽年末に13月が出てしまう。年初にする。\n        Zz = to_tempo_bare Zz.size, Zz.zero, Zs.next_at\n    Nn.now_idx = ( Zs.now_idx %% @dic.seasons.length ) >> 1\n\n    N  = drill_down Nn, 'day'\n\n    if @dic.leaps?\n      p = to_tempo_bare @calc.msec.period, @calc.zero.period, utc\n      u = drill_down p, \"year\"\n      u.now_idx += p.now_idx * @calc.divs.period\n      M = drill_down u, \"month\"\n      d = drill_down M, \"day\"\n    else\n      u = Zz\n      M = Nn\n      d = N\n\n    # day    in week (曜日)\n    w0 = to_tempo_bare @calc.msec.week, @calc.zero.week ,u.last_at\n    w = drill_down w0, \"week\"\n\n    Y =\n      now_idx: u.now_idx\n    if u.next_at < w.next_at\n      # 年末最終週は、翌年初週\n      Y.now_idx += 1\n      w.now_idx  = 0\n\n    e = E = drill_down w, \"day\"\n    unless @dic.leaps?\n      # 旧暦では、週は月初にリセットする。\n      e.now_idx = ( M.now_idx + d.now_idx ) % @dic.weeks.length\n\n    # day    in year appendix\n    D = drill_down u, \"day\"\n    if @dic.is_solor\n      # hour   in day\n      H = @to_tempo_by_solor utc, d\n      size = H.size / @dic.minutes.length\n      m = to_tempo_bare size, H.last_at, utc\n      s = to_tempo_bare 1000, m.last_at, utc\n    else\n      # hour   in day\n      H = drill_down d, \"hour\"\n      m = drill_down H, \"minute\"\n      s = drill_down m, \"second\"\n\n    # minute in day\n    now_idx = utc - s.last_at\n    S = { now_idx }\n\n    T =\n      now_idx: ( u.now_idx + @calc.idx.eto )% @dic.etos.length\n\n    G = {}\n    if @table.msec.era?\n      era_base = to_tempo_by @table.msec.era, @calc.zero.era, utc\n      era = @calc.eras[era_base.now_idx]\n      if era?[0]\n        u.now_idx += 1 - era[2]\n        G.label = era[0]\n\n    y = Object.assign {}, u\n    if y.now_idx < 1\n      G.label = \"紀元前\"\n      y.now_idx = 1 - y.now_idx\n\n    { G, u,Y,y,M,d, H,m,s,S, e,E, Z,N,T, D,w,J, era }\n\n  index: (tgt, str = default_parse_format)->\n    p = y = M = d = H = m = s = S = J = 0\n    data = { p,y,M,d,H,m,s,S, J }\n\n    tokens = str.match reg_token\n    idx = @dic.indexer\n    reg = @regex tokens, str\n\n    items = tgt.match(reg)[1..]\n    for s, p in items\n      token = tokens[p]\n      if f = idx[token[0]]\n        data[token[0]] = f s, @dic.list[token[0]]\n    if @dic.leaps?\n      data.p = Math.floor( data.y / @calc.divs.period )\n      data.y = data.y - data.p * @calc.divs.period\n    data\n\n  regex: (tokens, str)->\n    { regex, list } = @dic\n    reg = \"^\" + tokens.map (token)=>\n      if val = regex[token[0]]\n        val\n      else\n        \"(#{token.replace(/([\\\\\\[\\]().*?])/g,\"\\\\$1\")})\"\n    .join(\"\")\n    new RegExp reg\n\n  to_label: ( o, token )->\n    if f = @dic.labeler[token[0]]\n      list = @dic.list[token[0]]\n      f o, list, token.length\n    else\n      token\n\n  tempo_list: (tempos, token)->\n    switch token[0]\n      when 'G'\n        throw new Error \"request token can't tempos. [#{token}]\"\n\n    unless tempo = tempos[token[0]]\n      throw new Error \"request token can't tempos. [#{token}]\"\n\n    { table, length, now_idx, last_at, size, zero } = tempo\n    list = []\n    if table\n      last_at = zero\n      for next_at, now_idx in table\n        next_at += zero\n        size = next_at - last_at\n        list.push { now_idx, size, last_at, next_at, last_time: new Date(last_at), next_time: new Date(next_at) }\n        last_at = next_at\n\n    if length\n      base = last_at - size * now_idx\n      for now_idx in [0...length]\n        last_at = (now_idx + 0) * size + zero\n        next_at = (now_idx + 1) * size + zero\n        list.push { now_idx, size, last_at, next_at, last_time: new Date(last_at), next_time: new Date(next_at) }\n    list\n\n  ranges: (utc, token)->\n    @tempo_list @to_tempos(utc), token\n\n  parse: (tgt, str = default_parse_format)->\n    { p,y,M,d,H,m,s,S, J } = @index tgt, str\n\n    if J\n      return @calc.zero.jd + J * @calc.msec.day \n\n    ( d * @calc.msec.day ) +\n    ( H * @calc.msec.hour ) +\n    ( m * @calc.msec.minute ) +\n    ( s * @calc.msec.second ) +\n    ( S ) +\n    if @dic.leaps?\n      size =\n        @table.range.year[y] * @calc.msec.day\n\n      @calc.zero.period +\n      ( p * @calc.msec.period ) +\n      ( @table.msec.year[y - 1] || 0 ) +\n      ( @table.msec.month[size][M - 1] || 0 )\n    else\n      @calc.zero.season +\n      ( y * @calc.msec.year) +\n      ( M * @calc.msec.month )\n\n  format: (utc, str = default_format_format)->\n    o = @to_tempos utc\n    str.match reg_token\n    .map (token)=>\n      if val = o[token[0]]\n        @to_label val, token\n      else\n        token\n    .join(\"\")\n\nmodule.exports = FancyDate\n","require './sample'\n\nmodule.exports = {\n  FancyDate: require \"./fancy-date\"\n  ...require \"./time\"\n}","FancyDate = require './fancy-date'\n\n七曜 = ['月','火','水','木','金','土','日']\n六曜 = [\"先勝\",\"友引\",\"先負\",\"仏滅\",\"大安\",\"赤口\"]\n和風月名 = ['睦月','如月','弥生','卯月','皐月','水無月','文月','葉月','長月','神無月','霜月','師走']\n二十四節季 = [\"立春\",\"雨水\",\"啓蟄\",\"春分\",\"清明\",\"穀雨\",\n           \"立夏\",\"小満\",\"芒種\",\"夏至\",\"小暑\",\"大暑\",\n           \"立秋\",\"処暑\",\"白露\",\"秋分\",\"寒露\",\"霜降\",\n           \"立冬\",\"小雪\",\"大雪\",\"冬至\",\"小寒\",\"大寒\"]\n月相 = ['朔'  ,'既朔','三日月','上弦' ,'上弦','上弦' ,'上弦'  ,'上弦' ,'上弦'  ,'上弦' ,\n       '上弦','上弦','十三夜','小望月','満月','十六夜','立待月','居待月','臥待月','更待月',\n       '下限','下限','下限'  ,'下限' ,'下限','下限' ,'下限'  ,'下限' ,'晦'    ,'晦'  ]\n時の鐘 = ['夜九つ','夜八つ','暁七つ',\n        '明六つ','朝五つ','昼四つ',\n        '昼九つ','昼八つ','夕七つ',\n        '暮六つ','宵五つ','夜四つ']\n\n十干 = [\n  [\"甲\",\"きのえ\"]\n  [\"乙\",\"きのと\"]\n  [\"丙\",\"ひのえ\"]\n  [\"丁\",\"ひのと\"]\n  [\"戊\",\"つちのえ\"]\n  [\"己\",\"つちのと\"]\n  [\"庚\",\"かのえ\"]\n  [\"辛\",\"かのと\"]\n  [\"壬\",\"みずのえ\"]\n  [\"癸\",\"みずのと\"]\n]\n十二支 = [\n  [\"子\",\"ね\"]\n  [\"丑\",\"うし\"]\n  [\"寅\",\"とら\"]\n  [\"卯\",\"う\"]\n  [\"辰\",\"たつ\"]\n  [\"巳\",\"み\"]\n  [\"午\",\"うま\"]\n  [\"未\",\"ひつじ\"]\n  [\"申\",\"さる\"]\n  [\"酉\",\"とり\"]\n  [\"戌\",\"いぬ\"]\n  [\"亥\",\"い\"]\n]\n\n六十干支 =\n  for idx in [0...60]\n    a = 十干[idx % 十干.length] \n    b = 十二支[idx % 十二支.length]\n    \"#{a[0]}#{b[0]}\"\n\n六十干支よみ =\n  for idx in [0...60]\n    a = 十干[idx % 十干.length] \n    b = 十二支[idx % 十二支.length]\n    \"#{\"#{a[1].replace /と$/,\"との\" }#{b[1]}\"}\"\n\n元号 = [# 号, 開始時刻\n  [\"大化\", -41795611200000 - 75600000]\n  [\"白雉\", -41647953600000 - 75600000]\n  [\"朱鳥\", -40499352000000 - 75600000]\n  [\"大宝\", -40034865600000 - 75600000]\n  [\"慶雲\", -39936369600000 - 75600000]\n  [\"和銅\", -39821371200000 - 75600000]\n  [\"霊亀\", -39579883200000 - 75600000]\n  [\"養老\", -39509640000000 - 75600000]\n  [\"神亀\", -39314289600000 - 75600000]\n  [\"天平\", -39140712000000 - 75600000]\n  [\"天平感宝\", -38520014400000 - 75600000]\n  [\"天平勝宝\", -38510769600000 - 75600000]\n  [\"天平宝字\", -38256753600000 - 75600000]\n  [\"天平神護\", -38023041600000 - 75600000]\n  [\"神護景雲\", -37940616000000 - 75600000]\n  [\"宝亀\", -37842465600000 - 75600000]\n  [\"天応\", -37518292800000 - 75600000]\n  [\"延暦\", -37465761600000 - 75600000]\n  [\"大同\", -36718228800000 - 75600000]\n  [\"弘仁\", -36580420800000 - 75600000]\n  [\"天長\", -36160603200000 - 75600000]\n  [\"承和\", -35844465600000 - 75600000]\n  [\"嘉祥\", -35389483200000 - 75600000]\n  [\"仁寿\", -35298763200000 - 75600000]\n  [\"斉衡\", -35186356800000 - 75600000]\n  [\"天安\", -35115681600000 - 75600000]\n  [\"貞観\", -35047339200000 - 75600000]\n  [\"元慶\", -34478222400000 - 75600000]\n  [\"仁和\", -34232846400000 - 75600000]\n  [\"寛平\", -34099704000000 - 75600000]\n  [\"昌泰\", -33816571200000 - 75600000]\n  [\"延喜\", -33712977600000 - 75600000]\n  [\"延長\", -33026875200000 - 75600000]\n  [\"承平\", -32775537600000 - 75600000]\n  [\"天慶\", -32551416000000 - 75600000]\n  [\"天暦\", -32270702400000 - 75600000]\n  [\"天徳\", -31938667200000 - 75600000]\n  [\"応和\", -31834987200000 - 75600000]\n  [\"康保\", -31725864000000 - 75600000]\n  [\"安和\", -31597905600000 - 75600000]\n  [\"天禄\", -31545892800000 - 75600000]\n  [\"天延\", -31428907200000 - 75600000]\n  [\"貞元\", -31347864000000 - 75600000]\n  [\"天元\", -31272523200000 - 75600000]\n  [\"永観\", -31133419200000 - 75600000]\n  [\"寛和\", -31071124800000 - 75600000]\n  [\"永延\", -31009262400000 - 75600000]\n  [\"永祚\", -30935044800000 - 75600000]\n  [\"正暦\", -30896856000000 - 75600000]\n  [\"長徳\", -30760344000000 - 75600000]\n  [\"長保\", -30638606400000 - 75600000]\n  [\"寛弘\", -30464510400000 - 75600000]\n  [\"長和\", -30196152000000 - 75600000]\n  [\"寛仁\", -30061108800000 - 75600000]\n  [\"治安\", -29940494400000 - 75600000]\n  [\"万寿\", -29832408000000 - 75600000]\n  [\"長元\", -29706264000000 - 75600000]\n  [\"長暦\", -29430993600000 - 75600000]\n  [\"長久\", -29317204800000 - 75600000]\n  [\"寛徳\", -29190974400000 - 75600000]\n  [\"永承\", -29145873600000 - 75600000]\n  [\"天喜\", -28934366400000 - 75600000]\n  [\"康平\", -28756814400000 - 75600000]\n  [\"治暦\", -28537185600000 - 75600000]\n  [\"延久\", -28421409600000 - 75600000]\n  [\"承保\", -28252152000000 - 75600000]\n  [\"承暦\", -28150545600000 - 75600000]\n  [\"永保\", -28046606400000 - 75600000]\n  [\"応徳\", -27952516800000 - 75600000]\n  [\"寛治\", -27852984000000 - 75600000]\n  [\"嘉保\", -27609854400000 - 75600000]\n  [\"永長\", -27548424000000 - 75600000]\n  [\"承徳\", -27517492800000 - 75600000]\n  [\"康和\", -27463320000000 - 75600000]\n  [\"長治\", -27321969600000 - 75600000]\n  [\"嘉承\", -27253195200000 - 75600000]\n  [\"天仁\", -27179755200000 - 75600000]\n  [\"天永\", -27120139200000 - 75600000]\n  [\"永久\", -27023284800000 - 75600000]\n  [\"元永\", -26876059200000 - 75600000]\n  [\"保安\", -26811691200000 - 75600000]\n  [\"天治\", -26684683200000 - 75600000]\n  [\"大治\", -26629560000000 - 75600000]\n  [\"天承\", -26470670400000 - 75600000]\n  [\"長承\", -26421336000000 - 75600000]\n  [\"保延\", -26335627200000 - 75600000]\n  [\"永治\", -26140708800000 - 75600000]\n  [\"康治\", -26116084800000 - 75600000]\n  [\"天養\", -26057937600000 - 75600000]\n  [\"久安\", -26014564800000 - 75600000]\n  [\"仁平\", -25840728000000 - 75600000]\n  [\"久寿\", -25720718400000 - 75600000]\n  [\"保元\", -25674840000000 - 75600000]\n  [\"平治\", -25581009600000 - 75600000]\n  [\"永暦\", -25556385600000 - 75600000]\n  [\"応保\", -25505928000000 - 75600000]\n  [\"長寛\", -25455211200000 - 75600000]\n  [\"永万\", -25385918400000 - 75600000]\n  [\"仁安\", -25348248000000 - 75600000]\n  [\"嘉応\", -25265649600000 - 75600000]\n  [\"承安\", -25200763200000 - 75600000]\n  [\"安元\", -25067534400000 - 75600000]\n  [\"治承\", -25003252800000 - 75600000]\n  [\"養和\", -24877368000000 - 75600000]\n  [\"寿永\", -24850756800000 - 75600000]\n  [\"元暦\", -24790449600000 - 75600000]\n  [\"文治\", -24749841600000 - 75600000]\n  [\"建久\", -24602097600000 - 75600000]\n  [\"正治\", -24317496000000 - 75600000]\n  [\"建仁\", -24259953600000 - 75600000]\n  [\"元久\", -24164913600000 - 75600000]\n  [\"建永\", -24095448000000 - 75600000]\n  [\"承元\", -24049742400000 - 75600000]\n  [\"建暦\", -23941396800000 - 75600000]\n  [\"建保\", -23854910400000 - 75600000]\n  [\"承久\", -23685998400000 - 75600000]\n  [\"貞応\", -23591476800000 - 75600000]\n  [\"元仁\", -23509310400000 - 75600000]\n  [\"嘉禄\", -23496523200000 - 75600000]\n  [\"安貞\", -23413147200000 - 75600000]\n  [\"寛喜\", -23375304000000 - 75600000]\n  [\"貞永\", -23278622400000 - 75600000]\n  [\"天福\", -23244321600000 - 75600000]\n  [\"文暦\", -23196715200000 - 75600000]\n  [\"嘉禎\", -23167425600000 - 75600000]\n  [\"暦仁\", -23067633600000 - 75600000]\n  [\"延応\", -23061326400000 - 75600000]\n  [\"仁治\", -23017176000000 - 75600000]\n  [\"寛元\", -22934664000000 - 75600000]\n  [\"宝治\", -22806878400000 - 75600000]\n  [\"建長\", -22741387200000 - 75600000]\n  [\"康元\", -22505342400000 - 75600000]\n  [\"正嘉\", -22491691200000 - 75600000]\n  [\"正元\", -22426891200000 - 75600000]\n  [\"文応\", -22392331200000 - 75600000]\n  [\"弘長\", -22366238400000 - 75600000]\n  [\"文永\", -22271112000000 - 75600000]\n  [\"建治\", -21919204800000 - 75600000]\n  [\"弘安\", -21829694400000 - 75600000]\n  [\"正応\", -21508286400000 - 75600000]\n  [\"永仁\", -21341880000000 - 75600000]\n  [\"正安\", -21161563200000 - 75600000]\n  [\"乾元\", -21049675200000 - 75600000]\n  [\"嘉元\", -21025483200000 - 75600000]\n  [\"徳治\", -20920075200000 - 75600000]\n  [\"延慶\", -20861841600000 - 75600000]\n  [\"応長\", -20783563200000 - 75600000]\n  [\"正和\", -20753668800000 - 75600000]\n  [\"文保\", -20599531200000 - 75600000]\n  [\"元応\", -20531016000000 - 75600000]\n  [\"元亨\", -20472782400000 - 75600000]\n  [\"正中\", -20354068800000 - 75600000]\n  [\"嘉暦\", -20309227200000 - 75600000]\n  [\"元徳\", -20204424000000 - 75600000]\n  [\"元弘\", -20142302400000 - 75600000]\n  [\"正慶\", -20120270400000 - 75600000]\n  [\"建武\", -20064024000000 - 75600000]\n  [\"延元\", -19997668800000 - 75600000]\n  [\"興国\", -19867636800000 - 75600000]\n  [\"正平\", -19657598400000 - 75600000]\n  [\"建徳\", -18913780800000 - 75600000]\n  [\"文中\", -18859867200000 - 75600000]\n  [\"天授\", -18760420800000 - 75600000]\n  [\"弘和\", -18580708800000 - 75600000]\n  [\"元中\", -18479707200000 - 75600000]\n  [\"暦応\", -19918785600000 - 75600000]\n  [\"康永\", -19803960000000 - 75600000]\n  [\"貞和\", -19694836800000 - 75600000]\n  [\"観応\", -19556510400000 - 75600000]\n  [\"文和\", -19474862400000 - 75600000]\n  [\"延文\", -19364961600000 - 75600000]\n  [\"康安\", -19206763200000 - 75600000]\n  [\"貞治\", -19161403200000 - 75600000]\n  [\"応安\", -18990849600000 - 75600000]\n  [\"永和\", -18768110400000 - 75600000]\n  [\"康暦\", -18640929600000 - 75600000]\n  [\"永徳\", -18579499200000 - 75600000]\n  [\"至徳\", -18484891200000 - 75600000]\n  [\"嘉慶\", -18373003200000 - 75600000]\n  [\"康応\", -18328161600000 - 75600000]\n  [\"明徳\", -18293515200000 - 75600000]\n  [\"応永\", -18157608000000 - 75600000]\n  [\"正長\", -17089185600000 - 75600000]\n  [\"永享\", -17047713600000 - 75600000]\n  [\"嘉吉\", -16686907200000 - 75600000]\n  [\"文安\", -16593595200000 - 75600000]\n  [\"宝徳\", -16420708800000 - 75600000]\n  [\"享徳\", -16326532800000 - 75600000]\n  [\"康正\", -16229592000000 - 75600000]\n  [\"長禄\", -16162977600000 - 75600000]\n  [\"寛正\", -16058952000000 - 75600000]\n  [\"文正\", -15897643200000 - 75600000]\n  [\"応仁\", -15863860800000 - 75600000]\n  [\"文明\", -15795518400000 - 75600000]\n  [\"長享\", -15222168000000 - 75600000]\n  [\"延徳\", -15155726400000 - 75600000]\n  [\"明応\", -15064056000000 - 75600000]\n  [\"文亀\", -14792760000000 - 75600000]\n  [\"永正\", -14698238400000 - 75600000]\n  [\"大永\", -14145278400000 - 75600000]\n  [\"享禄\", -13926081600000 - 75600000]\n  [\"天文\", -13800283200000 - 75600000]\n  [\"弘治\", -13068475200000 - 75600000]\n  [\"永禄\", -12993998400000 - 75600000]\n  [\"元亀\", -12609259200000 - 75600000]\n  [\"天正\", -12506788800000 - 75600000]\n  [\"文禄\", -11896113600000 - 75600000]\n  [\"慶長\", -11772043200000 - 75600000]\n  [\"元和\", -11181326400000 - 75600000]\n  [\"寛永\", -10909425600000 - 75600000]\n  [\"正保\", -10254859200000 - 75600000]\n  [\"慶安\", -10152907200000 - 75600000]\n  [\"承応\", -10009742400000 - 75600000]\n  [\"明暦\", -9928526400000 - 75600000]\n  [\"万治\", -9825624000000 - 75600000]\n  [\"寛文\", -9738705600000 - 75600000]\n  [\"延宝\", -9346190400000 - 75600000]\n  [\"天和\", -9092865600000 - 75600000]\n  [\"貞享\", -9017006400000 - 75600000]\n  [\"元禄\", -8873409600000 - 75600000]\n  [\"宝永\", -8384990400000 - 75600000]\n  [\"正徳\", -8159313600000 - 75600000]\n  [\"享保\", -7996363200000 - 75600000]\n  [\"元文\", -7370654400000 - 75600000]\n  [\"寛保\", -7217726400000 - 75600000]\n  [\"延享\", -7123809600000 - 75600000]\n  [\"寛延\", -6986865600000 - 75600000]\n  [\"宝暦\", -6880939200000 - 75600000]\n  [\"明和\", -6485054400000 - 75600000]\n  [\"安永\", -6218510400000 - 75600000]\n  [\"天明\", -5954299200000 - 75600000]\n  [\"寛政\", -5707454400000 - 75600000]\n  [\"享和\", -5326430400000 - 75600000]\n  [\"文化\", -5231476800000 - 75600000]\n  [\"文政\", -4784097600000 - 75600000]\n  [\"天保\", -4384497600000 - 75600000]\n  [\"弘化\", -3943857600000 - 75600000]\n  [\"嘉永\", -3842078400000 - 75600000]\n  [\"安政\", -3627806400000 - 75600000]\n  [\"万延\", -3462782400000 - 75600000]\n  [\"文久\", -3432110400000 - 75600000]\n  [\"元治\", -3337588800000 - 75600000]\n  [\"慶応\", -3303028800000 - 75600000]\n  [\"明治\", -3216715200000 - 75600000]\n  [\"大正\", -1812110400000 - 75600000]\n  [\"昭和\", -1357560000000 - 75600000]\n  [\"平成\",   600264000000 - 75600000]\n  [\"令和\",  1556712000000 - 75600000]\n];\n\n日本 = [ 35, 135 ]\n\n地球 = [\n  [31556925147.0, new Date(\"2019/03/21 06:58\").getTime()]\n  [ 2551442889.6, new Date(\"2019/01/06 10:28\").getTime()]\n  [   86400000  , 0] # LOD ではなく、暦上の1日。Unix epoch では閏秒を消し去るため。\n  23.4397\n  日本\n]\n\n\nGREGORIO = \n  calendar: [\n    \"1970年1月1日(木)0時0分0秒\"\n    0\n    [4, 100, 400]\n    [31, 0,31,30,31,30,31,31,30,31,30,31]\n  ]\n  rolls: [\n    [\"曜\",  3, 七曜]\n    [\"\", 56, 六十干支,六十干支よみ]\n  ]\n  yeary: [\n    [\"月\", 0, 12]\n    [\"日\", 0]\n  ]\n  seasonly: [\n    #   節    中     節    中     節    中 \n    [\"\", 3, 二十四節季]\n  ]\n  moony: [\n    [\"\", 0, 月相]\n  ]\n  daily: [\n    [\"時\", 0, 24]\n    [\"分\", 0, 60]\n    [\"秒\", 0]\n  ]\n\n平気法 =\n  calendar: [\n    \"1970年1月1日(木)0時0分0秒\"\n    0\n  ]\n  rolls: [\n    [\"\", null, 六曜]\n    [\"\",    0, 六十干支,六十干支よみ]\n  ]\n  yeary: [\n    [\"月\", 0,和風月名]\n    [\"日\", 0]\n  ]\n  daily: [\n    [\"時\", 0, 時の鐘]\n    [\"分\", 0, ['','半']]\n    [\"秒\", 0]\n    true\n  ]\n\nROMULUS =\n  calendar: [\n    \"1970年1月1日(木)0時0分0秒\"\n    0\n    null\n    [0, 31,30,31,30,31,30,30,31,30,30]\n  ]\n  rolls: [\n    [\"\", 0, \"ABCDEFGH\"]\n    [\"\", 0, 六十干支,六十干支よみ]\n  ]\n\nFastEarth = [ # 天体が地球の百倍速のケース\n  [315569251.470, new Date(\"2019/03/21 06:58\").getTime() / 100]\n  [ 25514428.896, new Date(\"2019/01/06 10:28\").getTime() / 100]\n  [   864000    , 0] # LOD ではなく、暦上の1日。Unix epoch では閏秒を消し去るため。\n  23.4397\n  日本\n]\n\nFancyDate.Gregorian = g = new FancyDate()\n  .planet   ...地球\n  .calendar ...GREGORIO.calendar\n  .rolls    ...GREGORIO.rolls\n  .era \"西暦\"\n  .yeary    ...GREGORIO.yeary\n  .seasonly ...GREGORIO.seasonly\n  .moony    ...GREGORIO.moony\n  .daily    ...GREGORIO.daily\n  .init()\n\nFancyDate.平気法 = FancyDate.Gregorian.dup()\n  .planet   ...地球\n  .calendar ...平気法.calendar\n  .rolls    ...平気法.rolls\n  .era \"西暦\", 元号\n  .yeary    ...平気法.yeary\n  .daily    ...平気法.daily\n  .init()\n\n#FancyDate.Romulus = FancyDate.Gregorian.dup()\n#  .calendar ...ROMULUS.calendar\n# .rolls    ...ROMULUS.rolls\n#  .init()\n\nFancyDate.Fast = FancyDate.Gregorian.dup()\n  .planet   ...FastEarth\n  .era \"fast\", 元号\n  .init()\n\n\n火星 = [\n  [59354347573.5373, new Date(\"2018/10/28 09:00\").getTime()]\n  null\n  [ 88775000, 0] # 24時間39分35秒。\n  25.19\n  [ 35, 0 ]\n]\n\nMARS_GREGORIO =\n  calendar: [\n    \"1年1月1日(木)0時0分0秒\"\n    g.parse \"0年9月1日\" # 春分が３月くらいになるよう、恣意的に決めました。\n    [1,2,10,100,300]\n  ]\n  yeary: [\n    [\"月\", 1, 12]\n    [\"日\", 1]\n  ]\n  daily: [\n    [\"時\", 0,24]\n    [\"分\", 0,62]\n    [\"秒\", 0]\n  ]\n\nFancyDate.MarsGregorian = FancyDate.Gregorian.dup()\n  .planet   ...火星\n  .calendar ...MARS_GREGORIO.calendar\n  .era \"西暦\"\n  .yeary    ...MARS_GREGORIO.yeary\n  .daily    ...MARS_GREGORIO.daily\n  .init()\n","class Tempo\n  constructor: (...@args, @callback)->\n    @tempo = to_tempo @args[0], @args[1], new Date 0\n\n  tick: ->\n    tempo = to_tempo ...@args\n    return if @tempo.now_idx == tempo.now_idx\n    @callback(tempo)\n    @tempo = tempo\n\nto_msec = (str)->\n  1000 * to_sec str\n\nto_sec = (str)->\n  timeout = 0\n  str.replace /(\\d+)([ヵ]?([smhdwy秒分時日週月年])[間]?(半$)?)|0/g, (full, num, fullunit, unit, appendix)->\n    return null unless num = Number num\n    if '半' == appendix\n      num += 0.5\n    timeout += num *\n      switch unit\n        when \"s\", \"秒\"\n          1\n        when \"m\", \"分\"\n          60\n        when \"h\", \"時\"\n          3600\n        when \"d\", \"日\"\n          3600 * 24\n        when \"w\", \"週\"\n          3600 * 24 * 7\n        when \"y\", \"年\"\n          31556925.147 # 2019 average.\n        else\n          throw new Error \"#{str} at #{num}#{unit}\"\n  timeout\n\nto_tempo_bare = (size, zero, write_at)->\n  now_idx = Math.floor(( write_at - zero) / size)\n  last_at = (now_idx + 0) * size + zero\n  next_at = (now_idx + 1) * size + zero\n  remain  =  next_at - write_at\n  since   = write_at -  last_at\n  timeout = remain\n\n  { last_at, write_at, next_at, timeout, since, remain, zero, now_idx, size }\n\n###\nto_tempo_by = (table, zero, write_at)->\n  scan_at = write_at - zero\n  if scan_at < 0\n    now_idx = -1\n    next_at = zero\n    last_at = -Infinity\n  else\n    last_at = 0\n    for next_at, now_idx in table\n      unless scan_at < next_at\n        last_at = next_at\n        continue\n      break\n\n    if last_at == next_at\n      next_at = Infinity\n    next_at += zero\n    last_at += zero\n\n  size   =  next_at -  last_at\n  remain =  next_at - write_at\n  since  = write_at -  last_at\n  timeout = remain\n\n  { last_at, write_at, next_at, timeout, now_idx, remain, since, zero, size, scan_at, table }\n###\n# バイナリサーチ 高速化はするが、微差なので複雑さのせいで逆に遅いかも？\nto_tempo_by = (table, zero, write_at)->\n  scan_at = write_at - zero\n  if scan_at < 0\n    now_idx = -1\n    next_at = zero\n    last_at = -Infinity\n  else\n    top_idx = 0\n    now_idx = table.length\n    while top_idx < now_idx\n      mid_idx = (top_idx + now_idx) >>> 1\n      next_at = table[mid_idx]\n      if next_at <= scan_at\n        top_idx = mid_idx + 1\n      else\n        now_idx = mid_idx\n\n    next_at = table[now_idx] || Infinity\n    last_at = table[now_idx - 1] || 0\n    next_at += zero\n    last_at += zero\n\n  size   =  next_at -  last_at\n  remain =  next_at - write_at\n  since  = write_at -  last_at\n  timeout = remain\n\n  { last_at, write_at, next_at, timeout, now_idx, remain, since, zero, size, table }\n\n\nmodule.exports = m = {\n  Tempo\n  to_msec\n  to_sec\n  to_tempo_bare\n  to_tempo_by\n}\n","module.exports = require(\"lodash\");"],"sourceRoot":""}