{"version":3,"sources":["webpack://FancyDate/webpack/universalModuleDefinition","webpack://FancyDate/webpack/bootstrap","webpack://FancyDate/./src/fancy-date.coffee","webpack://FancyDate/./src/time.ts","webpack://FancyDate/./src/index.coffee","webpack://FancyDate/./src/sample.coffee","webpack://FancyDate/external \"lodash\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_","reg_token","calc_set","calc","path","val","sub_define","size","msec","daily_define","range","Math","day","daily_measure","Indexer","list","rubys","zero","length","dic","eras","divs","idx","B","C","D","E","F","H","J","M","N","Q","S","Y","Z","b","f","u","w","x","y","year","sunny","earthy","moon","moony","all_eras","start","leaps","month_divs","A","a","is_solor","G","at","num_1","num_0","label","num","parseInt","sub","season","month","week","hour","minute","second","era","table","upto","period","is_leap","years","month_sum","Array","year_s","year10","year12","year60","zero_size","idx_path","timezone","geo","to_tempo_bare","center_at","year_size","day_utc","cjd","jd","ld","mjd","day_s","day10","day12","day60","to_label","is_just","gaps","gap","leap","is_legal_solor","is_legal_eto","is_legal_ETO","南中時刻","南中差分","deg_to_day","sin","year_to_rad","PI","T0","真夜中","last_at","T1","days","deg_to_rad","rad_to_day","高度","K","lat","赤緯","asin","atan","tan","季節","cos","時角","acos","utc","d0","Zz","now","map","立春","春分","秋分","Tempo","dd","now_idx","春","夏土用","夏節分","立夏","夏","秋土用","秋節分","立秋","秋","冬土用","冬節分","立冬","冬","春土用","節分","春節分","立春2","next_at","日の出","日の入","tails","to_tempo_by","tempos","k","drill_down","base","data","b_size","to_tempo","write_at","to_tempo_floor","Nn","Zs","Zu","era_base","tgt","str","tokens","reg","items","token","RegExp","bk","ik","has_notes","雑節","console","SECOND","to_msec","MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","VALID","window","Date","getTimezoneOffset","tempo_zero","getDay","TIMERS","DISTANCE_NAN","DISTANCE_LONG_AGO","Infinity","DISTANCES","this","floor","since","sub1","sub2","subf","do2","do3","that","step","dup","limit","ary","push","succ","slide","table_idx_diff","table_diff","sleep","Error","min","max","reduce","timeout","Promise","ok","setTimeout","scan_at","table_size","table_idx","top_idx","mid_idx","to_sec","replace","full","num_str","fullunit","unit","appendix","Number","size_str","zero_str","to_timer","unit_mode","_limit","to_relative_time_distance","NaN","九星","九曜","七曜","六曜","九星かな","九曜かな","七曜かな","六曜かな","月相","時鐘","月相かな","時鐘かな","和風月名","二十四節季","和風月名かな","二十四節季かな","十干","十二支","十干かな","十二支かな","ガニメデ","ナマカ","地球","月","日本","火星","水星","金星","木星","カリスト","土星","タイタン","天王星","チタニア","海王星","トリトン","冥王星","カロン","セレス","ハウメア","ヒイアカ","マケマケ","エリス","ディスノミア","元号","DIC","FancyDate","g","FastEarth","getTime","require"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAmB,UAAID,IAEvBD,EAAgB,UAAIC,IARtB,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,mGCjFrD,mC,qDAAA,uCAII,EAJJ,IAKAC,EAAI,KAEJC,EAAY,4DAIZC,EAAW,cACT,0B,cACE,KAACC,KAAKC,GAAN,YAAmBC,EAAKD,QAAA,IAASC,G,UAErCC,EAAa,c,MAGX,OAFQ,CAACC,GAET,KADAC,GAAcD,IAGhBE,EAAe,cACb,IAAAC,E,MAEA,OAFAA,EAAQ,CAACC,KAAA,MAAWH,EAAZ,IAER,KADAA,EAAOE,EAAA,GAAWE,IAGpBC,EAAgB,c,MAGd,OAFQ,CAACF,KAAA,MAAWH,EAAZ,GAAyBG,KAAA,KAAUH,EAAnC,IAER,KADAA,EAAOA,IAIHM,EAAN,MACE,YAAc,GACZ,WADaC,EAAMC,GAAA,GAAaC,GAAA,aAChC,MAAGF,IACEA,EAAH,QACE,UAAQA,EACR,YAAUA,EAFZ,QAIE,YAJF,GAMA,QAAGC,EAAOE,YAAA,KAAUH,EAApB,SACE,WADF,IAGF,MAAGE,IACMA,EAAP,SACE,UADF,M,YAGC,MACL,YAAcxC,GACZ,IACK0C,IAAD,KAAF,IAAShB,KAAD,KAAR,MAAkBH,EAAA,UADpB,KAGE,SAAO,GACP,UACE,CAAAoB,KAAA,GACAC,KADA,GAEAC,IAFA,GAGAL,KAHA,GAIAT,KAJA,GAKAE,MAAO,IACN,MACD,4DAGA,mBAFIa,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAI,GAE5D,sBAHI,CAAC,OAGL,kCADIC,EAAI/D,EAAIC,EAAI+D,EAAIjE,EAAI0B,EAAIC,EAAIuC,EAAIC,EAAIC,EAAIC,EAAI,GAChD,YAAAJ,IAAA,6B,cACE,KAAClB,IAAD,GAAY,IAAIL,EAAJ,KALb,IAOP,M,OACE,IAAI,KAAJ,kBAEF,OAAS,EAAD,OAMN,QAAA4B,E,OAAAA,EAAO7B,EAAc8B,EAAd,GAAwBC,EAAxB,IACPhC,EAAMH,EAAamC,EAAb,GAAwBA,EAAxB,IACN,IACEC,EAAOhC,EAAciC,EAAd,GAAwBF,EADjC,KAGA1C,EAAA,kBAA0B,CAA1B,SACAA,EAAA,iBAA0B,eAA1B,QAEAxB,OAAA,OAAc,KAAd,IAAoB,0BAApB,QACA,KAEF,IAAM,EAAM0C,EAAP,IACH,IAAA2B,E,OAAAA,EAAW,CAAC,SAAU3B,EAAA,IAAS,OAASrB,IACxC,KAACoB,IAAD,EAAS,IAAIL,EAAQ,CAAZ,IACTpC,OAAA,OAAc,KAAd,IAAoB,OAApB,SACA,KAEF,SAAWsE,EAAQ,CAAC,iBAAD,cAAT,GAA8CC,EAA9C,KAA4DC,EAA5D,M,OACRxE,OAAA,OAAc,KAAd,IAAoB,sBAApB,UACA,mBAAiB,MAAAuE,EACjB,oBAAkB,MAAAC,EAClB,KAEF,KAAOzE,GACL,iC,OACE,KAAC0C,IAAD,GAAY,IAAIL,EAAJ,G,OAGd,gCAAYI,YAAA,KAAT,SAAAzC,EAAA,qBAA4ByC,YAAA,KAC7B,KAACC,IAAD,EAAS,IAAIL,EAAQrC,EAAZ,GACT,KAAC0C,IAAD,EAAS,IAAIL,EAAQrC,EAAZ,GACT,KAAC0C,IAAIK,EAAL,KAAc,KAACL,IAAII,EAAL,KAAc,KAACJ,IAAIgC,EAAElC,KACnC,KAACE,IAAI9C,EAAL,KAAc,KAAC8C,IAAIiB,EAAL,KAAc,KAACjB,IAAIiC,EAJnC,MAMG,KAACjC,IAAIK,EAAL,MAAe,KAACL,IAAII,EAAvB,OACE,KAACJ,IAAIgC,EAAL,KAAc,KAAChC,IAAIiC,EAAL,gB,UACZ,SAAW,oDAAX,EACE/E,EAAI,KAAC8C,IAAIK,EAAET,KAAKO,EAAM,KAACH,IAAIK,EAAX,QAChBY,EAAI,KAACjB,IAAII,EAAER,KAAKO,EAAM,KAACH,IAAII,EAAX,Q,EAChB,iB,eALN,OAOG,KAACJ,IAAIK,EAAL,OAAgB,KAACL,IAAII,EAAxB,QACE,KAACJ,IAAIgC,EAAL,MAAe,KAAChC,IAAIiC,EAAL,iB,UACb,SAAW,oDAAX,EACE/E,EAAI,KAAC8C,IAAIK,EAAER,MAAMM,EAAM,KAACH,IAAIK,EAAX,QACjBY,EAAI,KAACjB,IAAII,EAAEP,MAAMM,EAAM,KAACH,IAAII,EAAX,Q,EACjB,QAAG,GAAGlD,EAAA,aAAH,e,eALT,OAMA,KAEF,MAAQgF,GAAD,G,OACL,KAAClC,IAAD,SAAgBkC,EAChB,KAEF,O,OACE,iBACA,kBACA,oBACA,gBAEA,iBACA,eACA,gBAEA,gBACA,KAEF,YACE,wDAWA,mBAXI9B,EAAIC,EAAIE,EAAIC,EAAI2B,EAAI1B,EAAIE,EAAIC,EAAII,EAAIiB,EAAIhB,EAAI/D,EAAIgE,EAAIjE,EAAI0B,EAAIC,EAAI,GAClE,EACKgB,EAAH,KACE,IAAKA,EAAA,KAAL,QAEA,WAJJ,SAUF,UAFIiB,EAAIC,EAAIC,EAAI5D,EAAIiE,EAAIE,EAAI,IAAG,SAE/B,kBADID,EAAI,IAAG,YACX,wCAAAH,IAAA,cAHI,IAAG,YAGP,a,cACE,KAAClB,IAAI5B,GAAL,MAAkB8C,EAAE,KAAClB,IAAI5B,GAAP,O,SAEtB,aACE,wDAKA,mBAHIgC,EAAIC,EAAIE,EAAIC,EAAIG,EAAIC,EAAII,EAAIiB,EAAIhB,EAAI/D,EAAIC,EAAI+D,EAAI,YAAM,aAAK,KAAF,OAAYf,EAAM,KAACP,KAAD,QAAP,IAAd,EAAgDhB,EAAhD,KAG1D,UAFIiC,EAAIlC,EAAIyC,EAAI,Y,OAAMxC,EAAI,GAE1B,UALI,YAAM,aAAK,KAAF,OAAYuB,EAAM,KAACP,KAAD,QAAP,IAAd,EAAgDhB,EAAhD,KAKV,EAJI3B,EAAI2B,EAAI,YAAM,aAAK,KAAF,OAAYuB,EAAM,KAACP,KAAD,QAAP,IAAd,EAAgDhB,EAAhD,KAIlB,EADIkC,EAAIC,EAAII,EAAIE,EAAIC,EAAI,Y,OAAM1C,EAAI,GAClC,wCAAAsC,IAAA,6B,cACE,KAAClB,IAAI5B,GAAL,OAAmBc,G,SAEvB,eACE,wBAAA+C,EAAAG,EAAA,kCAoBA,SApBAA,EAAK,WACH,SAAG,KAAH,MAEE,OADAxD,EAAI,KAACgB,KAAK,e,OACV,GAWJe,EAAI,YAAW,eAAO,KAAH,YAAJ,8BAAkD0B,EAAA,UAAlD,MACf5B,EAAIxD,EAAI2B,EAAI,YAAW,M,gCAAa0D,EAAA,cACpCN,EAAI5B,EAAIC,EAAIE,EAAIC,EAAII,EAAII,EAAIiB,EAAIhB,EAAI/D,EAAIC,EAAI+D,EAAI,YAAW,M,gCAAamB,EAAA,cAIxE,sBAHIxB,EAAIlC,EAAIyC,EAXZiB,EAAQ,Y,OAAWxD,EAAA,SAAW,aAAX,UAcnB,UARI,W,OAAG,KAAC0D,OAQR,MADIlB,EAZE,YACJ,IAAAmB,EAAA,E,OAAAA,EAAMC,SAAS,KAAT,SACNC,EAAM,GAAG,aAAH,IAAkB,SACxB7D,EAAA,kBAA6B6D,GAU/B,cAPI,Y,MAAW,GAAI,KAAJ,UAAgB,UAO/B,EAFIvB,EAAIG,EAbRgB,EAAQ,Y,OAAWzD,EAAA,SAAW,KAAX,gBAenB,oBAAAqC,IAAA,6B,cACE,KAAClB,IAAI5B,GAAL,SAAqBc,G,SAEzB,WACE,YAAAyD,EAAA,I,OAAAA,EAASxD,EAAc,KAACH,KAAKK,KAApB,KAA+B,KAACW,IAAIgB,EAApC,QACT4B,EAASlD,EAAc,KAACV,KAAKK,KAAN,KAAkB,KAACW,IAAIW,EAArC,OAA+C,KAAC3B,KAAKK,KAArD,KACTwD,EAASvD,EAAc,KAACU,IAAIO,EAAL,OAAgB,KAACvB,KAAKK,KAApC,IAA8C,KAACL,KAAKK,KAApD,KAETyD,EAAS3D,EAAc,KAACH,KAAKK,KAApB,IAA8B,KAACW,IAAIS,EAAnC,QACTsC,EAAS5D,EAAgB2D,EAAhB,KAA2B,KAAC9C,IAAI/C,EAAhC,QACT+F,EAAS7D,EAAc4D,EAAd,KAA2B,KAAC/C,IAAIpB,EAAhC,QACTS,EAASF,EAAc6D,EAAd,KAA2BA,EAA3B,MACTjE,EAAA,kBAA0B,kDAA1B,SACAA,EAAA,iBAA0B,kDAA1B,SAEF,WACE,cAAAe,E,OAAAA,EAAO,KAACd,KAAKc,KAAKmD,KAClBrD,EAAA,W,YACE,qDAAI,YACF,KAAQ,eAAR,IACA,KAACZ,KAAKiB,KAAN,KAAgB,CAAC,EAAD,EAAekB,EAA/B,U,OACA9B,EAAOS,G,sBACX,eACA,KAACoD,MAAM7D,KAAP,IAAkBO,EAEpB,wBACE,MAAAH,EAAA,0CA0BA,IA1BAA,EAAM,KAACT,KAAKK,KAAKI,IACjB0D,EAAO,YACL,UAAA9D,EAAA,EACA,IADAA,EAAO,EACP,4B,cACEA,GAAQxC,EAAI4C,G,UAEhB,EAAqB,KAACO,IAAtB,UAAI8B,GAAJ,GAAWsB,GAAA,OAAPtB,GAAA,IAEJvC,EACE,CAAAgC,KAAA,W,cACE,SAAW,oCAAX,GAEE,IADA8B,EAAU,EACV,2B,OACclD,EAAZ,IACAkD,GAAW,EAAQ,G,OACrB,KAACrE,KAAKO,MAAMgC,KAAK8B,I,uBACjB9B,KAAN,GAAgB,KAACvC,KAAKO,MAAMgC,KAAK,GACjC+B,EAAQ,KAACtE,KAAKO,MAAMgC,OAEpB,cAAiB,KAAjB,KACA,KACEQ,EAAA,W,YACE,iD,YACE,KAAC/C,KAAKO,MAAMqD,MAAM,EAAIzC,EAAJ,I,sBACtB,GAJF,MAKAoD,EAAY,EACZ,uBACEA,G,KAGF,IADAhE,EAAA,MAAc,GACd,uB,QACE0C,EAAIuB,MAAA,SACJrD,EAAM4B,EAAA,eACG3C,EAAOmE,EAChBhE,EAAMqD,MAAN,GAAoBX,EAQtB,IANAV,EAAO4B,EAAK5D,EAAL,MACP6D,EAAS7B,EAAKA,EAAA,UACd6B,EAAS9D,EAAA,KACTP,EAAA,iBAAyB,CAAzB,WAEA6D,EAAQ,GACR,uB,OAEEA,EADYpD,KAAA,MAAWC,EAAX,IACO0D,EAAK5D,EAAMqD,MAAX,I,OAErB,WAAS,SAASvD,KAAM,kBAE1B,0BACE,MAAAI,EAAA,0BAUA,IAVAA,EAAM,KAACT,KAAKK,KAAKI,IACjB0D,EAAO,YACL,UAAA9D,EAAA,EACA,IADAA,EAAO,EACP,4B,cACEA,GAAQxC,EAAI4C,G,UAEhB6D,EAAQ,KAACtE,KAAKO,MAAMgC,OAEpB,cAAiB,KAAjB,KACAgC,EAAY,EACZ,uBACEA,G,KAIF,IAFAhE,EACE,CAAAqD,MAAO,IACT,uB,QACEX,EAAIuB,MAAA,SACEzB,EAAA,eACG3C,EAAOmE,EAChBhE,EAAMqD,MAAN,GAAoBX,EAGtB,IADAW,EAAQ,GACR,uB,OAEEA,EADYpD,KAAA,MAAWC,EAAX,IACO0D,EAAK5D,EAAMqD,MAAX,I,OAErB,WAAS,SAASvD,KAAM,WAE1B,YACE,OAAG,KAAH,cACE,KADF,wBAGK,KAAH,eACE,KADF,0BAGE,WAAS,CAAEE,MAAF,GAAaF,KAAM,IAElC,UACE,oB,OAAG,KAAH,gBACE,EAAgB,KAACW,IAAjB,OAAMoD,GAAA,aACN,KAACpE,KAAKkB,KAAN,OAFF,IAIA5C,EAAI,cAAU,KAAC0C,IAAX,QACJ,EAAM,OAACA,IAAIgB,EAAL,OAAoB,EAE1ByC,GADAlC,GAAQ6B,GAAD,GAAgB9F,EAAhB,EAAsBA,EAAEgE,GACfhE,EAAE4D,EAClBwC,EAASnC,EAAOjE,EAAEJ,EAClByG,EAASpC,EAAOjE,EAAE2D,EAClB2C,EAASrC,EAAOjE,EAAE2E,EAClB1E,OAAA,OAAc,KAACyB,KAAf,KAA0B,4BAA1B,WACAzB,OAAA,OAAc,KAACyB,KAAf,OAGF,WACE,8CAAA6E,E,OAAAA,EAAY,CAACC,EAAU7E,IACrB,EAAI,KAACD,KAAKmB,IAAN,GAAsB,KAACnB,KAAKK,KAAKJ,GAEvC8E,EAAW,KAAC/E,KAAKK,KAAN,KAAkB,KAACW,IAAIgE,IAAL,IAAe,KAAChE,IAAIgE,IAAtC,IAAgD,IAC3D,KAAChE,IAAIqB,EAAL,MACEA,EAAI4C,EAAc,KAACjF,KAAKK,KAAN,KAAd,GAAoC,KAACL,KAAKK,KAAP,KAAnC,KACNgC,EAAA,SAAa,EAQb5B,EANW,KAACO,IAAI6B,MAAM,GACFR,EAAE6C,UAEJL,EAAA,cACAA,EAAA,cACAA,EAAA,YACAA,EAAA,WAEf,KAAH,eACEM,EAAY3E,KAAA,MAAW,KAACR,KAAKK,KAAN,IAAiB,KAAC6D,MAAM3D,MAAMgC,KAAM,OAACvC,KAAKmB,IAAImB,EAAK,KAACtC,KAAKkB,KAApE,UAGZkD,GADA7B,EADS9B,GAAS,KAACyD,MAAM7D,KAAKuD,MAAMuB,GAAY,KAACnF,KAAKmB,IAAN,EAA9B,IAAD,IACC,KAAC+C,MAAM7D,KAAKkC,KAAkB,KAACvC,KAAKmB,IAAN,EAA9B,IAAD,IACA0D,EAAA,IAJnB,WASItC,EAFC,KAAH,eACU9B,GAASlC,OAAA,OAAc,KAAC2F,MAAM7D,KAArB,OAAiC,GAAI,KAACL,KAAKmB,IAAN,EAArC,IAAD,GACA0D,EAAA,IAFlB,QAIUpE,EAAQoE,EAAA,YACAA,EAAA,IALlB,QAQFlB,EAAS,KAAC3C,IAAIwB,MAAL,GAAgBqC,EAAA,IA/BzB,YAgCA,WAAcI,EAAc,KAACjF,KAAKK,KAApB,OAAuC+D,GAArD,IACAT,EAjCA,EAoCAM,GAAA,6BAAoB,YAAM,SAC1B,KAACjE,KAAD,KAAa,GACV,KAAH,cACKoE,EAAH,IACEH,EAAMG,EAAS,KAACF,MAAM7D,KAAKkC,KAAK,GAChC,KAACvC,KAAD,KAAa,CAAC,CAAC,KAACgB,IAAF,MAFhB,KAIG2C,EAAH,IACEM,EAAMN,EAAS,KAAC3D,KAAKK,KAAKkC,KAC1B,KAACvC,KAAD,KAAa,CAAC,CAAC,KAACgB,IAAF,MAFhB,KAIC,KAACA,IAAJ,QACE0B,EAAO,EAAI,KAAC1B,IAAI2B,MADlB,IAIAyC,EAAU3E,EAAM4B,EAAE6C,UAClBG,EAAMJ,EAAc,KAACjF,KAAKK,KAApB,qBAAyD6E,UAC/DI,EAAML,EAAc,KAACjF,KAAKK,KAApB,qBArDN,UAsDAkF,EAAMN,EAAc,KAACjF,KAAKK,KAApB,oBAtDN,QAuDAmF,EAAMP,EAAc,KAACjF,KAAKK,KAApB,mBAvDN,QA0DAoF,EAAQhF,EAAMoE,EAAU,IAAK,OAC7BhB,EAAQpD,EAAMoE,EAAU,IAAK,OAC7Ba,EAAQjF,EAAMoE,EAAU,IAAK,OAC7Bc,EAAQlF,EAAMoE,EAAU,IAAK,OAC7Be,EAAQnF,EAAMoE,EAAU,IAAK,OAC7BtG,OAAA,OAAc,KAACyB,KAAf,KAA0B,2FAA1B,UAEF,MAAQ1B,GACN,oB,SAA8B,KAAC0C,IAAI5B,KACjCc,EAAA,KAAe,KAACc,IAAI5B,GAAKwB,KACzBV,EAAA,SAAe,KAACc,IAAI5B,GAAKyG,U,OAC3BvH,EAEF,YACE,UAAAwH,EAAA,QAEA,GAFAA,EAAU,c,OAASxG,IAAKkB,KAAA,MAAYlB,EAAZ,GAAsB+C,GAC9C0D,EAAO,CAAG,KAAC/F,KAAKK,KAAN,KAAkB,KAACL,KAAKK,KAA1B,IAAuC,KAACL,KAAKO,MAAMgC,KAApD,IACJ,KAACvB,IAAJ,MACE,gD,OACEgF,EAAMD,EAAKA,EAAA,UACX,EAAG5E,EACD6E,GAAO,EADT,EAGEA,GAAO,EAHT,EAIAD,EAAA,KAAAC,G,MACJ,CAAAzD,KAAM,CAAC,CAAC,KAACvB,IAAIW,EAAP,QAAkB,KAAC3B,KAAKO,MAA9B,OACAE,IAAK,CAAE,KAACT,KAAKO,MAAR,KAAoB,KAACP,KAAKO,MAA1B,OAAwC,KAACP,KAAKO,MADnD,QAEA0F,KAAMF,EAAA,IAAS,GAAMtC,SAAS,EAAT,IACrByC,eAAgBJ,EAAQ,EAAI,KAAC9E,IAAIS,EAHjC,QAIA0E,aAAcL,EAAS,KAAC9E,IAAI9C,EAAd,OAAwB,KAAC8C,IAAIiC,EAA7B,SAA2C6C,EAAS,KAAC9E,IAAIiB,EAAd,OAAwB,KAACjB,IAAIiC,EAJtF,QAKAmD,aAAcN,EAAS,KAAC9E,IAAIK,EAAd,OAAwB,KAACL,IAAIgC,EAA7B,SAA2C8C,EAAS,KAAC9E,IAAII,EAAd,OAAwB,KAACJ,IAAIgC,EAA7B,SA+B3D,KAAO,GAAM,uBAAyBiC,EAAc,KAACjF,KAAKK,KAApB,IAA8B,KAACL,KAAKc,KAApC,IAAhC,IACJ,sB,QAAA,kBAWAuF,EAAOnB,GAFPoB,EAFqB,GANrBC,EAAc,KAACvG,KAAKK,KAAN,IAAiB,KAMJmG,GAL3BC,EAAc,EAAIC,EAAK,KAAC1G,KAAKK,KAAKkC,OAElCoE,EAAM1B,EAAc,KAACjF,KAAKK,KAApB,KAA+B,KAACL,KAAKc,KAArC,OAJN,IAO2B,OACN,IAAbyF,EAAmBC,EAAKC,EAAcE,EAAd,QAAL,GAAkCD,IAI7DE,EAAMC,EAAUP,EAKhB,SAHAQ,EAAK7B,EAAc,KAACjF,KAAKK,KAApB,KAA+B,KAACW,IAAIwB,MAApC,MAGL,KAFKsE,EAAA,MAAWL,EAEhB,2BAEF,MAAQ,EAAMtF,EAAP,GAAgB,yBAAoB,UAApC,IACL,gBAAA4F,EAAA,gB,OAAAA,EAAO,CAAC,GAEN,IACA,GAHK,uBASP,mDACAC,EAAc,EAAIN,EAAK,IACvBO,EAAc,KAACjH,KAAKK,KAAN,KAAmB,EAAF,GAE/B6G,EAAKH,EAAA,GAAiBC,EACtBG,EAAM,KAACnG,IAAIyB,OAAL,GAAiBuE,EACvBI,EAAM,KAACpG,IAAIgE,IAAL,GAAiBgC,EAEvBK,EAAKC,EAAMd,EAAIW,GAAKX,EAAf,IACAe,EAAMC,EAAIC,GAAMC,EAAhB,IAOL,gBANAC,EAAKC,GAAOpB,EAAIU,GAAMV,EAAIY,GAAOZ,EAAvB,KAAoCkB,EAAIN,GAAOM,EAApD,KAML,KALKE,GAAOF,EAAIN,GAAOZ,EAAX,GAAqBA,EAAIY,GAAOM,EAAX,GAAqBA,EAA5C,IAAwDA,EAA7D,IAKL,qBAHMlH,KAAA,MAAW6F,EAAOsB,EAAlB,GAGN,eAFMnH,KAAA,MAAW6F,EAAOsB,EAAlB,IAOR,KAAKE,GAAK,cAAe,eAArB,IACF,IAAAC,EAAA,8D,OAAAA,EAAK3J,EAAA,IAAM4J,EAAN,OACL,+BAKI,CAAmB,EAAnB,EAAwB,GAAxB,IACF,IAAK,IADH,IACY,KAAO,EADnB,EAEF,GAAc,KAAO,EAFnB,EAGF,IAAc,KAAO,EAHnB,EAIF,EAAc,MAAO,EAJnB,OAKE,IACJ,IAAAC,E,OAAAA,EAAMD,EAAA,SAAezI,EAAI,EAAN,GAAcyI,EAAG3H,KACpC6E,EAAc9G,EAAd,KAAsB2J,EAAtB,cAEF,OAAwB,CAAC,GAAI,IAAK,KAAKG,IAAI,GAAMC,EAAA,KAAQ5I,EAAR,KAEjD,KAAa,CAAC6I,EAAIC,GAAIH,IAAI,GACxBI,EAAA,KAAWC,EAAA,KAAX,GAAuBA,EAAA,KAAvB,MACF,KAAa,CAACH,EAAIC,GAAIH,IAAI,IACxB,IAAA5G,E,OAAAA,EAAI4D,EAAc,KAACjF,KAAKK,KAApB,IAA8B,KAACL,KAAKc,KAApC,MAAgDwH,EAAhD,WACFC,QAAA,EAAFlH,EAAEkH,QAAY,KAACvH,IAAIK,EAAEN,QACrBM,EAAA,MAAU,KAACL,IAAIK,EAAL,OAAF,EAAwBA,EAAxB,QAAR,KAEFmH,EAAIH,EAAA,OAAcI,EAAd,QACJC,EAAMC,EAAA,OACNC,EAAIP,EAAA,OAAcQ,EAAd,QACJC,EAAMC,EAAA,OACNC,EAAIX,EAAA,OAAcY,EAAd,QACJC,EAAMC,EAAA,OACNC,EAAIf,EAAA,OAAcgB,EAAd,QAEJC,EADAC,EAAMC,EAAA,OAGNf,EAAMJ,EAAA,UACNQ,EAAMR,EAAA,UACNY,EAAMZ,EAAA,UACNgB,EAAMhB,EAAA,UAEN,oOAYF,kBAAoBR,EAAKpH,GACvB,oCAMA,MANA,0BAAqB,eAAe,YAApC,KACAL,EAAO,KAACY,IAAIS,EAAL,OAAgB,EAEvBb,EAAO,GACP6I,EAAU,EACVpJ,GAASqJ,EAAMjJ,EAAR,SAAwBL,EACpB,kCAAX,EACEqJ,GAAWpJ,EACXO,EAAA,KAAUJ,KAAA,MAAV,IAIF,IAFAiJ,EAAUC,EAAMjJ,EAAIoG,QACpBxG,GAASsJ,EAAF,IAAkB,EAAF,GACZ,sCAAX,EACEF,GAAWpJ,EACXO,EAAA,KAAUJ,KAAA,MAAV,IAMF,IAJAiJ,EAAUhJ,EAAIL,KACdC,GAASI,EAAA,QAAF,GAAwBL,EAE/BwJ,EAAQ,GACG,sCAAX,EACEA,EAAA,KAAWpJ,KAAA,KAAX,IACAiJ,GAAWpJ,E,OACbO,EAAA,QAAagJ,EAAb,WACAC,EAAA,EAAkBpJ,EAAlB,WAEF,KAAOoH,EAAKiC,EAAS,eAAf,GAAgCxL,EAAI,UAApC,IACJ,wB,KAAmB,SAAWwL,EAAO3L,EAAlB,Y,OACjB4L,EAAA,6BAA+B,SAA/B,U,SAEJ,UAAYlC,GACV,gDAAA1J,EAAA6L,EAAA,0BAwCA,OAxCAA,EAAa,CAACC,EAAMhK,EAAMmD,EAAb,KACX,MAAA8G,EAAA,I,OACAhG,GAAA,OADAgG,EAAO,KAAChG,MAAM7D,KAAKJ,IACXiK,EAAMD,EAAA,eAAcC,GAE1B5L,EAAIuL,EAAA,EAAmBI,EAAnB,QADN,IAGEE,EAAS,KAACnK,KAAKK,KAAKJ,IACpB3B,EAAI2G,EAAA,EAAsBgF,EAAtB,YACJ,OAAWA,EAAA,KAAY3L,EALzB,MAMAA,EAAA,KAAS2B,EACT3B,GAEF8L,EAAW,CAACnK,EAAMoK,EAAP,IACTpF,EAAc,KAACjF,KAAKK,KAApB,GAAgC,KAACL,KAAKc,KAAtC,MAEFwJ,EAAiB,CAAChM,EAAGoF,IACnBpF,EAAA,MAAQ,KAAC0B,KAAKK,KAAd,GAAyB,KAACL,KAAKc,KAA/B,IAEFY,EAAIuD,EAAc,KAACjF,KAAKK,KAApB,IAA8B,KAACL,KAAKc,KAApC,GAlBJ,GAsBAkB,EAAKgI,EADLjC,EAAK9C,EAAc,KAACjF,KAAKK,KAApB,KAA+B,KAACL,KAAKc,KAArC,OArBL,aA2BKwJ,EADAF,EAAA,OADErC,EAAA,QAAa,KAAC/H,KAAKK,KAAKsD,QAzB/B,OAgCA/B,EAAKoI,EADLO,EAAKD,EADLC,EAAKH,EAAA,QACA,OACA,OAELI,EAAKR,EAAA,WAAyBO,EAAzB,SACEA,EAAA,SAAYC,EAAnB,eACEA,EAAKR,EAAA,WAAyBO,EAAzB,SACEA,EAAA,SAAYC,EAAnB,eACED,EAAA,SADF,IAGKC,EAAA,SAAP,UAGIC,EAAK1C,EAAA,IAAOyC,EAAP,SAFF,MADP,KAIO,KAACxJ,IAAIgB,EAAL,QAJP,EAMIyI,EAAK1C,EAAA,IAAOyC,EAAP,SAFF,MAJP,QAQIC,EAAK1C,E,OACTwC,EAAA,QAAa,EAAEC,EAAGjC,QAAW,KAACvH,IAAIgB,EAArB,SAAmC,EAE7C,KAAH,gBAEEG,EAAI6H,EADJrK,EAAIyK,EAAA,UACA,SACJ,SAAazK,EAAA,QAAY,KAACK,KAAKkB,KAAKkD,OACpCzC,EAAIqI,EAAA,WACJ7L,EAAI6L,EAAA,EALN,QAOK,KAAH,gBAEErI,EAAIqI,EADJ7H,EAAImI,EAAA,SACA,SACJnM,EAAI6L,EAAA,EAHN,SAKE7H,EAAIsI,EACJ9I,EAAI4I,EACJpM,EAAIyD,EAAA,IAPN,IAUC,KAACZ,IAAJ,UAEEZ,GADAqB,EAAI,6BACG,KAAS,KAACT,IAAI/C,EAAE8C,OACvB9C,EAAIgH,EAAA,EAAoBxD,EAApB,QAHN,KAKEA,EAAIuI,EAAA7L,EAAA,QACJF,EAAI+L,EAAA,EANN,WAOApK,EAAIoK,EAAA,YACJlI,EAAIkI,EAAA,UAEJ7G,EAAI,GACJ,MAAG,sBACDuH,EAAWb,EAAY,KAAC3F,MAAM7D,KAAnB,IAA6B,KAACL,KAAKc,KAAnC,QAEX,OADAmD,EAAM,KAACjE,KAAKiB,KAAKyJ,EAAA,UACdzG,EAAK,aACN9B,EAAA,SAAa,EAAI8B,EAAI,GACrBd,EAAA,MAAUc,EAFZ,MAIF3B,EAAI/D,OAAA,cACD,QAAH,IACE4E,EAAA,MAAU,MACVb,EAAA,QAAY,EAAIA,EAFlB,SAGAD,EAAI,KAACrB,IAAIqB,EA1FT,MA+FAD,EAAI4H,EADCI,EAAA,OAAiBjI,EAAjB,SACD,QACJb,EAAI0I,EAAA,SAEJjI,EACE,CAAAwG,QAASpG,EAAEoG,SACVpG,EAAA,QAAYC,EAAf,UAEEL,EAAA,SAAa,EACbK,EAAA,QAHF,GAOAa,EAAI,CAAAsF,QAAA,EAAWpG,EAAA,QAAY,KAACnC,KAAKc,KAAK8D,OAAY,KAAC5D,IAAIiC,EAAElC,SACzDkB,EAAI,CAAAsG,QAAA,EAAWpG,EAAA,QAAY,KAACnC,KAAKc,KAAK6D,OAAY,KAAC3D,IAAIiB,EAAElB,SACzD7C,EAAI,CAAAqK,QAAA,EAAWpG,EAAA,QAAY,KAACnC,KAAKc,KAAK4D,OAAY,KAAC1D,IAAI9C,EAAE6C,SACzDmB,EAAI,CAAAqG,QAAA,EAAWpG,EAAA,QAAY,KAACnC,KAAKc,KAAK2D,OAAY,KAACzD,IAAIkB,EAAEnB,SAGzDc,EAAI,CAAA0G,QAAS/H,KAAA,MAAW,EAAImB,EAAJ,QAAgB,KAACX,IAAIW,EAAhC,SAGbqB,EAAIiC,EAAc,KAACjF,KAAKK,KAApB,IAA8B,KAACL,KAAKc,KAApC,SACJM,EAAI6D,EAAc,KAACjF,KAAKK,KAApB,IAA8B,KAACL,KAAKc,KAApC,SACJO,EAAI4D,EAAc,KAACjF,KAAKK,KAApB,IAA8B,KAACL,KAAKc,KAApC,SACJS,EAAI0D,EAAc,KAACjF,KAAKK,KAApB,IAA8B,KAACL,KAAKc,KAApC,QACJU,EAAIyD,EAAc,KAACjF,KAAKK,KAApB,IAA8B,KAACL,KAAKc,KAApC,SAEJkC,EAAEuF,QAAA,EAAFvF,EAAEuF,QAAY,KAACvH,IAAIgC,EAAEjC,QACrBK,EAAEmH,QAAA,EAAFnH,EAAEmH,QAAY,KAACvH,IAAII,EAAEL,QACrBM,EAAEkH,QAAA,EAAFlH,EAAEkH,QAAY,KAACvH,IAAIK,EAAEN,QACrBS,EAAE+G,QAAA,EAAF/G,EAAE+G,QAAY,KAACvH,IAAIQ,EAAET,QAClB,KAAH,cACEQ,EAAEgH,QAAA,EAAFhH,EAAEgH,QAAY,KAACvH,IAAIO,EADrB,QAGEA,EAAA,UAAcI,EAAA,QAAYxD,EAAEoK,QAAa,KAACvH,IAAIO,EAHhD,QAKA,WAAO,8GAAP,MAEF,MAAQoJ,EAAKC,EAtrBS,UAurBpB,YAAAV,EAAA,oBASA,IATAA,EAAO,KACJ,MACD,IAAAlH,EAAA,kDAAAA,EAAI5B,EAAIC,EAAIC,EAAIC,EAAIC,EAAI2B,EAAI1B,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIiB,EAAIhB,EAAI/D,EAAIC,EAAI+D,EAAIjE,EAAI0B,EAAIC,EAAIuC,EAAIC,EAAIC,EAAQ,EAC5G6H,EAAO,2GADqG,IAD3G,GAIHW,EAASD,EAAA,SACTE,EAAM,cAGN,SADAC,EAAQJ,EAAA,SAAe,UACvB,iBAEE,G,OADAK,EAAQH,EAAOlL,GAAG,GACfqB,EAAM,KAACA,IAAV,GAGE,OAFAd,EAAMc,EAAA,UACNkJ,EAAA,GAAchK,EACd,YAEI,MAASN,EAAA,MAAQ,WAAO,CAAC,IAAhB,OACTsK,EAAA,EAAS,KAAClJ,IAAI9C,EAAL,UACTgM,EAAA,EAAS,KAAClJ,IAAIiB,EAAL,UAHN,MADP,SAMI,MAASrC,EAAA,MAAQ,WAAO,CAAC,IAAhB,OACTsK,EAAA,EAAS,KAAClJ,IAAIK,EAAL,UACT6I,EAAA,EAAS,KAAClJ,IAAII,EAAL,U,OAEd,KAAH,gBACE8I,EAAA,EAAS1J,KAAA,MAAY0J,EAAA,EAAS,KAAClK,KAAKkB,KAA3B,QACTgJ,EAAA,EAASA,EAAA,EAASA,EAAA,EAAS,KAAClK,KAAKkB,KAFnC,QAGAgJ,EAEF,MAAQW,GACN,IAAAC,E,OAAAA,EAAM,IAAMD,EAAA,IAAW,IACrB,aAAG3K,EAAM,KAACc,IAAIgK,EAAd,KACE9K,EADF,MAGE,IAAI8K,EAAA,2BAAJ,aAJQ,SAMZ,IAAIC,OAAJ,GAEF,SAAWpD,EAAKqD,EAAIC,EAAIC,GAAd,GACR,YAAA9M,EAAA,MAEA,GAFAA,EAAI,kBAEJ,GAEE,IADA+M,EAAK,aACL,iD,cACEpI,EAAA,iB,MACE,gB,KAAoB,W,OAClB8G,EAAA,6BAA+B,SAA/B,OAA4CnK,EAAE,IAAGA,K,6BALzD,E,OAOEtB,EAAE4M,GAAF,QAAc5M,EAPhB,IASF,YAAgBuJ,G,OAAO,4BACvB,cAAgBA,G,OAAO,4BACvB,aAAgBA,G,OAAO,4BACvB,WAAgBA,G,OAAO,yBAEvB,MAAQ8C,EAAKC,EA9uBS,UA+uBpB,0BAIA,QAJA,yCAA4B,aAA5B,IACO,KAAC5K,KAAKiB,KAAb,IACEqK,QAAA,QADF,GAEAhJ,GAAK,KAACtC,KAAKiB,KAAKkC,GAAX,GAAmB,EACxB,EACS,KAACnD,KAAKc,KAAN,GAAgBY,EAAI,KAAC1B,KAAKK,KADnC,IAGElC,EAAI,KAAC6B,KAAKK,KAAZ,IACEoB,EAAI,KAACzB,KAAKK,KADZ,KAEEpC,EAAI,KAAC+B,KAAKK,KAFZ,OAGET,EAAI,KAACI,KAAKK,KAHZ,UAKG,KAAH,eACE8E,EAAY3E,KAAA,MAAW,KAACR,KAAKK,KAAN,IAAiB,KAAC6D,MAAM3D,MAAMgC,KAArDD,IAEA,KAACtC,KAAKc,KAAN,OACEnB,EAAI,KAACK,KAAKK,KADZ,QAEE,KAAC6D,MAAM7D,KAAKkC,KAAKD,EAAjB,IAFF,IAGE,KAAC4B,MAAM7D,KAAKuD,MAAMuB,GAAWxD,EAA7B,IANJ,IAQE,KAAC3B,KAAKc,KAAN,OACEwB,EAAI,KAACtC,KAAKK,KADZ,KAEEsB,EAAI,KAAC3B,KAAKK,KAVd,OAYF,UAAY,EAASuK,EAtwBC,oB,OAuwBpBA,EAAA,aACK,IACH,IAAA1K,EACA,cAAG,OADHA,EAAM4J,EAAOkB,EAAA,KACV9K,EAAA,iBACDA,EAAA,SAAa8K,EADf,YAHF,SASF,OAAS,EAAD,G,OACN,eAAW,eAAX,S,6BC1xBJzM,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,IACtD,MAAMyM,EAASC,EAAQ,MACjBC,EAASD,EAAQ,MACjBE,EAAOF,EAAQ,MACfG,EAAMH,EAAQ,MACdI,EAAOJ,EAAQ,MACfK,EAAQL,EAAQ,OAChBM,EAAON,EAAQ,MAEfO,EAAQ,gBAERhH,EADa,oBAAuBiH,QAAqB,OAAXA,OACrBP,GAAS,IAAIQ,MAAOC,oBAAuBV,EAAQ,OAC5EW,GAAe,IAAIF,KAAK,GAAGG,SAAYT,EAAM5G,EAC7CsH,EAAS,CACX,CAAC,IAAK,IAAKP,GACX,CAAC,IAAK,IAAKF,GACX,CAAC,IAAK,IAAKD,GACX,CAAC,IAAK,IAAKD,GACX,CAAC,IAAK,IAAKD,GACX,CAAC,IAAK,IAAKF,IAETe,EAAe,EAAEP,EAbN,WAauBD,EAAM,OACxCS,EAAoB,CAACC,IAdV,WAc8BT,EAAO,KAChDU,EAAY,CACdH,EACA,EAAER,EAjBW,WAiBKA,EAAM,QACxB,EAAED,EAlBW,WAkBMA,EAAO,SAC1B,EAAED,EAAMA,EAAMA,EAAM,SACpB,EAAED,EAAKA,EAAKA,EAAK,QACjB,EAAED,EAAMA,EAAMA,EAAM,SACpB,EAAED,EAAQA,EAAQA,EAAQ,QAC1B,EAAE,KAAOF,EAAQA,EAAQ,QACzB,CAAC,KAAO,KAAO,KAAO,KACtB,CAACE,EAAQF,EAAQA,EAAQ,QACzB,CAACG,EAAMD,EAAQA,EAAQ,QACvB,CAACE,EAAKD,EAAMA,EAAM,SAClB,CAACE,EAAMD,EAAKA,EAAK,QACjB,CAACE,EAAOD,EAAMA,EAAM,SACpB,CAACE,EA9BY,WA8BID,EAAO,SACxB,CAACE,EA/BY,WA+BKD,EAAM,QACxBS,GAEJ,MAAMlE,EACF,YAAYvH,EAAMyH,EAAS8B,EAAUxD,EAAS4C,EAASvF,EAAQ,MACvDA,IACAwI,KAAKxI,MAAQA,GAEjBwI,KAAK5L,KAAOA,EACZ4L,KAAKrC,SAAWA,EAChBqC,KAAKnE,QAAUA,EACfmE,KAAK7F,QAAUA,EACf6F,KAAKjD,QAAUA,EAEnB,WAAa,OAAOiD,KAAKjD,QAAUiD,KAAK7F,QACxC,YAAc,OAAO6F,KAAKrC,SAAWqC,KAAK7F,QAC1C,aAAe,OAAO6F,KAAKjD,QAAUiD,KAAKrC,SAC1C,cAAgB,OAAOqC,KAAKjD,QAAUiD,KAAKrC,SAC3C,gBAAkB,OAAQqC,KAAKjD,QAAUiD,KAAK7F,SAAW,EACzD,kBACI,OAAmB,EAAf6F,KAAKnE,QACEmE,KAAK7F,QAGL6F,KAAKjD,QAGpB,UACI,MAAO,GAAGjJ,KAAKmM,MAAM,IAAMD,KAAKE,MAAQF,KAAKtM,WAEjD,KAAKyM,EAAMC,EAAMC,EAAO9H,GACpB,IAAI,QAAE4B,EAAO,SAAEwD,EAAQ,QAAEZ,EAAO,QAAElB,EAAO,KAAEnI,EAAI,KAAEU,GAAS4L,KAC1D,MAAMM,EAAMD,EAAKF,EAAMC,EAAMjG,GAC7B,GAAIwD,EAAW2C,EAAIvD,QAAS,CACxB,MAAMwD,EAAMF,EAAKF,EAAMC,EAAMjG,EAAUzG,GACvCqJ,EAAUuD,EAAIvD,QACd5C,EAAUoG,EAAIxD,QACdlB,QAEC,CAEDkB,EADYsD,EAAKF,EAAMC,EAAMrD,GACfA,QACd5C,EAAUmG,EAAIvD,QAElB,OAAO,IAAIpB,EAAMvH,EAAMyH,EAAS8B,EAAUxD,EAAS4C,GAEvD,MAAMoD,EAAMC,EAAMC,EAAO9H,GACrB,IAAI,QAAE4B,EAAO,SAAEwD,EAAQ,QAAEZ,EAAO,QAAElB,EAAO,KAAEnI,EAAI,KAAEU,GAAS4L,KAC1D,MAAMM,EAAMD,EAAKF,EAAMC,EAAMrD,GAC7B,GAAIuD,EAAInG,SAAWwD,EAAU,CACzB,MAAM4C,EAAMF,EAAKF,EAAMC,EAAMrD,EAAUrJ,GACvCyG,EAAUmG,EAAInG,QACd4C,EAAUwD,EAAIpG,QACd0B,QAEC,CAED1B,EADYkG,EAAKF,EAAMC,EAAMjG,GACfA,QACd4C,EAAUuD,EAAInG,QAElB,OAAO,IAAIwB,EAAMvH,EAAMyH,EAAS8B,EAAUxD,EAAS4C,GAEvD,SAASrG,GAAM,OAAOsJ,KAAK7F,SAAWzD,GAAMA,EAAKsJ,KAAKjD,QACtD,OAAOyD,GAAQ,OAAQR,KAAK7F,SAAWqG,EAAKzD,SAAWyD,EAAKrG,QAAU6F,KAAKjD,QAC3E,QAAQ0D,GACJ,MAAMlK,EAAIkK,EAAKC,IAAIV,KAAK7F,SAClB5E,EAAIkL,EAAKC,IAAIV,KAAKjD,QAAU,GAClC,OAAOxG,EAAEkB,KAAKlC,GAElB,KAAKoL,GACD,IAAI1N,EAAI+M,KACR,MAAMY,EAAM,GACZ,KAAO3N,EAAEkH,QAAUwG,EAAMxG,SACrByG,EAAIC,KAAK5N,GACTA,EAAIA,EAAE6N,OAEV,OAAOF,EAEX,KAAKhO,EAAI,GAAK,OAAOoN,KAAKe,OAAOnO,GACjC,KAAKA,EAAI,GAAK,OAAOoN,KAAKe,OAAOnO,GACjC,MAAMA,GACF,GAAIoN,KAAKxI,MAAO,CACZ,MAAMqE,EAAUmE,KAAKnE,QAAUjJ,EACzB6B,EAAMoH,EAAUmE,KAAKxI,MAAMnD,OAG3B2M,EAFgBlN,KAAKmM,MAAMpE,EAAUmE,KAAKxI,MAAMnD,QAChCP,KAAKmM,MAAMD,KAAKnE,QAAUmE,KAAKxI,MAAMnD,QAErD4M,EAAaD,EAAiBhB,KAAKxI,MAAMwI,KAAKxI,MAAMnD,OAAS,GAAK2M,EAAiB,EACnF7G,EAAU6F,KAAK5L,KAAO6M,GAAcjB,KAAKxI,MAAM/C,EAAM,IAAM,GAC3DsI,EAAUiD,KAAK5L,KAAO6M,EAAajB,KAAKxI,MAAM/C,GAC9CkJ,EAAWxD,EAAU6F,KAAKE,MAChC,OAAO,IAAIvE,EAAMqE,KAAK5L,KAAMyH,EAAS8B,EAAUxD,EAAS4C,EAASiD,KAAKxI,OAErE,CACD,MAAM9D,EAAOd,EAAIoN,KAAKtM,KACtB,OAAO6E,EAAcyH,KAAKtM,KAAMsM,KAAK5L,KAAM4L,KAAKrC,SAAWjK,IAGnE,KAAK4H,EAAMiE,KAAKjE,OAAS,OAAO0E,KAAKU,IAAIpF,GACzC,IAAIA,EAAMiE,KAAKjE,OACX,OAAI0E,KAAKxI,MACE2F,EAAY6C,KAAKxI,MAAOwI,KAAK5L,KAAMkH,GAGnC/C,EAAcyH,KAAKtM,KAAMsM,KAAK5L,KAAMkH,GAGnD,OACI,MAAMA,EAAMiE,KAAKjE,MACjB,OAAI0E,KAAKjD,SAAWzB,EACT0E,KAAKU,IAAIpF,GAGT,KAGf,QACI,OAAOK,EAAMuF,MAAM,CAAClB,OAExB,YAAYzJ,EAAGhB,GACX,GAAIgB,EAAEnC,MAAQmB,EAAEnB,KACZ,MAAM,IAAI+M,MAAM,eAEpB,MAAMhH,EAAUrG,KAAKsN,IAAI7K,EAAE4D,QAAS5E,EAAE4E,SAItC,OAAO5B,EAHSzE,KAAKuN,IAAI9K,EAAEwG,QAASxH,EAAEwH,SAEf5C,EACIA,GAFT5D,EAAEoH,SAAWpI,EAAEoI,UAAY,GAIjD,mBAAmBP,GACf,GAAIA,GAAUA,EAAO/I,OAAQ,CACzB,MAAMzC,EAAIwL,EAAOkE,OAAO,CAAEF,EAAKxP,IAAMwP,EAAIG,QAAU3P,EAAE2P,QAAUH,EAAMxP,EAAI,CAAE2P,QAASzB,MACpF,GAAIlO,EAAE2P,QAAUzB,IACZ,OAAO,IAAI0B,QAASC,IAChBC,WAAW,KACPD,EAAG7P,IACJA,EAAE2P,WAIjB,OAAO,IAAIC,QAAQC,GAAMA,EAAG,QAGpC9Q,EAAQgL,MAAQA,EAQhB,SAASpD,EAAc7E,EAAMU,EAAMuJ,GAC/B,MAAM9B,EAAU/H,KAAKmM,OAAOtC,EAAWvJ,GAAQV,GAG/C,OAAO,IAAIiI,EAAMvH,EAAMyH,EAAS8B,GAFf9B,EAAU,GAAKnI,EAAOU,GACtByH,EAAU,GAAKnI,EAAOU,GAK3C,SAAS+I,EAAY3F,EAAOpD,EAAMuJ,GAC9B,IAAIgE,EAAUhE,EAAWvJ,EACzB,MAAMwN,EAAapK,EAAMA,EAAMnD,OAAS,GAClCwN,EAAY/N,KAAKmM,MAAM0B,EAAUC,GACnCC,IACAF,GAAWE,EAAYD,GAE3B,IAAI/F,EAAUrE,EAAMnD,OAChByN,EAAU,EACV/E,EAAU3I,EACd,KAAO0N,EAAUjG,GAAS,CACtB,MAAMkG,EAAWD,EAAUjG,IAAa,EACxCkB,EAAUvF,EAAMuK,GACZhF,GAAW4E,EACXG,EAAUC,EAAU,EAGpBlG,EAAUkG,EAGlB,MAAM5H,EAAU/F,GAAQoD,EAAMqE,EAAU,IAAM,GAG9C,OAFAkB,EAAU3I,EAAOoD,EAAMqE,GACvBA,GAAWgG,EAAYrK,EAAMnD,OACtB,IAAIsH,EAAMvH,EAAMyH,EAAS8B,EAAUxD,EAAS4C,EAASvF,GAGhE,SAASsH,EAAQZ,GACb,OAAO,IAAO8D,EAAO9D,GAGzB,SAAS8D,EAAO9D,GACZ,IAAIqD,EAAU,EAmCd,OAlCArD,EAAI+D,QAAQ,2CAA4C,CAACC,EAAMC,EAASC,EAAUC,EAAMC,KACpF,IAAIxL,EAAMyL,OAAOJ,GACjB,IAAKrL,EACD,OAAO,KAEP,MAAQwL,IACRxL,GAAO,IAEXyK,GAAWzK,EAAM,MACb,OAAQuL,GACJ,IAAK,IACL,IAAK,IACD,OAAO,EACX,IAAK,IACL,IAAK,IACD,OAAO,GACX,IAAK,IACL,IAAK,IACD,OAAO,KACX,IAAK,IACL,IAAK,IACD,OAAO,MACX,IAAK,IACL,IAAK,IACD,OAAO,OACX,IAAK,IACL,IAAK,IACD,OAAO,aAEX,QACI,MAAM,IAAIlB,MAAM,GAAGjD,QAAUpH,IAAMuL,OAtB9B,KA0Bdd,EA3EX5Q,EAAQ+M,SALR,SAAkB8E,EAAUC,EAAW,KAAM9E,EAAW4B,KAAKjE,OAGzD,OAAO/C,EAFMuG,EAAQ0D,GACR1D,EAAQ2D,GAAYhD,EACA8C,OAAO5E,KAS5ChN,EAAQ4H,cAAgBA,EA2BxB5H,EAAQwM,YAAcA,EAItBxM,EAAQmO,QAAUA,EAuClBnO,EAAQqR,OAASA,EAejBrR,EAAQ+R,SAdR,SAAkB/O,EAAMgP,EAAY,GAChC,IAAIzE,EAAM,GACV,MAAM0E,EAASjD,EAAOtL,OACtB,IAAK,IAAIqC,EAAK,EAAGA,EAAKkM,IAAUlM,EAAI,CAChC,MAAM2L,EAAO1C,EAAOjJ,GAAIiM,GAClBpF,EAAOoC,EAAOjJ,GAAI,GAClBjC,EAAMX,KAAKmM,MAAMtM,EAAO4J,GAC1B9I,IACAd,GAAc4J,EACdW,GAAO,GAAGzJ,IAAM4N,KAGxB,OAAOnE,GAiBXvN,EAAQkS,0BAdR,SAAmClP,GAC/B,GAAIA,GAAQ0L,GAASA,EAAQ1L,GAAQA,EAAO,GAAKmP,IAC7C,OAAOlD,EAEX,MAAMgD,EAAS7C,EAAU1L,OACzB,IAAK,IAAIqC,EAAK,EAAGA,EAAKkM,IAAUlM,EAAI,CAChC,MAAM9E,EAAImO,EAAUrJ,GAEpB,GAAI/C,EADU/B,EAAE,GAEZ,OAAOA,EAGf,OAAOiO,I,6BCvSXjP,EAAA,QAAiB,IACZ,EADY,MAEZ,EAFY,MAGZ,EAHY,K,6BCAjB,oG,gEAAA,aAAgB,EAAhB,IAEAmS,EAAK,CAAC,MAAD,iDACLC,EAAK,CAAC,KAAD,yCACLC,EAAK,CAAC,IAAD,yBACLC,EAAK,CAAC,KAAD,0BAELC,EAAO,CAAC,QAAD,mEACPC,EAAO,CAAC,MAAD,sDACPC,EAAO,CAAC,KAAD,6BACPC,EAAO,CAAC,OAAD,oCAEPC,EAAK,CAAC,IAAD,wJAGLC,EAAK,CAAC,MAAD,mEAKLC,EAAO,CAAC,KAAD,sNAGPC,EAAO,CAAC,UAAD,sFAKPC,EAAO,CAAC,KAAD,0DAEPC,EAAQ,CAAC,KAAD,oHAKRC,EAAS,CAAC,MAAD,0EAETC,EAAU,CAAC,QAAD,iKAKVC,EAAK,CAAC,IAAD,qCACLC,EAAM,CAAC,IAAD,6CAENC,EAAO,CAAC,MAAD,2DACPC,EAAQ,CAAC,IAAD,iDA9CR,KA+SAC,EAAO,CAAC,SAAD,GAMPC,EAAM,CAAC,WAAD,GAKNC,EAAK,CACH,CAAC,YAAa,aAbhBC,EAAI,CAAC,WAAD,aAeF,CAAC,MAAD,WAjBFC,EAAK,CAAC,GAAD,MAqBLC,EAAK,CACH,CAAC,YAAa,YADX,KAGH,CAAC,SAAD,SACA,CAAC,GAJE,IAOLC,EAAK,CACH,CAAC,UAAD,aADG,KAGH,CAAC,WAAa,EAAG,KACjB,CAAC,GAJE,IAOLC,EAAK,CACH,CAAC,YAAa,aADX,KAGH,CAAC,YAAa,GAAd,MACA,CAAC,GAJE,IAOLC,EAAK,CACH,CAAC,aAAc,aAvCjBC,EAAO,CAAC,WAAD,GAyCL,CAAC,SAAD,QACA,CAAC,GAJE,IAOLC,EAAK,CACH,CAAC,aAAc,aA7CjBC,EAAO,CAAC,WAAD,GA+CL,CAAC,SAAD,SACA,CAAC,GAJE,IAOLC,EAAM,CACJ,CAAC,cAAe,aAnDlBC,EAAO,CAAC,UAAD,GAqDL,CAAC,SAAD,UACA,CAAC,GAJG,IAONC,EAAM,CACJ,CAAC,aAAe,aAzDlBC,EAAO,CAAC,UAAD,GA2DL,CAAC,MAAD,SACA,CAAC,GAJG,IAONC,EAAM,CACJ,CAAC,cAAe,GA5DlBC,EAAM,CAAC,QAAD,GA8DJ,CAAC,UAAD,UACA,CAAC,GAJG,IAONC,EAAM,CACJ,CAAC,aAAD,GADI,KAGJ,CAAC,SAAD,KACA,CAAC,GAJG,IAONC,EAAO,CACL,CAAC,aAAD,GA3EFC,EAAO,CAAC,WAAD,GA6EL,CAAC,SAAD,KACA,CAAC,GAJI,IAOPC,EAAO,CACL,CAAC,YAAD,GADK,KAGL,CAAC,SAAD,KACA,CAAC,GAJI,IAOPC,EAAM,CACJ,CAAC,cAAD,GAvFFC,EAAS,CAAC,WAAD,GAyFP,CAAC,OAAD,KACA,CAAC,GAJG,KA7VNC,EAAK,CACH,CAAC,MADE,aAEH,CAAC,MAFE,aAGH,CAAC,MAHE,aAIH,CAAC,MAJE,aAKH,CAAC,MALE,aAMH,CAAC,MANE,aAOH,CAAC,MAPE,aAQH,CAAC,MARE,aASH,CAAC,MATE,aAUH,CAAC,MAVE,aAWH,CAAC,QAXE,WAYH,CAAC,QAZE,aAaH,CAAC,QAbE,aAcH,CAAC,QAdE,aAeH,CAAC,QAfE,aAgBH,CAAC,MAhBE,aAiBH,CAAC,MAjBE,aAkBH,CAAC,MAlBE,aAmBH,CAAC,MAnBE,aAoBH,CAAC,MApBE,aAqBH,CAAC,MArBE,aAsBH,CAAC,MAtBE,aAuBH,CAAC,MAvBE,aAwBH,CAAC,MAxBE,aAyBH,CAAC,MAzBE,aA0BH,CAAC,MA1BE,aA2BH,CAAC,MA3BE,aA4BH,CAAC,MA5BE,YA6BH,CAAC,MA7BE,YA8BH,CAAC,MA9BE,aA+BH,CAAC,MA/BE,aAgCH,CAAC,MAhCE,aAiCH,CAAC,MAjCE,aAkCH,CAAC,MAlCE,aAmCH,CAAC,MAnCE,aAoCH,CAAC,MApCE,YAqCH,CAAC,MArCE,aAsCH,CAAC,MAtCE,aAuCH,CAAC,MAvCE,aAwCH,CAAC,MAxCE,aAyCH,CAAC,MAzCE,aA0CH,CAAC,MA1CE,aA2CH,CAAC,MA3CE,aA4CH,CAAC,MA5CE,aA6CH,CAAC,MA7CE,aA8CH,CAAC,MA9CE,aA+CH,CAAC,MA/CE,YAgDH,CAAC,MAhDE,aAiDH,CAAC,MAjDE,aAkDH,CAAC,MAlDE,aAmDH,CAAC,MAnDE,YAoDH,CAAC,MApDE,YAqDH,CAAC,MArDE,aAsDH,CAAC,MAtDE,aAuDH,CAAC,MAvDE,WAwDH,CAAC,MAxDE,aAyDH,CAAC,MAzDE,aA0DH,CAAC,MA1DE,aA2DH,CAAC,MA3DE,aA4DH,CAAC,MA5DE,WA6DH,CAAC,MA7DE,aA8DH,CAAC,MA9DE,YA+DH,CAAC,MA/DE,WAgEH,CAAC,MAhEE,aAiEH,CAAC,MAjEE,aAkEH,CAAC,MAlEE,aAmEH,CAAC,MAnEE,aAoEH,CAAC,MApEE,YAqEH,CAAC,MArEE,aAsEH,CAAC,MAtEE,aAuEH,CAAC,MAvEE,WAwEH,CAAC,MAxEE,aAyEH,CAAC,MAzEE,aA0EH,CAAC,MA1EE,aA2EH,CAAC,MA3EE,aA4EH,CAAC,MA5EE,aA6EH,CAAC,MA7EE,aA8EH,CAAC,MA9EE,aA+EH,CAAC,MA/EE,aAgFH,CAAC,MAhFE,aAiFH,CAAC,MAjFE,aAkFH,CAAC,MAlFE,aAmFH,CAAC,MAnFE,aAoFH,CAAC,MApFE,YAqFH,CAAC,MArFE,aAsFH,CAAC,MAtFE,aAuFH,CAAC,MAvFE,aAwFH,CAAC,MAxFE,aAyFH,CAAC,MAzFE,aA0FH,CAAC,MA1FE,aA2FH,CAAC,MA3FE,aA4FH,CAAC,MA5FE,YA6FH,CAAC,MA7FE,aA8FH,CAAC,MA9FE,aA+FH,CAAC,MA/FE,aAgGH,CAAC,MAhGE,aAiGH,CAAC,MAjGE,aAkGH,CAAC,MAlGE,YAmGH,CAAC,MAnGE,aAoGH,CAAC,MApGE,aAqGH,CAAC,MArGE,aAsGH,CAAC,MAtGE,WAuGH,CAAC,MAvGE,aAwGH,CAAC,MAxGE,aAyGH,CAAC,MAzGE,aA0GH,CAAC,MA1GE,aA2GH,CAAC,MA3GE,aA4GH,CAAC,MA5GE,aA6GH,CAAC,MA7GE,aA8GH,CAAC,MA9GE,aA+GH,CAAC,MA/GE,aAgHH,CAAC,MAhHE,aAiHH,CAAC,MAjHE,YAkHH,CAAC,MAlHE,aAmHH,CAAC,MAnHE,YAoHH,CAAC,MApHE,YAqHH,CAAC,MArHE,aAsHH,CAAC,MAtHE,YAuHH,CAAC,MAvHE,aAwHH,CAAC,MAxHE,aAyHH,CAAC,MAzHE,aA0HH,CAAC,MA1HE,YA2HH,CAAC,MA3HE,aA4HH,CAAC,MA5HE,aA6HH,CAAC,MA7HE,aA8HH,CAAC,MA9HE,aA+HH,CAAC,MA/HE,YAgIH,CAAC,MAhIE,aAiIH,CAAC,MAjIE,aAkIH,CAAC,MAlIE,YAmIH,CAAC,MAnIE,aAoIH,CAAC,MApIE,YAqIH,CAAC,MArIE,aAsIH,CAAC,MAtIE,aAuIH,CAAC,MAvIE,aAwIH,CAAC,MAxIE,YAyIH,CAAC,MAzIE,aA0IH,CAAC,MA1IE,aA2IH,CAAC,MA3IE,WA4IH,CAAC,MA5IE,YA6IH,CAAC,MA7IE,aA8IH,CAAC,MA9IE,aA+IH,CAAC,MA/IE,aAgJH,CAAC,MAhJE,aAiJH,CAAC,MAjJE,aAkJH,CAAC,MAlJE,aAmJH,CAAC,MAnJE,aAoJH,CAAC,MApJE,aAqJH,CAAC,MArJE,aAsJH,CAAC,MAtJE,aAuJH,CAAC,MAvJE,YAwJH,CAAC,MAxJE,aAyJH,CAAC,MAzJE,aA0JH,CAAC,MA1JE,aA2JH,CAAC,MA3JE,YA4JH,CAAC,MA5JE,YA6JH,CAAC,MA7JE,aA8JH,CAAC,MA9JE,aA+JH,CAAC,MA/JE,aAgKH,CAAC,MAhKE,YAiKH,CAAC,MAjKE,aAkKH,CAAC,MAlKE,aAmKH,CAAC,MAnKE,aAoKH,CAAC,MApKE,aAqKH,CAAC,MArKE,aAsKH,CAAC,MAtKE,aAuKH,CAAC,MAvKE,aAwKH,CAAC,MAxKE,aAyKH,CAAC,MAzKE,YA0KH,CAAC,MA1KE,YA2KH,CAAC,MA3KE,aA4KH,CAAC,MA5KE,aA6KH,CAAC,MA7KE,aA8KH,CAAC,MA9KE,aA+KH,CAAC,MA/KE,YAgLH,CAAC,MAhLE,aAiLH,CAAC,MAjLE,aAkLH,CAAC,MAlLE,aAmLH,CAAC,MAnLE,aAoLH,CAAC,MApLE,aAqLH,CAAC,MArLE,aAsLH,CAAC,MAtLE,aAuLH,CAAC,MAvLE,aAwLH,CAAC,MAxLE,aAyLH,CAAC,MAzLE,aA0LH,CAAC,MA1LE,aA2LH,CAAC,MA3LE,aA4LH,CAAC,MA5LE,aA6LH,CAAC,MA7LE,aA8LH,CAAC,MA9LE,aA+LH,CAAC,MA/LE,aAgMH,CAAC,MAhME,aAiMH,CAAC,MAjME,aAkMH,CAAC,MAlME,YAmMH,CAAC,MAnME,aAoMH,CAAC,MApME,YAqMH,CAAC,MArME,aAsMH,CAAC,MAtME,aAuMH,CAAC,MAvME,YAwMH,CAAC,MAxME,YAyMH,CAAC,MAzME,aA0MH,CAAC,MA1ME,aA2MH,CAAC,MA3ME,aA4MH,CAAC,MA5ME,YA6MH,CAAC,MA7ME,aA8MH,CAAC,MA9ME,aA+MH,CAAC,MA/ME,aAgNH,CAAC,MAhNE,aAiNH,CAAC,MAjNE,YAkNH,CAAC,MAlNE,aAmNH,CAAC,MAnNE,aAoNH,CAAC,MApNE,aAqNH,CAAC,MArNE,YAsNH,CAAC,MAtNE,WAuNH,CAAC,MAvNE,YAwNH,CAAC,MAxNE,YAyNH,CAAC,MAzNE,WA0NH,CAAC,MA1NE,YA2NH,CAAC,MA3NE,WA4NH,CAAC,MA5NE,YA6NH,CAAC,MA7NE,WA8NH,CAAC,MA9NE,YA+NH,CAAC,MA/NE,YAgOH,CAAC,MAhOE,UAiOH,CAAC,MAjOE,WAkOH,CAAC,MAlOE,YAmOH,CAAC,MAnOE,YAoOH,CAAC,MApOE,YAqOH,CAAC,MArOE,UAsOH,CAAC,MAtOE,WAuOH,CAAC,MAvOE,YAwOH,CAAC,MAxOE,UAyOH,CAAC,MAzOE,WA0OH,CAAC,MA1OE,YA2OH,CAAC,MA3OE,YA4OH,CAAC,MA5OE,YA6OH,CAAC,MA7OE,YA8OH,CAAC,MA9OE,WA+OH,CAAC,MA/OE,WAgPH,CAAC,MAhPE,WAiPH,CAAC,MAjPE,WAkPH,CAAC,MAlPE,YAmPH,CAAC,MAnPE,YAoPH,CAAC,MApPE,YAqPH,CAAC,MArPE,WAsPH,CAAC,MAtPE,YAuPH,CAAC,KAvPE,WAwPH,CAAC,KAxPE,cAoWF,WAEH,IAAOC,EAAM,2WAvZb,Y,QA2aAC,EAAA,UAAsBC,GAAI,IAAID,GAAJ,gCAItB,CAAC,iBAAD,YAJsB,GAKtB,CAAC,EAAG,IALkB,KAMtB,CAAC,GAAI,KAAL,2BANsB,UAStB,CAAA5Q,EAAG,CAAH,IACAF,EAAG,CADH,IAEAxD,EAAG,CAFH,IAGA2B,EAAG,CAHH,IAKAgC,EAAG,CAACqO,EALJ,GAOA1O,EAAG,CAACoO,EAAD,GACH3N,EAAG,CAACsO,EAAD,GAEHrN,EAAG,CAVH,IAWAD,EAAG,CAXH,IAYA5B,EAAG,CAACsP,EAZJ,GAaArP,EAAG,CAACoP,EAAD,KAtBmB,OA0B1B8B,EAAA,OAAmBC,EAAA,eAEf,CAAC,qBAAD,eAAsCA,EAAA,MAFvB,gBAGf,CAHe,GAIf,CAAC,GAAI,KAAL,2BAJe,YAQnBD,EAAA,IAAgBC,EAAA,wCAIZ,CAAC,0BAAD,gBAJY,mBAQZ,CAAAjR,EAAG,CAACqO,EAAJ,GACAjO,EAAG,CAAC0O,EADJ,GAEA5O,EAAG,CAACyO,EAFJ,GAGAjS,EAAG,CAAC,CAAC,GAAF,KAAU,CAAC,GAHd,OAIA2B,EAAG,CAJH,MAKAkC,EAAG,CALH,KAOAI,EAAG,CAACuN,EAAD,GACHjO,EAAG,CAACiO,EAAD,UAAcI,EAAd,aAhBS,OAoBhB0C,EAAA,QAAoBC,EAAA,4BAGhB,CAAC,cAAD,YAA4BA,EAAA,MAHZ,iBAKhB,CAAC,KAAM,GAAP,wBALgB,UAQhB,CAAA7Q,EAAG,CAAH,IACAJ,EAAG,CAAC,WAAD,QATa,OAapBkR,EAAY,CACV,CAAC,aAAe,IAAIxG,KAAK,oBAAoByG,UADnC,KAEV,CAAC,aAAe,IAAIzG,KAAK,oBAAoByG,UAFnC,KAGV,CAAC,MAAD,WAHU,GAOZH,EAAA,KAAiBC,EAAA,wCAKjBD,EAAA,cAA0BC,EAAA,sCAItB,CAAC,cAAD,YAA4BA,EAAA,MAA5B,WACA,CAAC,EAAG,EALkB,UAQtB,CAAA7Q,EAAG,CAAC,MARkB,OAY1B4Q,EAAA,QAAoBC,EAAA,sCAIhB,CAAC,cAAD,YAA4BA,EAAA,MAA5B,YAJgB,KAOhB,CAAA/Q,EAAG,CAAH,IACAE,EAAG,CADH,KAEAK,EAAG,CAAC,OATY,OAapBuQ,EAAA,QAAoBC,EAAA,0BAGhB,CAAC,mBAAoB,eAAgBA,EAAA,MAHrB,eAIhB,CAAC,EAAG,IAJY,KAKhB,CAAC,GAAD,iCALgB,YAQhB,CAAA7Q,EAAG,CAAC,CAAC,MAAD,wDAAD,MAAsE,CAAC,cAAD,uHAAzE,aACAF,EAAG,CADH,IAEAxD,EAAG,CAFH,KAGA2B,EAAG,CAHH,KAKA2B,EAAG,CAAC,MAbY,Q,cCnhBpBjE,EAAOD,QAAUsV,QAAQ","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FancyDate\"] = factory();\n\telse\n\t\troot[\"FancyDate\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","  \n{\n  Tempo\n  to_tempo_by\n  to_tempo_bare\n} = require \"./time\"\n_ = require \"lodash\"\n\nreg_token = /([ABCabcGuYyMdHmsSEQZNDwJ])(o|\\1*)|''|'(''|[^'])+('|$)|./g\ndefault_parse_format  = \"y年M月d日\"\ndefault_format_format = \"Gy年M月d日(E)H時m分s秒\"\n\ncalc_set = (path, o)->\n  for key, val of o\n    @calc[path][key] = val?[path] || val\n\nsub_define = (msec, size)->\n  range = [size]\n  msec = msec / size\n  { range, msec }\n\ndaily_define = (msec, day)->\n  range = [Math.floor(msec / day)]\n  msec = range[0] * day\n  { range, msec }\n\ndaily_measure = (msec, day)->\n  range = [Math.floor(msec / day), Math.ceil(msec / day)]\n  msec = msec\n  { range, msec }\n\n\nclass Indexer\n  constructor: ([list, rubys, ... , zero ])->\n    if list?\n      if list.length\n        @list = list\n        @length = list.length\n      else\n        @length = list\n\n      if rubys?.length == list.length\n        @rubys = rubys\n\n    if zero?\n      unless zero.length\n        @zero = zero\n\nexport class FancyDate\n  constructor: (o)->\n    if o\n      { @dic, @calc } = _.cloneDeep o\n    else\n      @dic = {}\n      @calc =\n        eras: []\n        divs: {}\n        idx:  {}\n        zero: {}\n        msec: {}\n        range: {}\n      do =>\n        G = [\"紀元前\"]\n        A = B = C = D = E = F = H = J = K = M = N = Q = S = Y = Z = []\n        a = b = c = d = f = m = p = s = u = w = x = y = []\n        for key, val of { A,B,C,D,E,F,G,H,J,M,N,Q,S,Y,Z, a,b,c,d,f,m,p,s,u,w,x,y }\n          @dic[key] = new Indexer val\n\n  dup: ->\n    new @constructor @\n\n  planet: (\n    sunny\n    moony\n    earthy\n    geo\n  )->\n    year = daily_measure sunny[0], earthy[0]\n    day = daily_define earthy[0], earthy[0]\n    if moony\n      moon = daily_measure moony[0], earthy[0]\n\n    calc_set.call @, \"range\", { year }\n    calc_set.call @, \"msec\",  { year, moon, day }\n\n    Object.assign @dic, { sunny, moony, earthy, geo }\n    @\n\n  era: ( era, eras = [] )->\n    all_eras = [\"紀元前\", ...eras.map(([s,])=> s)]\n    @dic.G = new Indexer [all_eras]\n    Object.assign @dic, { era, eras }\n    @\n\n  calendar: (start = [\"1970-1-1 0:0:0\",\"y-M-d H:m:s\", 0], leaps = null, month_divs = null )->\n    Object.assign @dic, { month_divs, leaps, start }\n    @is_table_leap = leaps?\n    @is_table_month = month_divs?\n    @\n\n  algo: (o)->\n    for key, val of o\n      @dic[key] = new Indexer val\n\n    # A B C a b c 日の不断、年の不断を構築\n    if o.C?[0]?.length && o.B?[0]?.length\n      @dic.c = new Indexer o.C\n      @dic.b = new Indexer o.B\n      @dic.C.zero = @dic.B.zero = @dic.A.zero\n      @dic.c.zero = @dic.b.zero = @dic.a.zero\n\n    if @dic.C.list && @dic.B.list\n      @dic.A.list = @dic.a.list =\n        for idx in [0...@dic.A.length]\n          c = @dic.C.list[idx % @dic.C.length]\n          b = @dic.B.list[idx % @dic.B.length]\n          \"#{c}#{b}\"\n\n    if @dic.C.rubys && @dic.B.rubys\n      @dic.A.rubys = @dic.a.rubys =\n        for idx in [0...@dic.a.length]\n          c = @dic.C.rubys[idx % @dic.C.length]\n          b = @dic.B.rubys[idx % @dic.B.length]\n          \"#{\"#{c.replace /と$/,\"との\" }#{b}\"}\"\n    @\n\n  daily: (is_solor = false)->\n    @dic.is_solor = is_solor\n    @\n\n  init: ->\n    @def_regex()\n    @def_to_idx()\n    @def_to_label()\n    @def_calc()\n\n    @def_table()\n    @def_idx()\n    @def_zero()\n\n    @def_eras()\n    @\n\n  def_regex: ->\n    A = B = C = E = F = G = H = M = N = Z = a = b = c = f = m = p = s = (list)=>\n      if list\n        if list.join\n          \"(#{ list.join(\"|\") })\"\n        else\n          \"([#{list}])\"\n      else\n        \"(\\\\d+)\"\n    u = => \"([-\\\\d]+)\"\n    D = Q = S = Y = d = w = y = => \"(\\\\d+)\"\n    J = x = => \"([\\\\d.]+)\"\n    for key, f of { A,B,C,D,E,F,G,H,J,M,N,Q,S,Y,Z, a,b,c,d,f,m,p,s,u,w,x,y }\n      @dic[key].regex = f @dic[key].list\n\n  def_to_idx: ->\n    G = (s)-> if ! @list || (idx = @list.indexOf(s)) < 0 then s - 0 else idx\n    H = m = s = (s)-> if ! @list || (idx = @list.indexOf(s)) < 0 then s - 0 else idx\n    A = B = C = E = F = M = N = Z = a = b = c = d = f = (s)-> if ! @list || (idx = @list.indexOf(s)) < 0 then s - 1 else idx\n    D = Q = p = w = (s)-> s - 1\n    J = S = Y = u = x = y = (s)-> s - 0\n    for key, val of { A,B,C,D,E,F,G,H,J,M,N,Q,S,Y,Z, a,b,c,d,f,m,p,s,u,w,x,y }\n      @dic[key].to_idx = val\n\n  def_to_label: ->\n    at = ->\n      if @list\n        s = @list[@now_idx]\n        if s?\n          s\n    num_0 = ( size )-> _.padStart @now_idx    , size, '0'\n    num_1 = ( size )-> _.padStart @now_idx + 1, size, '0'\n    f_0 = ( size )->\n      num = parseInt @now_idx\n      sub = \"#{@now_idx % 1}\"[1...]\n      _.padStart(num, size, '0') + sub\n\n    G = -> @label\n    S = ( size )-> \"#{ @now_idx }\"[1..]\n    M = ( size )-> \"#{ if @is_leap then \"閏\" else \"\" }#{ at.call(@) ? num_1.call(@, size) }\"\n    H = m = s = ( size )-> at.call(@) ? num_0.call @, size\n    A = B = C = E = F = N = Z = a = b = c = d = f = ( size )-> at.call(@) ? num_1.call @, size\n    D = Q = p = w = num_1\n    Y = u = y = num_0\n    J = x = f_0\n    for key, val of { A,B,C,D,E,F,G,H,J,M,N,Q,S,Y,Z, a,b,c,d,f,m,p,s,u,w,x,y }\n      @dic[key].to_label = val\n\n  def_calc: ->\n    season = sub_define    @calc.msec.year, @dic.Z.length\n    month  = daily_measure @calc.msec.year / @dic.M.length, @calc.msec.day\n    week   = daily_define  @dic.E.length * @calc.msec.day, @calc.msec.day\n\n    hour   = sub_define    @calc.msec.day, @dic.H.length\n    minute = sub_define      hour.msec, @dic.m.length\n    second = sub_define    minute.msec, @dic.s.length\n    msec   = sub_define    second.msec, second.msec\n    calc_set.call @, \"range\", { season, month, week, hour, minute, second, msec }\n    calc_set.call @, \"msec\",  { season, month, week, hour, minute, second, msec }\n\n  def_eras: ->\n    zero = @calc.zero.era\n    list =\n      for [ title, msec ], idx in @dic.eras\n        { u } = @to_tempos msec\n        @calc.eras.push [ title, msec, u.now_idx ]\n        msec - zero\n    list.push Infinity\n    @table.msec.era = list\n\n  def_table_by_leap_day: ->\n    day = @calc.msec.day\n    upto = (src)->\n      msec = 0\n      for i in src\n        msec += i * day\n\n    [...leaps, period] = @dic.leaps\n\n    range =\n      year:\n        for idx in [0...period]\n          is_leap = 0\n          for div, mode in leaps\n            continue if idx % div\n            is_leap = ! mode % 2\n          @calc.range.year[is_leap]\n    range.year[0] = @calc.range.year[1]\n    years = @calc.range.year\n\n    { month_divs } = @dic\n    unless month_divs\n      month_divs =\n        for str, idx in @dic.M\n          @calc.range.month[1 - idx % 2]\n      month_divs[1] = null\n    month_sum = 0\n    for i in month_divs\n      month_sum += i\n\n    range.month = {}\n    for size in years\n      a = Array.from month_divs\n      idx = month_divs.indexOf null\n      a[idx] = size - month_sum\n      range.month[size] = a\n\n    year = upto range.year\n    period = year[year.length - 1]\n    period = daily_define period, day\n    calc_set.call @, \"msec\", { period }\n\n    month = {}\n    for size in years\n      year_size = Math.floor day * size\n      month[year_size] = upto range.month[size]\n\n    @table = { range, msec: { year, month } }\n\n  def_table_by_leap_month: ->\n    day = @calc.msec.day\n    upto = (src)->\n      msec = 0\n      for i in src\n        msec += i * day\n\n    years = @calc.range.year\n\n    { month_divs } = @dic\n    month_sum = 0\n    for i in month_divs\n      month_sum += i\n\n    range =\n      month: {}\n    for size in years\n      a = Array.from month_divs\n      idx = month_divs.indexOf null\n      a[idx] = size - month_sum\n      range.month[size] = a\n\n    month = {}\n    for size in years\n      year_size = Math.floor day * size\n      month[year_size] = upto range.month[size]\n\n    @table = { range, msec: { month } }\n\n  def_table: ->\n    if @is_table_leap\n      @def_table_by_leap_day()\n    else\n      if @is_table_month\n        @def_table_by_leap_month()\n      else\n        @table = { range: {}, msec: {} }\n\n  def_idx: ->\n    if @is_table_leap\n      [..., period] = @dic.leaps\n      @calc.divs.period = period\n\n    o = @index ...@dic.start\n    o.Z = @dic.Z.length * 1 / 8\n    year = (period || 0) * o.p + o.y\n    year_s = year - o.f\n    year10 = year - o.c\n    year12 = year - o.b\n    year60 = year - o.a\n    Object.assign @calc.zero, { year10, year12, year60, year_s }\n    Object.assign @calc.idx, o\n\n\n  def_zero: ->\n    zero_size = (idx_path, path)=>\n      0 - @calc.idx[idx_path] * @calc.msec[path]\n\n    timezone = @calc.msec.day * (@dic.geo[2] || @dic.geo[1]) / 360\n    @dic.x.tempo = \n      x = to_tempo_bare @calc.msec.hour / 4, -@calc.msec.hour / 8, timezone\n    x.now_idx /= 4\n\n    start_at = @dic.start[2]\n    zero   = start_at - x.center_at\n\n    second = zero   + zero_size \"s\", \"second\"\n    minute = second + zero_size \"m\", \"minute\"\n    hour   = minute + zero_size \"H\", \"hour\"\n    day    = hour   + zero_size \"d\", \"day\"\n\n    if @is_table_leap\n      year_size = Math.floor @calc.msec.day * @table.range.year[ @calc.idx.y %% @calc.divs.period ]\n      month  = day   - (@table.msec.month[year_size][ @calc.idx.M - 1 ] || 0)\n      year   = month - (@table.msec.year[             @calc.idx.y - 1 ] || 0)\n      period = year  + zero_size \"p\", \"period\"\n\n    else\n      if @is_table_month\n        month = day   - (Object.values(@table.msec.month)[0][ @calc.idx.M - 1 ] || 0)\n        year  = month + zero_size \"y\", \"year\"\n      else\n        month = day   + zero_size \"M\", \"moon\"\n        year  = month + zero_size \"y\", \"year\"\n\n    # 単純のため平気法。\n    season = @dic.sunny[1] + zero_size \"Z\", \"season\" # 立春点\n    { last_at } = to_tempo_bare @calc.msec.year, season, period || year\n    season = last_at\n\n    # 元号\n    era = @dic.eras[0]?[1] || Infinity\n    @calc.eras = []\n    if @is_table_leap\n      if period < era\n        era = period + @table.msec.year[0]\n        @calc.eras = [[@dic.era, era, 1]]\n    else\n      if season < era\n        era = season + @calc.msec.year\n        @calc.eras = [[@dic.era, era, 1]]\n\n    if @dic.moony\n      moon = 0 - @dic.moony[1]\n\n    # JD\n    day_utc = day + x.center_at\n    cjd = to_tempo_bare(@calc.msec.day, day,     -210866803200000).center_at\n    jd  = to_tempo_bare(@calc.msec.day, day_utc, -210866803200000).center_at # -2440587.5 * 86400000\n    ld  = to_tempo_bare(@calc.msec.day, day_utc,  -12219379200000).last_at   #  -141428   * 86400000\n    mjd = to_tempo_bare(@calc.msec.day, day_utc,   -3506716800000).last_at   #   -40587   * 86400000\n\n    # 干支、九星、週\n    day_s = day + zero_size(\"F\", \"day\")\n    week  = day + zero_size(\"E\", \"day\")\n    day10 = day + zero_size(\"C\", \"day\")\n    day12 = day + zero_size(\"B\", \"day\")\n    day60 = day + zero_size(\"A\", \"day\")\n    Object.assign @calc.zero, { period, era, week, season, moon, day, jd,ld,mjd,cjd, day10, day12, day60, day_s }\n\n  bless: (o)->\n    for key, val of o when val && @dic[key]\n      val.list     = @dic[key].list\n      val.to_label = @dic[key].to_label\n    o\n\n  precision: ->\n    is_just = (x, n)-> n == Math.floor( n / x ) * x\n    gaps = [( @calc.msec.year / @calc.msec.day ) - @calc.range.year[0]]\n    if @dic.leaps\n      for v, idx in @dic.leaps\n        gap = gaps[gaps.length - 1]\n        if idx & 1\n          gap += 1 / v\n        else\n          gap -= 1 / v\n        gaps.push gap\n    year: [[@dic.M.length], @calc.range.month ]\n    day: [ @calc.range.hour, @calc.range.minute, @calc.range.second ]\n    leap: gaps.map (i)=> parseInt 1 / i\n    is_legal_solor: is_just( 4, @dic.H.length )\n    is_legal_eto: is_just( @dic.c.length, @dic.a.length ) && is_just( @dic.b.length, @dic.a.length )\n    is_legal_ETO: is_just( @dic.C.length, @dic.A.length ) && is_just( @dic.B.length, @dic.A.length )\n\n###\nhttp://bakamoto.sakura.ne.jp/buturi/2hinode.pdf\nベクトルで\na1 = e1 * cos(lat/360) + e3 * sin(lat/360)\na2 = e3 * cos(lat/360) - e1 * sin(lat/360)\nT = (赤緯, 時角)->\n  a1 * sin(赤緯) + cos(赤緯) * (a2 * cos(時角) - e2 * sin(時角))\nT = ( lat, 赤緯, 時角 )->\n  e1 * ( cos(lat/360) * sin(赤緯) - sin(lat/360) * cos(赤緯) * cos(時角) ) +\n  e2 * (-cos(赤緯) * sin(時角)) +\n  e3 * ( sin(lat/360) * sin(赤緯) + cos(lat/360) * cos(赤緯) * cos(時角) )\n\nK   = @dic.earthy[2] / 360\n高度 = -50/60\n時角 = ( lat, 高度, 赤緯 )->\n  acos(( sin(高度) - sin(lat/360) * sin(赤緯) ) / cos(lat/360) * cos(赤緯) )\n方向 = ( lat, 高度, 赤緯, 時角 )->\n  acos(( cos(lat/360) * sin(赤緯) - sin(lat/360) * cos(赤緯) * cos(時角) ) / cos(高度) )\n季節 = 春分点からの移動角度\n赤緯 = asin( sin(K) * sin(季節) )\n赤経 = atan( tan(季節) * cos(K) )\n南中時刻 = ->\n  正午 + 時角 + ( 赤経 - 季節 ) + 平均値 + timezone\n日の出 = ->\n  南中時刻 - 時角\n日の入 = ->\n  南中時刻 + 時角\n###\n\n  noon: ( utc, { last_at, center_at } = to_tempo_bare @calc.msec.day, @calc.zero.day, utc )->\n    { sin, PI } = Math\n    deg_to_day  = @calc.msec.day / 360\n    year_to_rad = 2 * PI / @calc.msec.year\n\n    T0  = to_tempo_bare @calc.msec.year, @calc.zero.season, utc\n\n    # 南中差分の計算がテキトウになってしまった。あとで検討。\n    南中差分A = deg_to_day * 2.0 * sin( year_to_rad * T0.since )\n    南中差分B = deg_to_day * 2.5 * sin( year_to_rad * T0.since * 2 + PI * 0.4 )\n    南中差分 = 南中差分A + 南中差分B\n\n    南中時刻 = center_at + 南中差分\n    真夜中 = last_at + 南中差分\n\n    T1 = to_tempo_bare @calc.msec.year, @dic.sunny[1], 南中時刻\n    季節 = T1.since * year_to_rad\n\n    { T0, T1, 季節, 南中差分, 南中時刻, 真夜中 }\n\n  solor: ( utc, idx = 2, { 季節, 南中時刻, 真夜中 } = @noon utc )->\n    days = [\n        6      # golden hour end         / golden hour\n      -18 / 60 # sunrise bottom edge end / sunset bottom edge start\n      -50 / 60 # sunrise top edge start  / sunset top edge end\n       -6      # dawn                    / dusk\n       -7.36   # 寛政暦 太陽の伏角が7°21′40″\n      -12      # nautical dawn           / nautical dusk\n      -18      # night end               / night\n    ]\n    { asin, acos, atan, sin, cos, tan, PI } = Math\n    deg_to_rad  = 2 * PI / 360\n    rad_to_day  = @calc.msec.day / ( 2 * PI )\n\n    高度 = days[idx]      * deg_to_rad\n    K   = @dic.earthy[2] * deg_to_rad\n    lat = @dic.geo[0]    * deg_to_rad\n\n    赤緯 = asin( sin(K) * sin(季節) )\n    赤経 = atan( tan(季節) * cos(K) )\n    時角 = acos(( sin(高度) - sin(lat) * sin(赤緯) ) / (cos(lat) * cos(赤緯)) )\n    方向 = acos(( cos(lat) * sin(赤緯) - sin(lat) * cos(赤緯) * cos(時角) ) / cos(高度) )\n\n    日の出 = Math.floor 南中時刻 - 時角 * rad_to_day\n    日の入 = Math.floor 南中時刻 + 時角 * rad_to_day\n\n    { K,lat\n      時角,方向, 高度\n      真夜中, 日の出, 南中時刻, 日の入\n    }\n\n  雑節: (utc, { Zz, u, d } = @to_tempos(utc))->\n    d0 = d.dup Zz.zero\n    [                   立春, 入梅,\n      春分, 半夏生, 夏土用, 立夏,\n      夏至,       秋土用, 立秋,\n      秋分,       冬土用, 立冬,\n      冬至,       春土用, 立春2\n    ] = [                  1/8, 80/360,\n      2/8, 100/360, 13/40, 3/8,\n      4/8,          23/40, 5/8,\n      6/8,          33/40, 7/8,\n      8/8,          43/40, 9/8\n    ].map (n)=>\n      now = Zz.last_at + ( n - 1/8 ) * Zz.size\n      to_tempo_bare d.size, d0.last_at, now\n      \n    [ 八十八夜, 二百十日, 二百二十日 ] = [88, 210, 220].map (n)=> 立春.succ(n - 1)\n\n    [春彼岸, 秋彼岸] = [春分, 秋分].map (dd)=>\n      Tempo.join dd.back(3), dd.succ(3)\n    [春社日, 秋社日] = [春分, 秋分].map (dd)=>\n      C = to_tempo_bare @calc.msec.day, @calc.zero.day10, dd.write_at\n      C.now_idx %%= @dic.C.length\n      C.slide ( @dic.C.length / 2 ) - C.now_idx - 1\n  \n    春 = Tempo.join 立春,夏土用.back()\n    夏節分 = 立夏.back()\n    夏 = Tempo.join 立夏,秋土用.back()\n    秋節分 = 立秋.back()\n    秋 = Tempo.join 立秋,冬土用.back()\n    冬節分 = 立冬.back()\n    冬 = Tempo.join 立冬,春土用.back()\n    春節分 = 立春2.back()\n    節分 = 春節分\n\n    夏土用 = Tempo.join 夏土用,夏節分\n    秋土用 = Tempo.join 秋土用,秋節分\n    冬土用 = Tempo.join 冬土用,冬節分\n    春土用 = Tempo.join 春土用,立春2\n\n    {\n      立春, 立夏, 立秋, 立冬\n      冬至, 春分, 夏至, 秋分\n      入梅, 半夏生\n      春, 夏, 秋, 冬\n      春社日, 秋社日\n      春土用, 夏土用, 秋土用, 冬土用\n      春節分, 夏節分, 秋節分, 冬節分, 節分\n      春彼岸, 秋彼岸\n      八十八夜, 二百十日, 二百二十日\n    }\n\n  to_tempo_by_solor: (utc, day)->\n    { 日の出, 南中時刻, 日の入 } = @solor utc, 4, @noon utc, day\n    size = @dic.H.length / 4\n\n    list = []\n    next_at = 0\n    msec = ( 日の出 - day.last_at ) / size\n    for idx in [0        ... 1 * size]\n      next_at += msec\n      list.push Math.floor next_at\n\n    next_at = 日の出 - day.last_at\n    msec = ( 日の入 - 日の出 ) / ( 2 * size )\n    for idx in [1 * size ... 3 * size]\n      next_at += msec\n      list.push Math.floor next_at\n\n    next_at = day.size\n    msec = ( day.next_at - 日の入 ) / size\n\n    tails = []\n    for idx in [3 * size ... 4 * size]\n      tails.push Math.ceil next_at\n      next_at -= msec\n    list.push ...tails.reverse()\n    to_tempo_by list, day.last_at, utc\n\n  note: (utc, tempos = @to_tempos(utc), o = @雑節(utc, tempos))->\n    for k, t of o when t.is_cover tempos.d.center_at\n      k.match(/.(彼岸|社日|節分|土用)|(.+)/)[1...].join(\"\")\n\n  to_tempos: (utc)->\n    drill_down = (base, path, at = utc)=>\n      data = @table.msec[path]\n      table = data?[base.size] || data\n      if table\n        o = to_tempo_by table, base.last_at, at\n      else\n        b_size = @calc.msec[path]\n        o = to_tempo_bare b_size, base.last_at, at\n        o.length = base.size / o.size\n      o.path = path\n      o\n\n    to_tempo = (path, write_at = utc)=>\n      to_tempo_bare @calc.msec[path], @calc.zero[path], write_at\n\n    to_tempo_floor = (o, sub)=>\n      o.floor @calc.msec[sub], @calc.zero[sub]\n\n    J = to_tempo_bare @calc.msec.day, @calc.zero.jd, utc # ユリウス日\n\n    # season in year_of_planet\n    Zz = to_tempo_bare @calc.msec.year, @calc.zero.season, utc # 太陽年\n    Z  = drill_down Zz, \"season\" # 太陽年の二十四節気\n\n    # 正月中気と正月\n    N0_p = Zz.last_at + @calc.msec.season\n    N0 = to_tempo \"moon\", N0_p\n    N0 = to_tempo_floor N0, \"day\"\n\n    # 今月と中気\n    Nn = to_tempo \"moon\"\n    Nn = to_tempo_floor Nn, \"day\"\n    N  = drill_down Nn, 'day'\n\n    Zs = drill_down Zz, \"season\", Nn.last_at\n    unless Nn.is_cover Zs.moderate_at\n      Zs = drill_down Zz, \"season\", Nn.next_at\n      unless Nn.is_cover Zs.moderate_at\n        Nn.is_leap = true\n\n    switch Zs.now_idx >> 1\n      when -1\n        # 太陽年初に0月が出てしまう。昨年末にする。\n        Zu = Zz.dup Zs.last_at\n      when @dic.Z.length >> 1\n        # 太陽年末に13月が出てしまう。年初にする。\n        Zu = Zz.dup Zs.next_at\n      else\n        Zu = Zz\n    Nn.now_idx = ( Zs.now_idx %% @dic.Z.length ) >> 1\n\n    if @is_table_leap\n      p = to_tempo 'period'\n      u = drill_down p, \"year\"\n      u.now_idx += p.now_idx * @calc.divs.period\n      M = drill_down u, \"month\"\n      d = drill_down M, \"day\"\n    else\n      if @is_table_month\n        u = to_tempo_floor Zz, \"day\"\n        M = drill_down u, \"month\"\n        d = drill_down M, \"day\"\n      else\n        u = Zu\n        M = Nn\n        d = N.dup utc\n\n    # hour minute second  in day\n    if @dic.is_solor\n      H = @to_tempo_by_solor utc, d\n      size = H.size / @dic.m.length\n      m = to_tempo_bare size, H.last_at, utc\n    else\n      H = drill_down d, \"hour\"\n      m = drill_down H, \"minute\"\n    s = drill_down m, \"second\"\n    S = drill_down s, \"msec\"\n\n    G = {}\n    if @table.msec.era?\n      era_base = to_tempo_by @table.msec.era, @calc.zero.era, utc\n      era = @calc.eras[era_base.now_idx]\n      if era?[0]\n        u.now_idx += 1 - era[2]\n        G.label = era[0]\n\n    y = Object.assign {}, u\n    if y.now_idx < 1\n      G.label = \"紀元前\"\n      y.now_idx = 1 - y.now_idx\n    x = @dic.x.tempo\n\n\n    # 年初来番号\n    w0 = to_tempo 'week', u.last_at\n    w = drill_down w0, \"week\"\n    D = drill_down u, \"day\"\n\n    Y =\n      now_idx: u.now_idx\n    if u.next_at < w.next_at\n      # 年末最終週は、翌年初週\n      Y.now_idx += 1\n      w.now_idx  = 0\n\n  \n    # 年不断\n    a = now_idx: ( u.now_idx - @calc.zero.year60 ) %% @dic.a.length\n    b = now_idx: ( u.now_idx - @calc.zero.year12 ) %% @dic.b.length\n    c = now_idx: ( u.now_idx - @calc.zero.year10 ) %% @dic.c.length\n    f = now_idx: ( u.now_idx - @calc.zero.year_s ) %% @dic.f.length\n\n    # 月不断\n    Q = now_idx: Math.floor 4 * M.now_idx / @dic.M.length\n\n    # 日不断\n    A = to_tempo_bare @calc.msec.day, @calc.zero.day60, utc\n    B = to_tempo_bare @calc.msec.day, @calc.zero.day12, utc\n    C = to_tempo_bare @calc.msec.day, @calc.zero.day10, utc\n    E = to_tempo_bare @calc.msec.day, @calc.zero.week,  utc\n    F = to_tempo_bare @calc.msec.day, @calc.zero.day_s, utc\n\n    A.now_idx %%= @dic.A.length\n    B.now_idx %%= @dic.B.length\n    C.now_idx %%= @dic.C.length\n    F.now_idx %%= @dic.F.length\n    if @is_table_leap # 旧暦では、週は月初にリセットする。\n      E.now_idx %%= @dic.E.length\n    else\n      E.now_idx = ( M.now_idx + d.now_idx ) %% @dic.E.length\n\n    @bless { Zz, A,B,C,D,E,F,G,H,J,M,N,Q,S,Y,Z, a,b,c,d,f,m,p,s,u,w,x,y }\n\n  index: (tgt, str = default_parse_format)->\n    data = null\n    do =>\n      A = B = C = D = E = F = G = H = J = M = N = Q = S = Y = Z = a = b = c = d = f = m = p = s = u = w = x = y = 0\n      data = { A,B,C,D,E,F,G,H,J,M,N,Q,S,Y,Z, a,b,c,d,f,m,p,s,u,w,x,y }\n\n    tokens = str.match reg_token\n    reg = @regex tokens\n\n    items = tgt.match(reg)[1..]\n    for s, p in items\n      token = tokens[p][0]\n      if dic = @dic[token]\n        val = dic.to_idx s\n        data[token] = val\n        switch token\n          when 'a'\n            [,c,b] = s.match @regex ['c','b']\n            data.c = @dic.c.to_idx c\n            data.b = @dic.b.to_idx b\n          when 'A'\n            [,C,B] = s.match @regex ['C','B']\n            data.C = @dic.C.to_idx C\n            data.B = @dic.B.to_idx B\n\n    if @is_table_leap\n      data.p = Math.floor( data.y / @calc.divs.period )\n      data.y = data.y - data.p * @calc.divs.period\n    data\n\n  regex: (tokens)->\n    reg = \"^\" + tokens.map (token)=>\n      if val = @dic[token[0]]\n        val.regex\n      else\n        \"(#{token.replace(/([\\\\\\[\\]().*?])/g,\"\\\\$1\")})\"\n    .join(\"\")\n    new RegExp reg\n\n  to_table: (utc, bk, ik, has_notes = false)->\n    o = @to_tempos utc\n\n    if has_notes\n      雑節 = @雑節 utc, o\n      for a in o[bk].to_list o[ik]\n        a.notes =\n          for k, t of 雑節 when t.is_hit a\n            k.match(/.(彼岸|社日|節分|土用)|(.+)/)[1...].filter(s => s)\n    else\n      o[bk].to_list o[ik]\n\n  yeary_table:   (utc)-> @to_table utc, 'y', 'M', true\n  monthry_table: (utc)-> @to_table utc, 'M', 'd', true\n  weekly_table:  (utc)-> @to_table utc, 'w', 'd', true\n  time_table:    (utc)-> @to_table utc, 'd', 'H'\n\n  parse: (tgt, str = default_parse_format)->\n    { G, p,y,M,d,H,m,s,S, J } = @index tgt, str\n    unless @calc.eras[G]\n      console.error tgt, str\n    y += @calc.eras[G][2] - 1\n    if J\n      return @calc.zero.jd + J * @calc.msec.day \n\n    ( d * @calc.msec.day ) +\n    ( H * @calc.msec.hour ) +\n    ( m * @calc.msec.minute ) +\n    ( s * @calc.msec.second ) +\n    ( S ) +\n    if @is_table_leap\n      year_size = Math.floor @calc.msec.day * @table.range.year[y]\n\n      @calc.zero.period +\n      ( p * @calc.msec.period ) +\n      ( @table.msec.year[y - 1] || 0 ) +\n      ( @table.msec.month[year_size][M - 1] || 0 )\n    else\n      @calc.zero.season +\n      ( y * @calc.msec.year) +\n      ( M * @calc.msec.month )\n\n  format_by: ( tempos, str = default_format_format )->\n    str.match reg_token\n    .map (token)=>\n      val = tempos[token[0]]\n      if val?.to_label?\n        val.to_label token.length\n      else\n        token\n    .join(\"\")\n\n  format: ( utc, str )->\n    @format_by @to_tempos(utc), str\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SECOND = to_msec(\"1s\");\nconst MINUTE = to_msec(\"1m\");\nconst HOUR = to_msec(\"1h\");\nconst DAY = to_msec(\"1d\");\nconst WEEK = to_msec(\"1w\");\nconst MONTH = to_msec(\"30d\");\nconst YEAR = to_msec(\"1y\");\nconst INTERVAL = 0x7fffffff; // 31bits.\nconst VALID = 0xfffffffffffff; // 52bits.\nconst has_window = \"undefined\" !== typeof window && window !== null;\nconst timezone = has_window ? (MINUTE * new Date().getTimezoneOffset()) : to_msec(\"-9h\");\nconst tempo_zero = (-new Date(0).getDay()) * DAY + timezone;\nconst TIMERS = [\n    [\"年\", \"y\", YEAR],\n    [\"週\", \"w\", WEEK],\n    [\"日\", \"d\", DAY],\n    [\"時\", \"h\", HOUR],\n    [\"分\", \"m\", MINUTE],\n    [\"秒\", \"s\", SECOND],\n];\nconst DISTANCE_NAN = [-VALID, INTERVAL, YEAR, \"？？？\"];\nconst DISTANCE_LONG_AGO = [Infinity, INTERVAL, VALID, \"昔\"];\nconst DISTANCES = [\n    DISTANCE_NAN,\n    [-YEAR, INTERVAL, YEAR, \"%s年後\"],\n    [-MONTH, INTERVAL, MONTH, \"%sヶ月後\"],\n    [-WEEK, WEEK, WEEK, \"%s週間後\"],\n    [-DAY, DAY, DAY, \"%s日後\"],\n    [-HOUR, HOUR, HOUR, \"%s時間後\"],\n    [-MINUTE, MINUTE, MINUTE, \"%s分後\"],\n    [-25000, SECOND, SECOND, \"%s秒後\"],\n    [25000, 25000, 25000, \"今\"],\n    [MINUTE, SECOND, SECOND, \"%s秒前\"],\n    [HOUR, MINUTE, MINUTE, \"%s分前\"],\n    [DAY, HOUR, HOUR, \"%s時間前\"],\n    [WEEK, DAY, DAY, \"%s日前\"],\n    [MONTH, WEEK, WEEK, \"%s週間前\"],\n    [YEAR, INTERVAL, MONTH, \"%sヶ月前\"],\n    [VALID, INTERVAL, YEAR, \"%s年前\"],\n    DISTANCE_LONG_AGO,\n];\nclass Tempo {\n    constructor(zero, now_idx, write_at, last_at, next_at, table = null) {\n        if (table) {\n            this.table = table;\n        }\n        this.zero = zero;\n        this.write_at = write_at;\n        this.now_idx = now_idx;\n        this.last_at = last_at;\n        this.next_at = next_at;\n    }\n    get size() { return this.next_at - this.last_at; }\n    get since() { return this.write_at - this.last_at; }\n    get remain() { return this.next_at - this.write_at; }\n    get timeout() { return this.next_at - this.write_at; }\n    get center_at() { return (this.next_at + this.last_at) / 2; }\n    get moderate_at() {\n        if (this.now_idx & 1) {\n            return this.last_at;\n        }\n        else {\n            return this.next_at;\n        }\n    }\n    get deg() {\n        return `${Math.floor(360 * this.since / this.size)}deg`;\n    }\n    ceil(sub1, sub2, subf = to_tempo_bare) {\n        let { last_at, write_at, next_at, now_idx, size, zero } = this;\n        const do2 = subf(sub1, sub2, last_at);\n        if (write_at < do2.next_at) {\n            const do3 = subf(sub1, sub2, last_at - size);\n            next_at = do2.next_at;\n            last_at = do3.next_at;\n            now_idx--;\n        }\n        else {\n            const do1 = subf(sub1, sub2, next_at);\n            next_at = do1.next_at;\n            last_at = do2.next_at;\n        }\n        return new Tempo(zero, now_idx, write_at, last_at, next_at);\n    }\n    floor(sub1, sub2, subf = to_tempo_bare) {\n        let { last_at, write_at, next_at, now_idx, size, zero } = this;\n        const do2 = subf(sub1, sub2, next_at);\n        if (do2.last_at <= write_at) {\n            const do3 = subf(sub1, sub2, next_at + size);\n            last_at = do2.last_at;\n            next_at = do3.last_at;\n            now_idx++;\n        }\n        else {\n            const do1 = subf(sub1, sub2, last_at);\n            last_at = do1.last_at;\n            next_at = do2.last_at;\n        }\n        return new Tempo(zero, now_idx, write_at, last_at, next_at);\n    }\n    is_cover(at) { return this.last_at <= at && at < this.next_at; }\n    is_hit(that) { return (this.last_at <= that.next_at && that.last_at < this.next_at); }\n    to_list(step) {\n        const a = step.dup(this.last_at);\n        const b = step.dup(this.next_at - 1);\n        return a.upto(b);\n    }\n    upto(limit) {\n        let p = this;\n        const ary = [];\n        while (p.last_at < limit.last_at) {\n            ary.push(p);\n            p = p.succ();\n        }\n        return ary;\n    }\n    succ(n = 1) { return this.slide(+n); }\n    back(n = 1) { return this.slide(-n); }\n    slide(n) {\n        if (this.table) {\n            const now_idx = this.now_idx + n;\n            const idx = now_idx % this.table.length;\n            const new_table_idx = Math.floor(now_idx / this.table.length);\n            const now_table_idx = Math.floor(this.now_idx / this.table.length);\n            const table_idx_diff = new_table_idx - now_table_idx;\n            const table_diff = table_idx_diff ? this.table[this.table.length - 1] * table_idx_diff : 0;\n            const last_at = this.zero + table_diff + (this.table[idx - 1] || 0);\n            const next_at = this.zero + table_diff + this.table[idx];\n            const write_at = last_at + this.since;\n            return new Tempo(this.zero, now_idx, write_at, last_at, next_at, this.table);\n        }\n        else {\n            const size = n * this.size;\n            return to_tempo_bare(this.size, this.zero, this.write_at + size);\n        }\n    }\n    copy(now = Date.now()) { return this.dup(now); }\n    dup(now = Date.now()) {\n        if (this.table) {\n            return to_tempo_by(this.table, this.zero, now);\n        }\n        else {\n            return to_tempo_bare(this.size, this.zero, now);\n        }\n    }\n    tick() {\n        const now = Date.now();\n        if (this.next_at <= now) {\n            return this.dup(now);\n        }\n        else {\n            return null;\n        }\n    }\n    sleep() {\n        return Tempo.sleep([this]);\n    }\n    static join(a, b) {\n        if (a.zero != b.zero) {\n            throw new Error(\"can't join.\");\n        }\n        const last_at = Math.min(a.last_at, b.last_at);\n        const next_at = Math.max(a.next_at, b.next_at);\n        const write_at = (a.write_at + b.write_at) / 2;\n        const size = next_at - last_at;\n        return to_tempo_bare(size, last_at, write_at);\n    }\n    static async sleep(tempos) {\n        if (tempos && tempos.length) {\n            const o = tempos.reduce(((min, o) => min.timeout < o.timeout ? min : o), { timeout: Infinity });\n            if (o.timeout < Infinity) {\n                return new Promise((ok) => {\n                    setTimeout(() => {\n                        ok(o);\n                    }, o.timeout);\n                });\n            }\n        }\n        return new Promise(ok => ok(null));\n    }\n}\nexports.Tempo = Tempo;\nconst modulo = (a, b) => (+a % (b = +b) + b) % b;\nfunction to_tempo(size_str, zero_str = \"0s\", write_at = Date.now()) {\n    const size = to_msec(size_str);\n    const zero = to_msec(zero_str) + tempo_zero;\n    return to_tempo_bare(size, zero, Number(write_at));\n}\nexports.to_tempo = to_tempo;\nfunction to_tempo_bare(size, zero, write_at) {\n    const now_idx = Math.floor((write_at - zero) / size);\n    const last_at = (now_idx + 0) * size + zero;\n    const next_at = (now_idx + 1) * size + zero;\n    return new Tempo(zero, now_idx, write_at, last_at, next_at);\n}\nexports.to_tempo_bare = to_tempo_bare;\n// バイナリサーチ 高速化はするが、微差なので複雑さのせいで逆に遅いかも？\nfunction to_tempo_by(table, zero, write_at) {\n    let scan_at = write_at - zero;\n    const table_size = table[table.length - 1];\n    const table_idx = Math.floor(scan_at / table_size);\n    if (table_idx) {\n        scan_at -= table_idx * table_size;\n    }\n    let now_idx = table.length;\n    let top_idx = 0;\n    let next_at = zero;\n    while (top_idx < now_idx) {\n        const mid_idx = (top_idx + now_idx) >>> 1;\n        next_at = table[mid_idx];\n        if (next_at <= scan_at) {\n            top_idx = mid_idx + 1;\n        }\n        else {\n            now_idx = mid_idx;\n        }\n    }\n    const last_at = zero + (table[now_idx - 1] || 0);\n    next_at = zero + table[now_idx];\n    now_idx += table_idx * table.length;\n    return new Tempo(zero, now_idx, write_at, last_at, next_at, table);\n}\nexports.to_tempo_by = to_tempo_by;\nfunction to_msec(str) {\n    return 1000 * to_sec(str);\n}\nexports.to_msec = to_msec;\nfunction to_sec(str) {\n    let timeout = 0;\n    str.replace(/(\\d+)([ヵ]?([smhdwy秒分時日週月年])[間]?(半$)?)|0/g, (full, num_str, fullunit, unit, appendix) => {\n        let num = Number(num_str);\n        if (!num) {\n            return null;\n        }\n        if ('半' === appendix) {\n            num += 0.5;\n        }\n        timeout += num * (() => {\n            switch (unit) {\n                case \"s\":\n                case \"秒\":\n                    return 1;\n                case \"m\":\n                case \"分\":\n                    return 60;\n                case \"h\":\n                case \"時\":\n                    return 3600;\n                case \"d\":\n                case \"日\":\n                    return 3600 * 24;\n                case \"w\":\n                case \"週\":\n                    return 3600 * 24 * 7;\n                case \"y\":\n                case \"年\":\n                    return 31556925.147;\n                // 2019 average.\n                default:\n                    throw new Error(`${str} at ${num}${unit}`);\n            }\n        })();\n    });\n    return timeout;\n}\nexports.to_sec = to_sec;\nfunction to_timer(msec, unit_mode = 1) {\n    let str = \"\";\n    const _limit = TIMERS.length;\n    for (let at = 0; at < _limit; ++at) {\n        const unit = TIMERS[at][unit_mode];\n        const base = TIMERS[at][2];\n        const idx = Math.floor(msec / base);\n        if (idx) {\n            msec = msec % base;\n            str += `${idx}${unit}`;\n        }\n    }\n    return str;\n}\nexports.to_timer = to_timer;\nfunction to_relative_time_distance(msec) {\n    if (msec < -VALID || VALID < msec || msec - 0 == NaN) {\n        return DISTANCE_NAN;\n    }\n    const _limit = DISTANCES.length;\n    for (let at = 0; at < _limit; ++at) {\n        const o = DISTANCES[at];\n        const limit = o[0];\n        if (msec < limit) {\n            return o;\n        }\n    }\n    return DISTANCE_LONG_AGO;\n}\nexports.to_relative_time_distance = to_relative_time_distance;\n","module.exports = {\n  ...require \"./sample\"\n  ...require \"./fancy-date\"\n  ...require \"./time\"\n}","{ FancyDate } = require './fancy-date'\n\n九星 = [\"九紫火\",\"八白土\",\"七赤金\",\"六白金\",\"五黄土\",\"四緑木\",\"三碧木\",\"二黒土\",\"一白水\"]\n九曜 = ['羅睺','土曜','水曜','金曜','日曜','火曜','計都','月曜','木曜']\n七曜 = ['月','火','水','木','金','土','日']\n六曜 = [\"先勝\",\"友引\",\"先負\",\"仏滅\",\"大安\",\"赤口\"]\n\n九星かな = [\"きゅうしか\",\"はっぱくど\",\"しちせききん\",\"ろっぱくきん\",\"ごおうど\",\"しろくもく\",\"さんぺきもく\",\"じこくど\",\"いっぱくすい\"]\n九曜かな = [\"らごう\",\"どよう\",\"すいよう\",\"きんよう\",\"にちよう\",\"かよう\",\"けいと\",\"げつよう\",\"もくよう\"]\n七曜かな = [\"にち\",\"げつ\",\"か\",\"すい\",\"もく\",\"きん\",\"ど\"]\n六曜かな = [\"せんかち\",\"ともびき\",\"せんまけ\",\"ぶつめつ\",\"たいあん\",\"しゃっく\"]\n\n月相 = ['朔'  ,'既朔','三日月','上弦' ,'上弦','上弦' ,'上弦'  ,'上弦' ,'上弦'  ,'上弦' ,\n       '上弦','上弦','十三夜','小望月','満月','十六夜','立待月','居待月','臥待月','更待月',\n       '下限','下限','下限'  ,'下限' ,'下限','下限' ,'下限'  ,'下限' ,'晦'    ,'晦'  ]\n時鐘 = ['暁九ツ','暁八ツ','暁七ツ',\n       '明六ツ','朝五ツ','朝四ツ',\n       '昼九ツ','昼八ツ','昼七ツ',\n       '暮六ツ','夜五ツ','夜四ツ']\n\n月相かな = ['さく','きさく','みかづき','じょうげん','じょうげん','じょうげん','じょうげん','じょうげん','じょうげん','じょうげん',\n          'じょうげん','じょうげん','じゅうさんや','こもちづき','まんげつ','いざよい','たちまちづき','いまちづき','ふしまちづき','ふけまちづき',\n          'かげん','かげん','かげん','かげん','かげん','かげん','かげん','かげん','つごもり','つごもり']\n時鐘かな = ['ぎょうここのつ','ぎょうやつ','ぎょうななつ',\n          'あけむつ','あさいつつ','あさよつ',\n          'ひるここのつ','ひるやつ','ひるななつ',\n          'くれむつ','よるいつつ','よるよつ']\n\n和風月名 = ['睦月','如月','弥生','卯月','皐月','水無月','文月','葉月','長月','神無月','霜月','師走']\n\n二十四節季 = [\"立春\",\"雨水\",\"啓蟄\",\"春分\",\"清明\",\"穀雨\",\n           \"立夏\",\"小満\",\"芒種\",\"夏至\",\"小暑\",\"大暑\",\n           \"立秋\",\"処暑\",\"白露\",\"秋分\",\"寒露\",\"霜降\",\n           \"立冬\",\"小雪\",\"大雪\",\"冬至\",\"小寒\",\"大寒\"]\n\n和風月名かな = ['むつき','きさらぎ','やよい','うづき','さつき','みなつき','ふみつき','はつき','ながつき','かんなづき','しもつき','しわす']\n\n二十四節季かな = ['りっしゅん','うすい',   'けいちつ','しゅんぶん','せいめい',  'こくう',\n              'りっか',   'しょうまん','ぼうしゅ', 'げし',    'しょうしょ','たいしょ',\n              'りっしゅう','しょしょ',  'はくろ',  'しゅうぶん','かんろ',   'そうこう',\n              'りっとう',  'しょうせつ','たいせつ','とうじ',   'しょうかん','だいかん']\n\n十干 = [\"甲\",\"乙\",\"丙\",\"丁\",\"戊\",\"己\",\"庚\",\"辛\",\"壬\",\"癸\"]\n十二支 = [\"子\",\"丑\",\"寅\",\"卯\",\"辰\",\"巳\",\"午\",\"未\",\"申\",\"酉\",\"戌\",\"亥\"]\n\n十干かな = [\"きのえ\",\"きのと\",\"ひのえ\",\"ひのと\",\"つちのえ\",\"つちのと\",\"かのえ\",\"かのと\",\"みずのえ\",\"みずのと\"]\n十二支かな = [\"ね\",\"うし\",\"とら\",\"う\",\"たつ\",\"み\",\"うま\",\"ひつじ\",\"さる\",\"とり\",\"いぬ\",\"い\"]\n\n# 号, 開始時刻\n元号 = [\n  [\"大化\",    -41795686800000]\n  [\"白雉\",    -41648029200000]\n  [\"朱鳥\",    -40499427600000]\n  [\"大宝\",    -40034941200000]\n  [\"慶雲\",    -39936445200000]\n  [\"和銅\",    -39821446800000]\n  [\"霊亀\",    -39579958800000]\n  [\"養老\",    -39509715600000]\n  [\"神亀\",    -39314365200000]\n  [\"天平\",    -39140787600000]\n  [\"天平感宝\", -38520090000000]\n  [\"天平勝宝\", -38510845200000]\n  [\"天平宝字\", -38256829200000]\n  [\"天平神護\", -38023117200000]\n  [\"神護景雲\", -37940691600000]\n  [\"宝亀\",    -37842541200000]\n  [\"天応\",    -37518368400000]\n  [\"延暦\",    -37465837200000]\n  [\"大同\",    -36718304400000]\n  [\"弘仁\",    -36580496400000]\n  [\"天長\",    -36160678800000]\n  [\"承和\",    -35844541200000]\n  [\"嘉祥\",    -35389558800000]\n  [\"仁寿\",    -35298838800000]\n  [\"斉衡\",    -35186432400000]\n  [\"天安\",    -35115757200000]\n  [\"貞観\",    -35047414800000]\n  [\"元慶\",    -34478298000000]\n  [\"仁和\",    -34232922000000]\n  [\"寛平\",    -34099779600000]\n  [\"昌泰\",    -33816646800000]\n  [\"延喜\",    -33713053200000]\n  [\"延長\",    -33026950800000]\n  [\"承平\",    -32775613200000]\n  [\"天慶\",    -32551491600000]\n  [\"天暦\",    -32270778000000]\n  [\"天徳\",    -31938742800000]\n  [\"応和\",    -31835062800000]\n  [\"康保\",    -31725939600000]\n  [\"安和\",    -31597981200000]\n  [\"天禄\",    -31545968400000]\n  [\"天延\",    -31428982800000]\n  [\"貞元\",    -31347939600000]\n  [\"天元\",    -31272598800000]\n  [\"永観\",    -31133494800000]\n  [\"寛和\",    -31071200400000]\n  [\"永延\",    -31009338000000]\n  [\"永祚\",    -30935120400000]\n  [\"正暦\",    -30896931600000]\n  [\"長徳\",    -30760419600000]\n  [\"長保\",    -30638682000000]\n  [\"寛弘\",    -30464586000000]\n  [\"長和\",    -30196227600000]\n  [\"寛仁\",    -30061184400000]\n  [\"治安\",    -29940570000000]\n  [\"万寿\",    -29832483600000]\n  [\"長元\",    -29706339600000]\n  [\"長暦\",    -29431069200000]\n  [\"長久\",    -29317280400000]\n  [\"寛徳\",    -29191050000000]\n  [\"永承\",    -29145949200000]\n  [\"天喜\",    -28934442000000]\n  [\"康平\",    -28756890000000]\n  [\"治暦\",    -28537261200000]\n  [\"延久\",    -28421485200000]\n  [\"承保\",    -28252227600000]\n  [\"承暦\",    -28150621200000]\n  [\"永保\",    -28046682000000]\n  [\"応徳\",    -27952592400000]\n  [\"寛治\",    -27853059600000]\n  [\"嘉保\",    -27609930000000]\n  [\"永長\",    -27548499600000]\n  [\"承徳\",    -27517568400000]\n  [\"康和\",    -27463395600000]\n  [\"長治\",    -27322045200000]\n  [\"嘉承\",    -27253270800000]\n  [\"天仁\",    -27179830800000]\n  [\"天永\",    -27120214800000]\n  [\"永久\",    -27023360400000]\n  [\"元永\",    -26876134800000]\n  [\"保安\",    -26811766800000]\n  [\"天治\",    -26684758800000]\n  [\"大治\",    -26629635600000]\n  [\"天承\",    -26470746000000]\n  [\"長承\",    -26421411600000]\n  [\"保延\",    -26335702800000]\n  [\"永治\",    -26140784400000]\n  [\"康治\",    -26116160400000]\n  [\"天養\",    -26058013200000]\n  [\"久安\",    -26014640400000]\n  [\"仁平\",    -25840803600000]\n  [\"久寿\",    -25720794000000]\n  [\"保元\",    -25674915600000]\n  [\"平治\",    -25581085200000]\n  [\"永暦\",    -25556461200000]\n  [\"応保\",    -25506003600000]\n  [\"長寛\",    -25455286800000]\n  [\"永万\",    -25385994000000]\n  [\"仁安\",    -25348323600000]\n  [\"嘉応\",    -25265725200000]\n  [\"承安\",    -25200838800000]\n  [\"安元\",    -25067610000000]\n  [\"治承\",    -25003328400000]\n  [\"養和\",    -24877443600000]\n  [\"寿永\",    -24850832400000]\n  [\"元暦\",    -24790525200000]\n  [\"文治\",    -24749917200000]\n  [\"建久\",    -24602173200000]\n  [\"正治\",    -24317571600000]\n  [\"建仁\",    -24260029200000]\n  [\"元久\",    -24164989200000]\n  [\"建永\",    -24095523600000]\n  [\"承元\",    -24049818000000]\n  [\"建暦\",    -23941472400000]\n  [\"建保\",    -23854986000000]\n  [\"承久\",    -23686074000000]\n  [\"貞応\",    -23591552400000]\n  [\"元仁\",    -23509386000000]\n  [\"嘉禄\",    -23496598800000]\n  [\"安貞\",    -23413222800000]\n  [\"寛喜\",    -23375379600000]\n  [\"貞永\",    -23278698000000]\n  [\"天福\",    -23244397200000]\n  [\"文暦\",    -23196790800000]\n  [\"嘉禎\",    -23167501200000]\n  [\"暦仁\",    -23067709200000]\n  [\"延応\",    -23061402000000]\n  [\"仁治\",    -23017251600000]\n  [\"寛元\",    -22934739600000]\n  [\"宝治\",    -22806954000000]\n  [\"建長\",    -22741462800000]\n  [\"康元\",    -22505418000000]\n  [\"正嘉\",    -22491766800000]\n  [\"正元\",    -22426966800000]\n  [\"文応\",    -22392406800000]\n  [\"弘長\",    -22366314000000]\n  [\"文永\",    -22271187600000]\n  [\"建治\",    -21919280400000]\n  [\"弘安\",    -21829770000000]\n  [\"正応\",    -21508362000000]\n  [\"永仁\",    -21341955600000]\n  [\"正安\",    -21161638800000]\n  [\"乾元\",    -21049750800000]\n  [\"嘉元\",    -21025558800000]\n  [\"徳治\",    -20920150800000]\n  [\"延慶\",    -20861917200000]\n  [\"応長\",    -20783638800000]\n  [\"正和\",    -20753744400000]\n  [\"文保\",    -20599606800000]\n  [\"元応\",    -20531091600000]\n  [\"元亨\",    -20472858000000]\n  [\"正中\",    -20354144400000]\n  [\"嘉暦\",    -20309302800000]\n  [\"元徳\",    -20204499600000]\n  [\"元弘\",    -20142378000000]\n  [\"正慶\",    -20120346000000]\n  [\"建武\",    -20064099600000]\n  [\"延元\",    -19997744400000]\n  [\"興国\",    -19867712400000]\n  [\"正平\",    -19657674000000]\n  [\"建徳\",    -18913856400000]\n  [\"文中\",    -18859942800000]\n  [\"天授\",    -18760496400000]\n  [\"弘和\",    -18580784400000]\n  [\"元中\",    -18479782800000]\n  [\"暦応\",    -19918861200000]\n  [\"康永\",    -19804035600000]\n  [\"貞和\",    -19694912400000]\n  [\"観応\",    -19556586000000]\n  [\"文和\",    -19474938000000]\n  [\"延文\",    -19365037200000]\n  [\"康安\",    -19206838800000]\n  [\"貞治\",    -19161478800000]\n  [\"応安\",    -18990925200000]\n  [\"永和\",    -18768186000000]\n  [\"康暦\",    -18641005200000]\n  [\"永徳\",    -18579574800000]\n  [\"至徳\",    -18484966800000]\n  [\"嘉慶\",    -18373078800000]\n  [\"康応\",    -18328237200000]\n  [\"明徳\",    -18293590800000]\n  [\"応永\",    -18157683600000]\n  [\"正長\",    -17089261200000]\n  [\"永享\",    -17047789200000]\n  [\"嘉吉\",    -16686982800000]\n  [\"文安\",    -16593670800000]\n  [\"宝徳\",    -16420784400000]\n  [\"享徳\",    -16326608400000]\n  [\"康正\",    -16229667600000]\n  [\"長禄\",    -16163053200000]\n  [\"寛正\",    -16059027600000]\n  [\"文正\",    -15897718800000]\n  [\"応仁\",    -15863936400000]\n  [\"文明\",    -15795594000000]\n  [\"長享\",    -15222243600000]\n  [\"延徳\",    -15155802000000]\n  [\"明応\",    -15064131600000]\n  [\"文亀\",    -14792835600000]\n  [\"永正\",    -14698314000000]\n  [\"大永\",    -14145354000000]\n  [\"享禄\",    -13926157200000]\n  [\"天文\",    -13800358800000]\n  [\"弘治\",    -13068550800000]\n  [\"永禄\",    -12994074000000]\n  [\"元亀\",    -12609334800000]\n  [\"天正\",    -12506864400000]\n  [\"文禄\",    -11896189200000]\n  [\"慶長\",    -11772118800000]\n  [\"元和\",    -11181402000000]\n  [\"寛永\",    -10909501200000]\n  [\"正保\",    -10254934800000]\n  [\"慶安\",    -10152982800000]\n  [\"承応\",    -10009818000000]\n  [\"明暦\",     -9928602000000]\n  [\"万治\",     -9825699600000]\n  [\"寛文\",     -9738781200000]\n  [\"延宝\",     -9346266000000]\n  [\"天和\",     -9092941200000]\n  [\"貞享\",     -9017082000000]\n  [\"元禄\",     -8873485200000]\n  [\"宝永\",     -8385066000000]\n  [\"正徳\",     -8159389200000]\n  [\"享保\",     -7996438800000]\n  [\"元文\",     -7370730000000]\n  [\"寛保\",     -7217802000000]\n  [\"延享\",     -7123885200000]\n  [\"寛延\",     -6986941200000]\n  [\"宝暦\",     -6881014800000]\n  [\"明和\",     -6485130000000]\n  [\"安永\",     -6218586000000]\n  [\"天明\",     -5954374800000]\n  [\"寛政\",     -5707530000000]\n  [\"享和\",     -5326506000000]\n  [\"文化\",     -5231552400000]\n  [\"文政\",     -4784173200000]\n  [\"天保\",     -4384573200000]\n  [\"弘化\",     -3943933200000]\n  [\"嘉永\",     -3842154000000]\n  [\"安政\",     -3627882000000]\n  [\"万延\",     -3462858000000]\n  [\"文久\",     -3432186000000]\n  [\"元治\",     -3337664400000]\n  [\"慶応\",     -3303104400000]\n  [\"明治\",     -3216790800000]\n  [\"大正\",     -1812186000000]\n  [\"昭和\",     -1357635600000]\n  [\"平成\",       600188400000]\n  [\"令和\",      1556636400000]\n];\n\n日本 = [ 35, 135 ]\n\n月 = [        2551442889, 1577310360000] # 2019/12/26 06:46\nガニメデ = [     618192000, 0 ]\nカリスト = [    1441929600, 0 ]\nタイタン = [    1377684374, 0 ]\nチタニア = [     752198400, 0 ]\nトリトン = [     507733056, 0 ]\n\nナマカ = [     1579245120, 0 ]\nヒイアカ = [    4273516800, 0 ]\nカロン = [      551880000, 0 ]\nディスノミア = [ 1362700800, 0 ]\n\n地球 = [\n  [31556925147, 1553119080000] # 2019/03/21 06:58\n  月\n  [   86400000, 0, 23.4397] # LOD ではなく、暦上の1日。Unix epoch では閏秒を消し去るため。\n  日本\n]\n\n火星 = [\n  [59355616881, 1540684800000] # 公転周期 UTC 2018/10/28 00:00\n  null\n  [   88740035, 0, 25.19] # 自転周期 24時間39分35秒。\n  [ 35, 0 ]\n]\n\n水星 = [\n  [ 7596288000, 1553119080000] # 太陽年 2019/03/21 06:58\n  null\n  [15192576000, 0, 0.01] # 太陽日\n  [ 35, 0 ]\n]\n\n金星 = [\n  [19414456423, 1553119080000] # 公転周期 2019/03/21 06:58\n  null\n  [10087251840, 0, -2.64] # 太陽日\n  [ 35, 0 ]\n]\n\n木星 = [\n  [374322050280, 1553119080000] # 公転周期 2019/03/21 06:58\n  カリスト\n  [    35769600, 0, 3.12] # 自転周期\n  [ 35, 0 ]\n]\n\n土星 = [\n  [931964092416, 1553119080000] # 公転周期 2019/03/21 06:58\n  タイタン\n  [    37920035, 0, 25.33] # 自転周期\n  [ 35, 0 ]\n]\n\n天王星 = [\n  [2658822788376, 1553119080000] # 公転周期 2019/03/21 06:58\n  チタニア\n  [     62061120, 0, -82.23] # 自転周期\n  [ 35, 0 ]\n]\n\n海王星 = [\n  [5200376904000, 1553119080000] #公転周期  2019/03/21 06:58\n  トリトン\n  [     64800000, 0, 28.32] # 自転周期\n  [ 35, 0 ]\n]\n\n冥王星 = [\n  [7818100727754, 0] # 公転周期 \n  カロン\n  [    551856672, 0, -60.41] # 自転周期\n  [ 35, 0 ]\n]\n\nセレス = [\n  [ 145423814400, 0] # 公転周期 \n  null\n  [     32667012, 0, 4] # 自転周期\n  [ 35, 0 ]\n]\n\nハウメア = [\n  [ 8908394904000, 0] # 公転周期 \n  ヒイアカ\n  [      14095440, 0, 0] # 自転周期\n  [ 35, 0 ]\n]\n\nマケマケ = [\n  [ 9639268920000, 0] # 公転周期 \n  null\n  [      27975600, 0, 0] # 自転周期\n  [ 35, 0 ]\n]\n\nエリス = [\n  [ 17610403104000, 0] # 公転周期 \n  ディスノミア\n  [       93240000, 0, 0] # 自転周期\n  [ 35, 0 ]\n]\n\n元号[244...]\n\nexport DIC = {\n  元号,\n  九星, 九曜, 七曜, 六曜,\n  和風月名, 二十四節季,\n  月相, 時鐘,\n  十干, 十二支,\n\n  九星かな, 九曜かな, 七曜かな, 六曜かな,\n  和風月名かな, 二十四節季かな,\n  月相かな, 時鐘かな,\n  十干かな, 十二支かな,\n\n  日本,\n  地球,火星,水星,金星,木星,土星,天王星,海王星,冥王星,セレス,ハウメア,マケマケ,エリス\n  月,ガニメデ,カリスト,タイタン,チタニア,トリトン,ナマカ,ヒイアカ,カロン,ディスノミア\n}\n\n# ---  -  I  L -OP R TUVWX -\n# --- efghijkl no qr t v   z\n\nFancyDate.Gregorian = g = new FancyDate()\n  .planet   ...地球\n  .era \"西暦\"\n  .calendar(\n    [\"1970年(木) 庚戌-辛巳\",'y年(E) a-A', 0]\n    [4, 100, 400]\n    [31, null,31,30,31,30,31,31,30,31,30,31]\n  )\n  .algo(\n    M: [12]\n    H: [24]\n    m: [60]\n    s: [60]\n\n    N: [月相,月相かな]\n\n    E: [七曜,七曜かな         ] # 2000-01-02\n    Z: [二十四節季,二十四節季かな] # 2019-02-03 15:14\n\n    a: [60] # 1984\n    A: [60] # 2019-11-23\n    B: [十二支,十二支かな]\n    C: [十干,十干かな]\n  )\n  .init()\n\nFancyDate.Julian = g.dup()\n  .calendar(\n    [\"1582/10/5(金) 壬午-甲戌\",'y/M/d(E) a-A', g.parse(\"1582年10月15日\")]\n    [4]\n    [31, null,31,30,31,30,31,31,30,31,30,31]\n  )\n  .init()\n\nFancyDate.平気法 = g.dup()\n  .planet   ...地球\n  .era \"皇紀\", 元号\n  .calendar(\n    [\"2630年睦月1日 庚戌-辛巳 三碧木-七赤金\",'y年Md日 a-A f-F', 0]\n  )\n  .daily true\n  .algo(\n    E: [六曜,六曜かな]\n    M: [和風月名,和風月名かな]\n    H: [時鐘,時鐘かな]\n    m: [['','半'],['','はん']]\n    s: [3600]\n    S: [1000]\n\n    f: [九星,九星かな] # 2006-01-01\n    F: [九星.reverse(),九星かな.reverse()] # 2006-01-01\n  )\n  .init()\n\nFancyDate.Romulus = g.dup()\n  .era \"ロムルス暦\"\n  .calendar(\n    [\"754年1月1日(A)\",'y年M月d日(E)', g.parse(\"1年3月19日\")]\n    null\n    [null, 31,30,31,30,31,30,30,31,30,30]\n  )\n  .algo(\n    M: [11]\n    E: [\"ABCDEFGH\",null] # 2000-01-02\n  )\n  .init()\n\nFastEarth = [ # 天体が地球の百倍速のケース\n  [315569251.470, new Date(\"2019/03/21 06:58\").getTime() / 100]\n  [ 25514428.896, new Date(\"2019/01/06 10:28\").getTime() / 100]\n  [   864000    , 0, 23.4397] # LOD ではなく、暦上の1日。Unix epoch では閏秒を消し去るため。\n  日本\n]\n\nFancyDate.Fast = g.dup()\n  .planet   ...FastEarth\n  .era \"fast\", 元号\n  .init()\n\nFancyDate.MarsGregorian = g.dup()\n  .planet   ...火星\n  .era \"西暦\"\n  .calendar(\n    [\"1年(火) 壬子-辛巳\",'y年(E) a-A', g.parse \"0年4月1日\"] # 春分が３月くらいになるよう、恣意的に決めました。\n    [1, 7, 70]\n  )\n  .algo(\n    M: [20]\n  )\n  .init()\n\nFancyDate.Jupiter = g.dup()\n  .planet   ...木星\n  .era \"西暦\"\n  .calendar(\n    [\"1年(火) 壬子-辛巳\",'y年(E) a-A', g.parse \"0年4月1日\"] # 春分が３月くらいになるよう、恣意的に決めました。\n  )\n  .algo(\n    H: [10]\n    M: [260]\n    Z: [520]\n  )\n  .init()\n\nFancyDate.フランス革命暦 = g.dup()\n  .era \"革命暦\"\n  .calendar(\n    [\"1年葡萄月1日 1曜 壬子-癸酉\", \"y年Md日 E曜 a-A\", g.parse \"1792年9月22日\"]\n    [4, 100, 400]\n    [30,30,30,30, 30,30,30,30, 30,30,30,30, null]\n  )\n  .algo(\n    M: [[\"葡萄月\",\"霧月\",\"霜月\",\"雪月\",\"雨月\",\"風月\",\"芽月\",\"花月\",\"牧月\",\"収穫月\",\"熱月\",\"実月\",\"休日\"],[\"Vendémiaire\",\"Brumaire\",\"Frimaire\",\"Nivôse\",\"Pluviôse\",\"Ventôse\",\"Germinal\",\"Floréal\",\"Prairial\",\"Messidor\",\"Thermidor\",\"Fructidor\",\"Vacances\"]]\n    H: [10]\n    m: [100]\n    s: [100]\n\n    E: [10]\n  )\n  .init()","module.exports = require(\"lodash\");"],"sourceRoot":""}