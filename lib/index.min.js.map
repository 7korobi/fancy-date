{"version":3,"sources":["webpack://FancyDate/webpack/universalModuleDefinition","webpack://FancyDate/webpack/bootstrap","webpack://FancyDate/./src/fancy-date.coffee","webpack://FancyDate/./src/time.ts","webpack://FancyDate/./src/index.coffee","webpack://FancyDate/./src/sample.coffee","webpack://FancyDate/external \"lodash\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_","reg_parse","reg_token","calc_set","calc","path","val","sub_define","size","msec","daily_define","range","Math","day","daily_measure","Indexer","idx","dic","label","list","eras","divs","zero","year","sunny","earthy","moon","moony","start","start_at","leaps","month_divs","hours","minutes","seconds","is_solor","G","T","Z","w","M","D","e","E","N","J","Y","y","u","H","S","at","now_idx","season","month","week","hour","minute","second","era","a","table","regex","f","upto","period","is_leap","years","month_sum","Array","length","eto","full_period","zero_size","tz_offset","geo","ld","jd","mjd","to_tempo_bare","since","year_size","gap","gaps","leap","parseInt","utc","days","deg_to_rad","PI","year_to_rad","rad_to_day","deg_to_day","高度","K","lat","南中時刻","last_at","南中差分","sin","T0","真夜中","T1","季節","赤緯","asin","atan","tan","cos","時角","acos","next_at","日の出","日の入","tails","to_tempo_by","drill_down","base","b_size","to_tempo","write_at","to_tempo_mod","sub","Zz","Zs","Nn","era_base","tgt","str","data","tokens","indexer","reg","items","token","RegExp","tempos","Error","tempo","last_time","Date","next_time","SECOND","to_msec","MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","VALID","timezone","window","getTimezoneOffset","tempo_zero","getDay","TIMERS","DISTANCE_NAN","DISTANCE_LONG_AGO","Infinity","DISTANCES","Tempo","this","sub_size","sub_zero","do2","do3","slide","dup","now","sleep","reduce","min","timeout","Promise","ok","setTimeout","floor","scan_at","top_idx","mid_idx","to_sec","replace","full","num_str","fullunit","unit","appendix","num","Number","size_str","zero_str","to_timer","unit_mode","_limit","to_relative_time_distance","NaN","七曜","六曜","和風月名","二十四節季","月相","時の鐘","十干","十二支","六十干支","b","六十干支よみ","元号","日本","地球","火星","GREGORIO","calendar","rolls","yeary","seasonly","daily","平気法","FastEarth","getTime","FancyDate","g","Gregorian","MARS_GREGORIO","require"],"mappings":"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C,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,WACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,WACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,WACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,WACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,WACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,WACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,YACP,CAAC,MAAM,aACP,CAAC,MAAM,aACP,CAAC,MAAM,aaAGVC,EAAK,CAAC,GAAD,KAELC,EAAK,CACH,CAAC,YAAe,IAAItE,KAAK,oBADtB,WAEH,CAAC,aAAe,IAAIA,KAAK,oBAFtB,WAGH,CAAC,MAAD,WAHG,GAOLuE,EAAK,CACH,CAAC,iBAAkB,IAAIvE,KAAK,oBADzB,gBAGH,CAAC,QAAD,SACA,CAAC,GAJE,IAQLwE,EACE,CAAAC,SAAU,CAAC,qBAAD,EAGR,CAAC,EAAG,IAHI,KAIR,CAAC,GAAI,EAAL,2BAJF,KAMAC,MAAO,CACL,CAAC,IAAK,EADD,GAEL,CAAC,GAAI,GAAIT,EARX,IAUAU,MAAO,CACL,CAAC,IAAK,EADD,IAEL,CAAC,IAZH,IAcAC,SAAU,CAER,CAAC,GAAI,EAhBP,IAkBA7L,MAAO,CACL,CAAC,GAAI,EAnBP,IAqBA8L,MAAO,CACL,CAAC,IAAK,EADD,IAEL,CAAC,IAAK,EAFD,IAGL,CAAC,IAHI,KAMTC,EACE,CAAAL,SAAU,CAAC,qBAAX,GAIAC,MAAO,CACL,CAAC,GAAI,KADA,GAEL,CAAC,GAAI,EAAL,EANF,IAQAC,MAAO,CACL,CAAC,IAAK,EADD,GAEL,CAAC,IAVH,IAYAE,MAAO,CACL,CAAC,IAAK,EADD,GAEL,CAAC,IAAK,EAAG,CAAC,GAFL,MAGL,CAAC,IAHI,QAmBTE,EAAY,CACV,CAAC,aAAe,IAAI/E,KAAK,oBAAoBgF,UADnC,KAEV,CAAC,aAAe,IAAIhF,KAAK,oBAAoBgF,UAFnC,KAGV,CAAC,MAAD,WAHU,GAOZC,EAAA,UAAsBC,GAAI,IAAID,GAAJ,yBAEXT,EAFW,mBAGXA,EAHW,0BAKXA,EALW,mBAMXA,EANW,mBAOXA,EAPW,gBAQXA,EARW,cAW1BS,EAAA,IAAgBA,EAAUE,UAAV,+BAEDL,EAFC,mBAGDA,EAHC,4BAKDA,EALC,gBAMDA,EANC,OAlZhB,OAgaAG,EAAA,KAAiBA,EAAUE,UAAV,wCAKjBC,EACE,CAAAX,SAAU,CAAC,kBAETS,EAAA,MAFQ,UAGR,YAHQ,MAKVP,MAAO,CACL,CAAC,IAAK,EADD,IAEL,CAAC,IAPH,IASAE,MAAO,CACL,CAAC,IAAK,EADD,IAEL,CAAC,IAAK,EAFD,IAGL,CAAC,IAHI,KAMTI,EAAA,cAA0BA,EAAUE,UAAV,+BAEXC,EAFW,6BAIXA,EAJW,gBAKXA,EALW,e,cCrb1BvQ,EAAOD,QAAUyQ,QAAQ","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FancyDate\"] = factory();\n\telse\n\t\troot[\"FancyDate\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","  \n{\n  Tempo\n  to_tempo_by\n  to_tempo_bare\n} = require \"./time\"\n_ = require \"lodash\"\n\nreg_parse = /(\\d+)年(\\d+)月(\\d+)日\\(([^)])\\)(\\d+)時(\\d+)分(\\d+)秒/\nreg_token = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g\ndefault_parse_format  = \"y年M月d日\"\ndefault_format_format = \"Gy年M月d日(E)H時m分s秒\"\n\ncalc_set = (path, o)->\n  for key, val of o\n    @calc[path][key] = val?[path] || val\n\nsub_define = (msec, size)->\n  range = [size]\n  msec = msec / size\n  { range, msec }\n\ndaily_define = (msec, day)->\n  range = [Math.floor(msec / day)]\n  msec = range[0] * day\n  { range, msec }\n\ndaily_measure = (msec, day)->\n  range = [Math.floor(msec / day), Math.ceil(msec / day)]\n  { range, msec }\n\n\nclass Indexer\n  constructor: ( dic, code, label, @idx, list )->\n    dic[code] = @\n    @label = label\n    if list\n      if list.length\n        dic.list[code] = list\n        @list = list\n        @length = list.length\n      else\n        @length = list\n\n  at: (idx)->\n    if @list\n      @list[ idx ]\n    else\n      idx\n\n\nexport class FancyDate\n  constructor: (o)->\n    if o\n      { @dic, @calc } = _.cloneDeep o\n    else\n      @dic = { list: {} }\n      @calc =\n        eras: []\n        divs: {}\n        idx:  {}\n        zero: {}\n        msec: {}\n        range: {}\n\n  dup: ->\n    new @constructor @\n\n  planet: (\n    sunny\n    moony\n    earthy\n    geo\n  )->\n    year = daily_measure sunny[0], earthy[0]\n    day = daily_define earthy[0], earthy[0]\n    if moony\n      moon = daily_measure moony[0], earthy[0]\n\n    calc_set.call @, \"range\", { year, moon, day }\n    calc_set.call @, \"msec\",  { year, moon, day }\n\n    Object.assign @dic, { sunny, moony, earthy, geo }\n    @\n\n  era: ( era, eras = [] )->\n    new Indexer @dic, 'G', '', 0, [\"紀元前\", ...eras.map(([s,])=> s)]\n    Object.assign @dic, { era, eras }\n    @\n\n  calendar: (start, start_at, leaps = null, month_divs = null )->\n    Object.assign @dic, { month_divs, leaps, start, start_at }\n    @is_table_leap = leaps?\n    @is_table_month = month_divs?\n    @\n\n  rolls: ( weeks, etos )->\n    new Indexer @dic, 'E', ...weeks\n    new Indexer @dic, 'T', ...etos\n    @\n\n  yeary: ( months, days )->\n    new Indexer @dic, 'M', ...months\n    new Indexer @dic, 'd', ...days\n    @\n\n  moony: ( moons )->\n    new Indexer @dic, 'N', ...moons\n    @\n\n  seasonly: ( seasons )->\n    new Indexer @dic, 'Z', ...seasons\n    @\n\n  daily: (hours, minutes, seconds, is_solor = false)->\n    new Indexer @dic, 'H', ...hours\n    new Indexer @dic, 'm', ...minutes\n    new Indexer @dic, 's', ...seconds\n    @dic.is_solor = is_solor\n    @\n\n  init: ->\n    G = (s, list)=> if ! list || idx = list.indexOf(s) < 0 then s - 0 else idx\n    T = Z = w = M = d = D = (s, list)=> if ! list || idx = list.indexOf(s) < 0 then s - 1 else idx\n    e = E = N = J = Y = y = u = H = m = s = S = (s)=> s - 0\n    @dic.indexer = { G, u,Y,y,M,d, H,m,s,S, e,E, Z,N,T, D,w,J }\n\n    at = (list, now_idx)->\n      if list\n        s = list[now_idx]\n        if s?\n          s\n\n    G = ()-> @label\n    M = ( length )->\n      \"#{\n        if @is_leap\n          \"閏\"\n        else\n          \"\"\n      }#{ at( @list, @now_idx ) ? _.padStart @now_idx + 1, length, '0' }\"\n    T = Z = w = d = D = ( length )-> at( @list, @now_idx ) ? _.padStart @now_idx + 1, length, '0'\n    H = m = e = E = N = ( length )-> at( @list, @now_idx ) ? _.padStart @now_idx, length, '0'\n    J = Y = y = u = s = ( length )-> _.padStart @now_idx, length, '0'\n    S = ( length )-> \"#{ @now_idx }\"[1..]\n    @dic.to_label = { G, u,Y,y,M,d, H,m,s,S, e,E, Z,N,T, D,w,J }\n\n\n    season = sub_define    @calc.msec.year, @dic.Z.length\n    month  = daily_measure @calc.msec.year / @dic.M.length, @calc.msec.day\n    week   = daily_define  @dic.E.length * @calc.msec.day, @calc.msec.day\n\n    hour   = sub_define    @calc.msec.day, @dic.H.length\n    if @dic.is_solor\n      minute = sub_define      hour.msec,  @dic.m.length\n      second = sub_define    minute.msec,  minute.msec / 1000\n      calc_set.call @, \"range\", { season, month, week, hour, minute, second }\n      calc_set.call @, \"msec\",  { season, month, week, hour, minute, second }\n    else\n      minute = sub_define      hour.msec,  @dic.m.length\n      second = sub_define    minute.msec,  minute.msec / 1000\n      calc_set.call @, \"range\", { season, month, week, hour, minute, second }\n      calc_set.call @, \"msec\",  { season, month, week, hour, minute, second }\n\n    @def_table()\n    Object.assign @calc.idx,  @def_idx()\n    Object.assign @calc.zero, @def_zero()\n\n    zero = @calc.zero.era\n    list =\n      for [ title, msec ], idx in @dic.eras\n        { u } = @to_tempos msec\n        a = [ title, msec, u.now_idx]\n        @calc.eras.push a\n        msec - zero\n    list.push Infinity\n    @table.msec.era = list\n\n    G = T = (list)=> \"(#{ list.join(\"|\") })\"\n    M = d = H = m = e = E = Z = N = (list)=>\n      if list\n        \"(#{ list.join(\"|\") })\"\n      else\n        \"(\\\\d+)\"\n    D = w = u = Y = y = s = S = (list)=> \"(\\\\d+)\"\n    J = (list)=> \"([\\\\d.]+)\"\n\n    @dic.regex = {}\n    for key, f of { G, u,Y,y,M,d, H,m,s,S, e,E, Z,N,T, D,w,J }\n      @dic.regex[key] = f @dic.list[key]\n    @\n\n  def_table_by_leap_day: ->\n    day = @calc.msec.day\n    upto = (src)->\n      msec = 0\n      for i in src\n        msec += i * day\n\n    [...leaps, period] = @dic.leaps\n\n    range =\n      year:\n        for idx in [0...period]\n          is_leap = 0\n          for div, mode in leaps\n            continue if idx % div\n            is_leap = ! mode % 2\n          @calc.range.year[is_leap]\n    range.year[0] = @calc.range.year[1]\n    years = _.uniq range.year\n\n    { month_divs } = @dic\n    unless month_divs\n      month_divs =\n        for str, idx in @dic.M\n          @calc.range.month[1 - idx % 2]\n      month_divs[1] = 0\n    month_sum = 0\n    for i in month_divs\n      month_sum += i\n\n    range.month = {}\n    for size in years\n      a = Array.from month_divs\n      idx = month_divs.indexOf 0\n      a[idx] = size - month_sum\n      range.month[size] = a\n\n    year = upto range.year\n    period = year[year.length - 1]\n    period = daily_define period, day\n    calc_set.call @, \"msec\", { period }\n\n    month = {}\n    for size in years\n      month[size * day] = upto range.month[size]\n\n    @table = { range, msec: { year, month } }\n    ({ size }, path)->\n      switch path\n        when 'year'\n          year\n        when 'month'\n          month[size]\n        else\n          null\n\n  def_table_by_leap_month: ->\n    day = @calc.msec.day\n    upto = (src)->\n      msec = 0\n      for i in src\n        msec += i * day\n\n    years = _.uniq @calc.range.year\n\n    { months, month_divs } = @dic\n    month_sum = 0\n    for i in month_divs\n      month_sum += i\n\n    range =\n      month: {}\n    for size in years\n      a = Array.from month_divs\n      idx = month_divs.indexOf 0\n      a[idx] = size - month_sum\n      range.month[size] = a\n\n    month = {}\n    for size in years\n      month[size * day] = upto range.month[size]\n\n    @table = { range, msec: { month } }\n    ({ size }, path)->\n      switch path\n        when 'month'\n          month[size]\n        else\n          null\n  def_table_by_season: ->\n    @table = { range: {}, msec: {} }\n    (o, path)-> null\n\n  def_table: ->\n    @get_table =\n      if @is_table_leap\n        @def_table_by_leap_day()\n      else\n        if @is_table_month\n          @def_table_by_leap_month()\n        else\n          @def_table_by_season()\n\n  def_idx: ->\n    week = @dic.E?.length\n    eto  = @dic.T?.length\n    Object.assign @calc.divs, { week, eto }\n\n    [,year, month, day, week, hour, minute, second] = @dic.start.match reg_parse\n    year   = year   - 0\n    month  = month  - 0\n    day    = day    - 0\n    hour   = hour   - 0\n    minute = minute - 0\n    second = second - 0\n    eto    = @dic.T?.idx\n    week   = @dic.E?.idx\n    season = @dic.Z?.idx\n    moon   = 0\n\n    if @is_table_leap\n      [..., full_period] = @dic.leaps\n      period = full_period\n      Object.assign @calc.divs, { period }\n\n      period = Math.floor year / @calc.divs.period\n      year   = year % @calc.divs.period\n\n    { period, year, month, moon, week, eto, day, hour, minute, second, season }\n\n  def_zero: ->\n    zero_size = (path, idx = 0)=>\n      0 - (@calc.idx[path] - idx) * @calc.msec[path]\n\n    tz_offset = @dic.earthy[0] / 360 * @dic.geo[1]\n    zero   = @dic.start_at - tz_offset\n\n    second = zero   + zero_size \"second\"\n    minute = second + zero_size \"minute\"\n    hour   = minute + zero_size \"hour\"\n    day    = hour   + zero_size \"day\", 1\n    week   = day    + zero_size(\"week\") / @calc.divs.week\n\n    # JD\n    jd = -2440587.5 * @calc.msec.day\n    ld = jd + 2299159.5 * @calc.msec.day\n    mjd = jd + 2400000.5 * @calc.msec.day\n\n    # 単純のため平気法。\n    season = @dic.sunny[1] + zero_size \"season\" # 立春点\n    { since } = to_tempo_bare @calc.msec.year, @dic.start_at, season\n    season = since + zero_size \"year\"\n\n    if @is_table_leap\n      year_size = @calc.msec.day * @table.range.year[ @calc.idx.year %% @calc.divs.period ]\n\n      month  = day   - (@table.msec.month[year_size][ @calc.idx.month - 2 ] || 0)\n      year   = month - (@table.msec.year[             @calc.idx.year  - 1 ] || 0)\n      period = year  + zero_size \"period\"\n\n      season += zero_size \"period\"\n\n    # 元号\n    era = @dic.eras[0]?[1] || Infinity\n    @calc.eras = []\n    if @is_table_leap\n      if period < era\n        era = period + @table.msec.year[0]\n        @calc.eras = [[@dic.era, era, 1]]\n    else\n      if season < era\n        era = season + @calc.msec.year\n        @calc.eras = [[@dic.era, era, 1]]\n\n    if @dic.moony\n      moon = 0 - @dic.moony[1]\n\n    { period, era, week, season, moon, day, jd,ld,mjd }\n\n  precision: ->\n    gaps = [( @calc.msec.year / @calc.msec.day ) - @calc.range.year[0]]\n    if @dic.leaps\n      for v, idx in @dic.leaps\n        gap = gaps[gaps.length - 1]\n        if idx % 2\n          gap += 1 / v\n        else\n          gap -= 1 / v\n        gaps.push gap\n    minute: @calc.range.second\n    leap: gaps.map (i)=> parseInt 1 / i\n\n###\nhttp://bakamoto.sakura.ne.jp/buturi/2hinode.pdf\nベクトルで\na1 = e1 * cos(lat/360) + e3 * sin(lat/360)\na2 = e3 * cos(lat/360) - e1 * sin(lat/360)\nT = (赤緯, 時角)->\n  a1 * sin(赤緯) + cos(赤緯) * (a2 * cos(時角) - e2 * sin(時角))\nT = ( lat, 赤緯, 時角 )->\n  e1 * ( cos(lat/360) * sin(赤緯) - sin(lat/360) * cos(赤緯) * cos(時角) ) +\n  e2 * (-cos(赤緯) * sin(時角)) +\n  e3 * ( sin(lat/360) * sin(赤緯) + cos(lat/360) * cos(赤緯) * cos(時角) )\n\nK   = @dic.earthy[2] / 360\n高度 = -50/60\n時角 = ( lat, 高度, 赤緯 )->\n  acos(( sin(高度) - sin(lat/360) * sin(赤緯) ) / cos(lat/360) * cos(赤緯) )\n方向 = ( lat, 高度, 赤緯, 時角 )->\n  acos(( cos(lat/360) * sin(赤緯) - sin(lat/360) * cos(赤緯) * cos(時角) ) / cos(高度) )\n季節 = 春分点からの移動角度\n赤緯 = asin( sin(K) * sin(季節) )\n赤経 = atan( tan(季節) * cos(K) )\n南中時刻 = ->\n  正午 + 時角 + ( 赤経 - 季節 ) + 平均値 + tz_offset\n日の出 = ->\n  南中時刻 - 時角\n日の入 = ->\n  南中時刻 + 時角\n###\n\n  solor: (utc, idx = 2, { last_at, next_at } = to_tempo_bare @calc.msec.day, @calc.zero.day, utc )->\n    days = [\n        6      # golden hour end         / golden hour\n      -18 / 60 # sunrise bottom edge end / sunset bottom edge start\n      -50 / 60 # sunrise top edge start  / sunset top edge end\n       -6      # dawn                    / dusk\n      -12      # nautical dawn           / nautical dusk\n      -18      # night end               / night\n    ]\n    { asin, acos, atan, sin, cos, tan, PI } = Math\n    deg_to_rad  = 2 * PI / 360\n    year_to_rad = 2 * PI / @calc.msec.year\n    rad_to_day  = @calc.msec.day / ( 2 * PI )\n    deg_to_day  = @calc.msec.day / 360\n\n    高度 = days[idx]      * deg_to_rad\n    K   = @dic.earthy[2] * deg_to_rad\n    lat = @dic.geo[0]    * deg_to_rad\n\n    T0  = to_tempo_bare @calc.msec.year, @calc.zero.season, utc\n\n    # 南中差分の計算がテキトウになってしまった。あとで検討。\n    南中差分A = deg_to_day * 2.0 * sin( year_to_rad * 1 *   T0.since )\n    南中差分B = deg_to_day * 2.5 * sin( year_to_rad * 2 * ( T0.since + @calc.msec.year * 0.1 ))\n    南中差分 = 南中差分A + 南中差分B\n\n    南中時刻 = ( last_at + next_at ) / 2 + 南中差分\n    真夜中 = last_at + 南中差分\n\n    T1 = to_tempo_bare @calc.msec.year, @dic.sunny[1], 南中時刻\n\n    spring = T1.last_at\n    季節 = T1.since * year_to_rad\n    赤緯 = asin( sin(K) * sin(季節) )\n    赤経 = atan( tan(季節) * cos(K) )\n    時角 = acos(( sin(高度) - sin(lat) * sin(赤緯) ) / (cos(lat) * cos(赤緯)) )\n    方向 = acos(( cos(lat) * sin(赤緯) - sin(lat) * cos(赤緯) * cos(時角) ) / cos(高度) )\n\n    日の出 = Math.floor 南中時刻 - 時角 * rad_to_day\n    日の入 = Math.floor 南中時刻 + 時角 * rad_to_day\n    { \n      T0,\n      utc,idx,高度,K,lat,T1,南中差分,  時角,方向, last_at, 真夜中,日の出,南中時刻,日の入, next_at }\n\n  to_tempo_by_solor: (utc, day)->\n    { 日の出, 南中時刻, 日の入 } = @solor utc, 2, day\n    size = @dic.H.length / 4\n\n    list = []\n    next_at = 0\n    msec = ( 日の出 - day.last_at ) / size\n    for idx in [0        ... 1 * size]\n      next_at += msec\n      list.push Math.floor next_at\n\n    next_at = 日の出 - day.last_at\n    msec = ( 日の入 - 日の出 ) / ( 2 * size )\n    for idx in [1 * size ... 3 * size]\n      next_at += msec\n      list.push Math.floor next_at\n\n    next_at = day.size\n    msec = ( day.next_at - 日の入 ) / size\n\n    tails = []\n    for idx in [3 * size ... 4 * size]\n      tails.push Math.ceil next_at\n      next_at -= msec\n    list.push ...tails.reverse()\n    to_tempo_by list, day.last_at, utc\n\n  to_tempos: (utc)->\n    drill_down = (base, path, at = utc)=>\n      table = @get_table base, path\n      if table\n        o = to_tempo_by table, base.last_at, at\n      else\n        b_size = @calc.msec[path]\n        o = to_tempo_bare b_size, base.last_at, at\n        o.length = base.size / o.size\n      o.path = path\n      o\n\n    to_tempo = (path, write_at = utc)=>\n      to_tempo_bare @calc.msec[path], @calc.zero[path], write_at\n\n    to_tempo_mod = (o, sub)=>\n      o.mod_bare @calc.msec[sub], @calc.zero[sub]\n\n    J = to_tempo_bare @calc.msec.day, @calc.zero.jd, utc # ユリウス日\n\n    # season in year_of_planet\n    Zz = to_tempo_bare @calc.msec.year, @calc.zero.season, utc # 太陽年\n    Z  = drill_down Zz, \"season\" # 太陽年の二十四節気\n\n    # 正月中気と正月\n    N0_p = Zz.last_at + @calc.msec.season\n    N0 = to_tempo \"moon\", N0_p\n    N0 = to_tempo_mod N0, \"day\"\n\n    # 今月と中気\n    Nn = to_tempo \"moon\"\n    Nn = to_tempo_mod Nn, \"day\"\n    Zs = drill_down Zz, \"season\", Nn.last_at\n    unless Nn.last_at <= Zs.moderate_at < Nn.next_at\n      Zs = drill_down Zz, \"season\", Nn.next_at\n      unless Nn.last_at <= Zs.moderate_at < Nn.next_at\n        Nn.is_leap = true\n\n    switch Zs.now_idx >> 1\n      when -1\n        # 太陽年初に0月が出てしまう。昨年末にする。\n        Zz = to_tempo_bare Zz.size, Zz.zero, Zs.last_at\n      when @dic.Z.length >> 1\n        # 太陽年末に13月が出てしまう。年初にする。\n        Zz = to_tempo_bare Zz.size, Zz.zero, Zs.next_at\n    Nn.now_idx = ( Zs.now_idx %% @dic.Z.length ) >> 1\n\n    N  = drill_down Nn, 'day'\n\n    if @is_table_leap\n      p = to_tempo 'period'\n      u = drill_down p, \"year\"\n      u.now_idx += p.now_idx * @calc.divs.period\n      M = drill_down u, \"month\"\n      d = drill_down M, \"day\"\n    else\n      u = Zz\n      M = Nn\n      d = N.dup utc\n\n    # day    in week (曜日)\n    w0 = to_tempo 'week', u.last_at\n    w = drill_down w0, \"week\"\n\n    Y =\n      now_idx: u.now_idx\n    if u.next_at < w.next_at\n      # 年末最終週は、翌年初週\n      Y.now_idx += 1\n      w.now_idx  = 0\n\n    e = E = drill_down w, \"day\"\n    unless @is_table_leap\n      # 旧暦では、週は月初にリセットする。\n      e.now_idx = ( M.now_idx + d.now_idx ) % @dic.E.length\n\n    # day    in year appendix\n    D = drill_down u, \"day\"\n    if @dic.is_solor\n      # hour   in day\n      H = @to_tempo_by_solor utc, d\n      size = H.size / @dic.m.length\n      m = to_tempo_bare size, H.last_at, utc\n      s = to_tempo_bare 1000, m.last_at, utc\n    else\n      # hour   in day\n      H = drill_down d, \"hour\"\n      m = drill_down H, \"minute\"\n      s = drill_down m, \"second\"\n\n    # minute in day\n    now_idx = ( utc - s.last_at ) / @calc.msec.second\n    S = { now_idx }\n\n    T =\n      now_idx: ( u.now_idx + @calc.idx.eto )% @dic.T.length\n\n    G = {}\n    if @table.msec.era?\n      era_base = to_tempo_by @table.msec.era, @calc.zero.era, utc\n      era = @calc.eras[era_base.now_idx]\n      if era?[0]\n        u.now_idx += 1 - era[2]\n        G.label = era[0]\n\n    y = Object.assign {}, u\n    if y.now_idx < 1\n      G.label = \"紀元前\"\n      y.now_idx = 1 - y.now_idx\n\n    @appear { G, u,Y,y,M,d, H,m,s,S, e,E, Z,N,T, D,w,J, era }\n\n  appear: (o)->\n    for key, val of @dic.list\n      o[key].list = val\n    for key, val of @dic.to_label\n      o[key].to_label = val\n    o\n\n  index: (tgt, str = default_parse_format)->\n    p = y = M = d = H = m = s = S = J = 0\n    data = { p,y,M,d,H,m,s,S, J }\n\n    tokens = str.match reg_token\n    idx = @dic.indexer\n    reg = @regex tokens, str\n\n    items = tgt.match(reg)[1..]\n    for s, p in items\n      token = tokens[p]\n      if f = idx[token[0]]\n        data[token[0]] = f s, @dic.list[token[0]]\n    if @is_table_leap\n      data.p = Math.floor( data.y / @calc.divs.period )\n      data.y = data.y - data.p * @calc.divs.period\n    data\n\n  regex: (tokens, str)->\n    { regex, list } = @dic\n    reg = \"^\" + tokens.map (token)=>\n      if val = regex[token[0]]\n        val\n      else\n        \"(#{token.replace(/([\\\\\\[\\]().*?])/g,\"\\\\$1\")})\"\n    .join(\"\")\n    new RegExp reg\n\n  tempo_list: (tempos, token)->\n    switch token[0]\n      when 'G'\n        throw new Error \"request token can't tempos. [#{token}]\"\n\n    unless tempo = tempos[token[0]]\n      throw new Error \"request token can't tempos. [#{token}]\"\n\n    { table, length, now_idx, last_at, size, zero } = tempo\n    list = []\n    if table\n      last_at = zero\n      for next_at, now_idx in table\n        next_at += zero\n        size = next_at - last_at\n        list.push { now_idx, size, last_at, next_at, last_time: new Date(last_at), next_time: new Date(next_at) }\n        last_at = next_at\n\n    if length\n      base = last_at - size * now_idx\n      for now_idx in [0...length]\n        last_at = (now_idx + 0) * size + zero\n        next_at = (now_idx + 1) * size + zero\n        list.push { now_idx, size, last_at, next_at, last_time: new Date(last_at), next_time: new Date(next_at) }\n    list\n\n  ranges: (utc, token)->\n    @tempo_list @to_tempos(utc), token\n\n  parse: (tgt, str = default_parse_format)->\n    { p,y,M,d,H,m,s,S, J } = @index tgt, str\n\n    if J\n      return @calc.zero.jd + J * @calc.msec.day \n\n    ( d * @calc.msec.day ) +\n    ( H * @calc.msec.hour ) +\n    ( m * @calc.msec.minute ) +\n    ( s * @calc.msec.second ) +\n    ( S ) +\n    if @is_table_leap\n      size =\n        @table.range.year[y] * @calc.msec.day\n\n      @calc.zero.period +\n      ( p * @calc.msec.period ) +\n      ( @table.msec.year[y - 1] || 0 ) +\n      ( @table.msec.month[size][M - 1] || 0 )\n    else\n      @calc.zero.season +\n      ( y * @calc.msec.year) +\n      ( M * @calc.msec.month )\n\n  format: (utc, str = default_format_format)->\n    o = @to_tempos utc\n    str.match reg_token\n    .map (token)=>\n      val = o[token[0]]\n      if val?.to_label?\n        val.to_label token.length\n      else\n        token\n    .join(\"\")\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SECOND = to_msec(\"1s\");\nconst MINUTE = to_msec(\"1m\");\nconst HOUR = to_msec(\"1h\");\nconst DAY = to_msec(\"1d\");\nconst WEEK = to_msec(\"1w\");\nconst MONTH = to_msec(\"30d\");\nconst YEAR = to_msec(\"1y\");\nconst INTERVAL = 0x7fffffff; // 31bits.\nconst VALID = 0xfffffffffffff; // 52bits.\nconst has_window = \"undefined\" !== typeof window && window !== null;\nconst timezone = has_window ? (MINUTE * new Date().getTimezoneOffset()) : to_msec(\"-9h\");\nconst tempo_zero = (-new Date(0).getDay()) * DAY + timezone;\nconst TIMERS = [\n    [\"年\", \"y\", YEAR],\n    [\"週\", \"w\", WEEK],\n    [\"日\", \"d\", DAY],\n    [\"時\", \"h\", HOUR],\n    [\"分\", \"m\", MINUTE],\n    [\"秒\", \"s\", SECOND],\n];\nconst DISTANCE_NAN = [-VALID, INTERVAL, YEAR, \"？？？\"];\nconst DISTANCE_LONG_AGO = [Infinity, INTERVAL, VALID, \"昔\"];\nconst DISTANCES = [\n    DISTANCE_NAN,\n    [-YEAR, INTERVAL, YEAR, \"%s年後\"],\n    [-MONTH, INTERVAL, MONTH, \"%sヶ月後\"],\n    [-WEEK, WEEK, WEEK, \"%s週間後\"],\n    [-DAY, DAY, DAY, \"%s日後\"],\n    [-HOUR, HOUR, HOUR, \"%s時間後\"],\n    [-MINUTE, MINUTE, MINUTE, \"%s分後\"],\n    [-25000, SECOND, SECOND, \"%s秒後\"],\n    [25000, 25000, 25000, \"今\"],\n    [MINUTE, SECOND, SECOND, \"%s秒前\"],\n    [HOUR, MINUTE, MINUTE, \"%s分前\"],\n    [DAY, HOUR, HOUR, \"%s時間前\"],\n    [WEEK, DAY, DAY, \"%s日前\"],\n    [MONTH, WEEK, WEEK, \"%s週間前\"],\n    [YEAR, INTERVAL, MONTH, \"%sヶ月前\"],\n    [VALID, INTERVAL, YEAR, \"%s年前\"],\n    DISTANCE_LONG_AGO,\n];\nclass Tempo {\n    constructor(zero, now_idx, write_at, last_at, next_at, table = null) {\n        if (table) {\n            this.table = table;\n        }\n        this.zero = zero;\n        this.write_at = write_at;\n        this.now_idx = now_idx;\n        this.last_at = last_at;\n        this.next_at = next_at;\n    }\n    get size() { return this.next_at - this.last_at; }\n    get since() { return this.write_at - this.last_at; }\n    get remain() { return this.next_at - this.write_at; }\n    get timeout() { return this.next_at - this.write_at; }\n    get moderate_at() {\n        if (this.now_idx & 1) {\n            return this.last_at;\n        }\n        else {\n            return this.next_at;\n        }\n    }\n    mod_bare(sub_size, sub_zero) {\n        let { last_at, write_at, next_at, now_idx, size, zero } = this;\n        const do2 = to_tempo_bare(sub_size, sub_zero, next_at);\n        if (do2.last_at <= write_at) {\n            const do3 = to_tempo_bare(sub_size, sub_zero, next_at + size);\n            last_at = do2.last_at;\n            next_at = do3.last_at;\n            now_idx++;\n        }\n        else {\n            const do1 = to_tempo_bare(sub_size, sub_zero, last_at);\n            last_at = do1.last_at;\n            next_at = do2.last_at;\n        }\n        return new Tempo(zero, now_idx, write_at, last_at, next_at);\n    }\n    succ(n = 1) { return this.slide(+n); }\n    back(n = 1) { return this.slide(-n); }\n    slide(n) {\n        if (this.table) {\n            const last_at = this.table[this.now_idx + n - 1] + this.zero;\n            return to_tempo_by(this.table, this.zero, last_at + this.since);\n        }\n        else {\n            const size = n * this.size;\n            return to_tempo_bare(this.size, this.zero, this.write_at + size);\n        }\n    }\n    copy() { return this.dup(); }\n    dup(now = Date.now()) {\n        if (this.table) {\n            return to_tempo_by(this.table, this.zero, now);\n        }\n        else {\n            return to_tempo_bare(this.size, this.zero, now);\n        }\n    }\n    tick() {\n        const now = Date.now();\n        if (this.next_at <= now) {\n            return this.dup(now);\n        }\n        else {\n            return null;\n        }\n    }\n    sleep() {\n        return Tempo.sleep([this]);\n    }\n    static async sleep(tempos) {\n        if (tempos && tempos.length) {\n            const o = tempos.reduce(((min, o) => min.timeout < o.timeout ? min : o), { timeout: Infinity });\n            if (o.timeout < Infinity) {\n                return new Promise((ok) => {\n                    setTimeout(() => {\n                        ok(o);\n                    }, o.timeout);\n                });\n            }\n        }\n        return new Promise(ok => ok(null));\n    }\n}\nexports.Tempo = Tempo;\n;\nfunction to_tempo(size_str, zero_str = \"0s\", write_at = Date.now()) {\n    const size = to_msec(size_str);\n    const zero = to_msec(zero_str) + tempo_zero;\n    return to_tempo_bare(size, zero, Number(write_at));\n}\nexports.to_tempo = to_tempo;\nfunction to_tempo_bare(size, zero, write_at) {\n    const now_idx = Math.floor((write_at - zero) / size);\n    const last_at = (now_idx + 0) * size + zero;\n    const next_at = (now_idx + 1) * size + zero;\n    return new Tempo(zero, now_idx, write_at, last_at, next_at);\n}\nexports.to_tempo_bare = to_tempo_bare;\n// バイナリサーチ 高速化はするが、微差なので複雑さのせいで逆に遅いかも？\nfunction to_tempo_by(table, zero, write_at) {\n    const scan_at = write_at - zero;\n    let now_idx = -1;\n    let next_at = zero;\n    let last_at = -Infinity;\n    if (!(scan_at < 0)) {\n        let top_idx = 0;\n        now_idx = table.length;\n        while (top_idx < now_idx) {\n            const mid_idx = (top_idx + now_idx) >>> 1;\n            next_at = table[mid_idx];\n            if (next_at <= scan_at) {\n                top_idx = mid_idx + 1;\n            }\n            else {\n                now_idx = mid_idx;\n            }\n        }\n        next_at = table[now_idx] || Infinity;\n        last_at = table[now_idx - 1] || 0;\n        next_at += zero;\n        last_at += zero;\n    }\n    return new Tempo(zero, now_idx, write_at, last_at, next_at, table);\n}\nexports.to_tempo_by = to_tempo_by;\n;\nfunction to_msec(str) {\n    return 1000 * to_sec(str);\n}\nexports.to_msec = to_msec;\n;\nfunction to_sec(str) {\n    let timeout = 0;\n    str.replace(/(\\d+)([ヵ]?([smhdwy秒分時日週月年])[間]?(半$)?)|0/g, (full, num_str, fullunit, unit, appendix) => {\n        let num = Number(num_str);\n        if (!num) {\n            return null;\n        }\n        if ('半' === appendix) {\n            num += 0.5;\n        }\n        timeout += num * (() => {\n            switch (unit) {\n                case \"s\":\n                case \"秒\":\n                    return 1;\n                case \"m\":\n                case \"分\":\n                    return 60;\n                case \"h\":\n                case \"時\":\n                    return 3600;\n                case \"d\":\n                case \"日\":\n                    return 3600 * 24;\n                case \"w\":\n                case \"週\":\n                    return 3600 * 24 * 7;\n                case \"y\":\n                case \"年\":\n                    return 31556925.147;\n                // 2019 average.\n                default:\n                    throw new Error(`${str} at ${num}${unit}`);\n            }\n        })();\n    });\n    return timeout;\n}\nexports.to_sec = to_sec;\n;\nfunction to_timer(msec, unit_mode = 1) {\n    let str = \"\";\n    const _limit = TIMERS.length;\n    for (let at = 0; at < _limit; ++at) {\n        const unit = TIMERS[at][unit_mode];\n        const base = TIMERS[at][2];\n        const idx = Math.floor(msec / base);\n        if (idx) {\n            msec = msec % base;\n            str += `${idx}${unit}`;\n        }\n    }\n    return str;\n}\nexports.to_timer = to_timer;\nfunction to_relative_time_distance(msec) {\n    if (msec < -VALID || VALID < msec || msec - 0 == NaN) {\n        return DISTANCE_NAN;\n    }\n    const _limit = DISTANCES.length;\n    for (let at = 0; at < _limit; ++at) {\n        const o = DISTANCES[at];\n        const limit = o[0];\n        if (msec < limit) {\n            return o;\n        }\n    }\n    return DISTANCE_LONG_AGO;\n}\nexports.to_relative_time_distance = to_relative_time_distance;\n","require './sample'\n\nmodule.exports = {\n  ...require \"./fancy-date\"\n  ...require \"./time\"\n}","{ FancyDate } = require './fancy-date'\n\n七曜 = ['月','火','水','木','金','土','日']\n六曜 = [\"先勝\",\"友引\",\"先負\",\"仏滅\",\"大安\",\"赤口\"]\n和風月名 = ['睦月','如月','弥生','卯月','皐月','水無月','文月','葉月','長月','神無月','霜月','師走']\n二十四節季 = [\"立春\",\"雨水\",\"啓蟄\",\"春分\",\"清明\",\"穀雨\",\n           \"立夏\",\"小満\",\"芒種\",\"夏至\",\"小暑\",\"大暑\",\n           \"立秋\",\"処暑\",\"白露\",\"秋分\",\"寒露\",\"霜降\",\n           \"立冬\",\"小雪\",\"大雪\",\"冬至\",\"小寒\",\"大寒\"]\n月相 = ['朔'  ,'既朔','三日月','上弦' ,'上弦','上弦' ,'上弦'  ,'上弦' ,'上弦'  ,'上弦' ,\n       '上弦','上弦','十三夜','小望月','満月','十六夜','立待月','居待月','臥待月','更待月',\n       '下限','下限','下限'  ,'下限' ,'下限','下限' ,'下限'  ,'下限' ,'晦'    ,'晦'  ]\n時の鐘 = ['夜九つ','夜八つ','暁七つ',\n        '明六つ','朝五つ','昼四つ',\n        '昼九つ','昼八つ','夕七つ',\n        '暮六つ','宵五つ','夜四つ']\n\n十干 = [\n  [\"甲\",\"きのえ\"]\n  [\"乙\",\"きのと\"]\n  [\"丙\",\"ひのえ\"]\n  [\"丁\",\"ひのと\"]\n  [\"戊\",\"つちのえ\"]\n  [\"己\",\"つちのと\"]\n  [\"庚\",\"かのえ\"]\n  [\"辛\",\"かのと\"]\n  [\"壬\",\"みずのえ\"]\n  [\"癸\",\"みずのと\"]\n]\n十二支 = [\n  [\"子\",\"ね\"]\n  [\"丑\",\"うし\"]\n  [\"寅\",\"とら\"]\n  [\"卯\",\"う\"]\n  [\"辰\",\"たつ\"]\n  [\"巳\",\"み\"]\n  [\"午\",\"うま\"]\n  [\"未\",\"ひつじ\"]\n  [\"申\",\"さる\"]\n  [\"酉\",\"とり\"]\n  [\"戌\",\"いぬ\"]\n  [\"亥\",\"い\"]\n]\n\n六十干支 =\n  for idx in [0...60]\n    a = 十干[idx % 十干.length] \n    b = 十二支[idx % 十二支.length]\n    \"#{a[0]}#{b[0]}\"\n\n六十干支よみ =\n  for idx in [0...60]\n    a = 十干[idx % 十干.length] \n    b = 十二支[idx % 十二支.length]\n    \"#{\"#{a[1].replace /と$/,\"との\" }#{b[1]}\"}\"\n\n元号 = [# 号, 開始時刻\n  [\"大化\", -41795611200000 - 75600000]\n  [\"白雉\", -41647953600000 - 75600000]\n  [\"朱鳥\", -40499352000000 - 75600000]\n  [\"大宝\", -40034865600000 - 75600000]\n  [\"慶雲\", -39936369600000 - 75600000]\n  [\"和銅\", -39821371200000 - 75600000]\n  [\"霊亀\", -39579883200000 - 75600000]\n  [\"養老\", -39509640000000 - 75600000]\n  [\"神亀\", -39314289600000 - 75600000]\n  [\"天平\", -39140712000000 - 75600000]\n  [\"天平感宝\", -38520014400000 - 75600000]\n  [\"天平勝宝\", -38510769600000 - 75600000]\n  [\"天平宝字\", -38256753600000 - 75600000]\n  [\"天平神護\", -38023041600000 - 75600000]\n  [\"神護景雲\", -37940616000000 - 75600000]\n  [\"宝亀\", -37842465600000 - 75600000]\n  [\"天応\", -37518292800000 - 75600000]\n  [\"延暦\", -37465761600000 - 75600000]\n  [\"大同\", -36718228800000 - 75600000]\n  [\"弘仁\", -36580420800000 - 75600000]\n  [\"天長\", -36160603200000 - 75600000]\n  [\"承和\", -35844465600000 - 75600000]\n  [\"嘉祥\", -35389483200000 - 75600000]\n  [\"仁寿\", -35298763200000 - 75600000]\n  [\"斉衡\", -35186356800000 - 75600000]\n  [\"天安\", -35115681600000 - 75600000]\n  [\"貞観\", -35047339200000 - 75600000]\n  [\"元慶\", -34478222400000 - 75600000]\n  [\"仁和\", -34232846400000 - 75600000]\n  [\"寛平\", -34099704000000 - 75600000]\n  [\"昌泰\", -33816571200000 - 75600000]\n  [\"延喜\", -33712977600000 - 75600000]\n  [\"延長\", -33026875200000 - 75600000]\n  [\"承平\", -32775537600000 - 75600000]\n  [\"天慶\", -32551416000000 - 75600000]\n  [\"天暦\", -32270702400000 - 75600000]\n  [\"天徳\", -31938667200000 - 75600000]\n  [\"応和\", -31834987200000 - 75600000]\n  [\"康保\", -31725864000000 - 75600000]\n  [\"安和\", -31597905600000 - 75600000]\n  [\"天禄\", -31545892800000 - 75600000]\n  [\"天延\", -31428907200000 - 75600000]\n  [\"貞元\", -31347864000000 - 75600000]\n  [\"天元\", -31272523200000 - 75600000]\n  [\"永観\", -31133419200000 - 75600000]\n  [\"寛和\", -31071124800000 - 75600000]\n  [\"永延\", -31009262400000 - 75600000]\n  [\"永祚\", -30935044800000 - 75600000]\n  [\"正暦\", -30896856000000 - 75600000]\n  [\"長徳\", -30760344000000 - 75600000]\n  [\"長保\", -30638606400000 - 75600000]\n  [\"寛弘\", -30464510400000 - 75600000]\n  [\"長和\", -30196152000000 - 75600000]\n  [\"寛仁\", -30061108800000 - 75600000]\n  [\"治安\", -29940494400000 - 75600000]\n  [\"万寿\", -29832408000000 - 75600000]\n  [\"長元\", -29706264000000 - 75600000]\n  [\"長暦\", -29430993600000 - 75600000]\n  [\"長久\", -29317204800000 - 75600000]\n  [\"寛徳\", -29190974400000 - 75600000]\n  [\"永承\", -29145873600000 - 75600000]\n  [\"天喜\", -28934366400000 - 75600000]\n  [\"康平\", -28756814400000 - 75600000]\n  [\"治暦\", -28537185600000 - 75600000]\n  [\"延久\", -28421409600000 - 75600000]\n  [\"承保\", -28252152000000 - 75600000]\n  [\"承暦\", -28150545600000 - 75600000]\n  [\"永保\", -28046606400000 - 75600000]\n  [\"応徳\", -27952516800000 - 75600000]\n  [\"寛治\", -27852984000000 - 75600000]\n  [\"嘉保\", -27609854400000 - 75600000]\n  [\"永長\", -27548424000000 - 75600000]\n  [\"承徳\", -27517492800000 - 75600000]\n  [\"康和\", -27463320000000 - 75600000]\n  [\"長治\", -27321969600000 - 75600000]\n  [\"嘉承\", -27253195200000 - 75600000]\n  [\"天仁\", -27179755200000 - 75600000]\n  [\"天永\", -27120139200000 - 75600000]\n  [\"永久\", -27023284800000 - 75600000]\n  [\"元永\", -26876059200000 - 75600000]\n  [\"保安\", -26811691200000 - 75600000]\n  [\"天治\", -26684683200000 - 75600000]\n  [\"大治\", -26629560000000 - 75600000]\n  [\"天承\", -26470670400000 - 75600000]\n  [\"長承\", -26421336000000 - 75600000]\n  [\"保延\", -26335627200000 - 75600000]\n  [\"永治\", -26140708800000 - 75600000]\n  [\"康治\", -26116084800000 - 75600000]\n  [\"天養\", -26057937600000 - 75600000]\n  [\"久安\", -26014564800000 - 75600000]\n  [\"仁平\", -25840728000000 - 75600000]\n  [\"久寿\", -25720718400000 - 75600000]\n  [\"保元\", -25674840000000 - 75600000]\n  [\"平治\", -25581009600000 - 75600000]\n  [\"永暦\", -25556385600000 - 75600000]\n  [\"応保\", -25505928000000 - 75600000]\n  [\"長寛\", -25455211200000 - 75600000]\n  [\"永万\", -25385918400000 - 75600000]\n  [\"仁安\", -25348248000000 - 75600000]\n  [\"嘉応\", -25265649600000 - 75600000]\n  [\"承安\", -25200763200000 - 75600000]\n  [\"安元\", -25067534400000 - 75600000]\n  [\"治承\", -25003252800000 - 75600000]\n  [\"養和\", -24877368000000 - 75600000]\n  [\"寿永\", -24850756800000 - 75600000]\n  [\"元暦\", -24790449600000 - 75600000]\n  [\"文治\", -24749841600000 - 75600000]\n  [\"建久\", -24602097600000 - 75600000]\n  [\"正治\", -24317496000000 - 75600000]\n  [\"建仁\", -24259953600000 - 75600000]\n  [\"元久\", -24164913600000 - 75600000]\n  [\"建永\", -24095448000000 - 75600000]\n  [\"承元\", -24049742400000 - 75600000]\n  [\"建暦\", -23941396800000 - 75600000]\n  [\"建保\", -23854910400000 - 75600000]\n  [\"承久\", -23685998400000 - 75600000]\n  [\"貞応\", -23591476800000 - 75600000]\n  [\"元仁\", -23509310400000 - 75600000]\n  [\"嘉禄\", -23496523200000 - 75600000]\n  [\"安貞\", -23413147200000 - 75600000]\n  [\"寛喜\", -23375304000000 - 75600000]\n  [\"貞永\", -23278622400000 - 75600000]\n  [\"天福\", -23244321600000 - 75600000]\n  [\"文暦\", -23196715200000 - 75600000]\n  [\"嘉禎\", -23167425600000 - 75600000]\n  [\"暦仁\", -23067633600000 - 75600000]\n  [\"延応\", -23061326400000 - 75600000]\n  [\"仁治\", -23017176000000 - 75600000]\n  [\"寛元\", -22934664000000 - 75600000]\n  [\"宝治\", -22806878400000 - 75600000]\n  [\"建長\", -22741387200000 - 75600000]\n  [\"康元\", -22505342400000 - 75600000]\n  [\"正嘉\", -22491691200000 - 75600000]\n  [\"正元\", -22426891200000 - 75600000]\n  [\"文応\", -22392331200000 - 75600000]\n  [\"弘長\", -22366238400000 - 75600000]\n  [\"文永\", -22271112000000 - 75600000]\n  [\"建治\", -21919204800000 - 75600000]\n  [\"弘安\", -21829694400000 - 75600000]\n  [\"正応\", -21508286400000 - 75600000]\n  [\"永仁\", -21341880000000 - 75600000]\n  [\"正安\", -21161563200000 - 75600000]\n  [\"乾元\", -21049675200000 - 75600000]\n  [\"嘉元\", -21025483200000 - 75600000]\n  [\"徳治\", -20920075200000 - 75600000]\n  [\"延慶\", -20861841600000 - 75600000]\n  [\"応長\", -20783563200000 - 75600000]\n  [\"正和\", -20753668800000 - 75600000]\n  [\"文保\", -20599531200000 - 75600000]\n  [\"元応\", -20531016000000 - 75600000]\n  [\"元亨\", -20472782400000 - 75600000]\n  [\"正中\", -20354068800000 - 75600000]\n  [\"嘉暦\", -20309227200000 - 75600000]\n  [\"元徳\", -20204424000000 - 75600000]\n  [\"元弘\", -20142302400000 - 75600000]\n  [\"正慶\", -20120270400000 - 75600000]\n  [\"建武\", -20064024000000 - 75600000]\n  [\"延元\", -19997668800000 - 75600000]\n  [\"興国\", -19867636800000 - 75600000]\n  [\"正平\", -19657598400000 - 75600000]\n  [\"建徳\", -18913780800000 - 75600000]\n  [\"文中\", -18859867200000 - 75600000]\n  [\"天授\", -18760420800000 - 75600000]\n  [\"弘和\", -18580708800000 - 75600000]\n  [\"元中\", -18479707200000 - 75600000]\n  [\"暦応\", -19918785600000 - 75600000]\n  [\"康永\", -19803960000000 - 75600000]\n  [\"貞和\", -19694836800000 - 75600000]\n  [\"観応\", -19556510400000 - 75600000]\n  [\"文和\", -19474862400000 - 75600000]\n  [\"延文\", -19364961600000 - 75600000]\n  [\"康安\", -19206763200000 - 75600000]\n  [\"貞治\", -19161403200000 - 75600000]\n  [\"応安\", -18990849600000 - 75600000]\n  [\"永和\", -18768110400000 - 75600000]\n  [\"康暦\", -18640929600000 - 75600000]\n  [\"永徳\", -18579499200000 - 75600000]\n  [\"至徳\", -18484891200000 - 75600000]\n  [\"嘉慶\", -18373003200000 - 75600000]\n  [\"康応\", -18328161600000 - 75600000]\n  [\"明徳\", -18293515200000 - 75600000]\n  [\"応永\", -18157608000000 - 75600000]\n  [\"正長\", -17089185600000 - 75600000]\n  [\"永享\", -17047713600000 - 75600000]\n  [\"嘉吉\", -16686907200000 - 75600000]\n  [\"文安\", -16593595200000 - 75600000]\n  [\"宝徳\", -16420708800000 - 75600000]\n  [\"享徳\", -16326532800000 - 75600000]\n  [\"康正\", -16229592000000 - 75600000]\n  [\"長禄\", -16162977600000 - 75600000]\n  [\"寛正\", -16058952000000 - 75600000]\n  [\"文正\", -15897643200000 - 75600000]\n  [\"応仁\", -15863860800000 - 75600000]\n  [\"文明\", -15795518400000 - 75600000]\n  [\"長享\", -15222168000000 - 75600000]\n  [\"延徳\", -15155726400000 - 75600000]\n  [\"明応\", -15064056000000 - 75600000]\n  [\"文亀\", -14792760000000 - 75600000]\n  [\"永正\", -14698238400000 - 75600000]\n  [\"大永\", -14145278400000 - 75600000]\n  [\"享禄\", -13926081600000 - 75600000]\n  [\"天文\", -13800283200000 - 75600000]\n  [\"弘治\", -13068475200000 - 75600000]\n  [\"永禄\", -12993998400000 - 75600000]\n  [\"元亀\", -12609259200000 - 75600000]\n  [\"天正\", -12506788800000 - 75600000]\n  [\"文禄\", -11896113600000 - 75600000]\n  [\"慶長\", -11772043200000 - 75600000]\n  [\"元和\", -11181326400000 - 75600000]\n  [\"寛永\", -10909425600000 - 75600000]\n  [\"正保\", -10254859200000 - 75600000]\n  [\"慶安\", -10152907200000 - 75600000]\n  [\"承応\", -10009742400000 - 75600000]\n  [\"明暦\", -9928526400000 - 75600000]\n  [\"万治\", -9825624000000 - 75600000]\n  [\"寛文\", -9738705600000 - 75600000]\n  [\"延宝\", -9346190400000 - 75600000]\n  [\"天和\", -9092865600000 - 75600000]\n  [\"貞享\", -9017006400000 - 75600000]\n  [\"元禄\", -8873409600000 - 75600000]\n  [\"宝永\", -8384990400000 - 75600000]\n  [\"正徳\", -8159313600000 - 75600000]\n  [\"享保\", -7996363200000 - 75600000]\n  [\"元文\", -7370654400000 - 75600000]\n  [\"寛保\", -7217726400000 - 75600000]\n  [\"延享\", -7123809600000 - 75600000]\n  [\"寛延\", -6986865600000 - 75600000]\n  [\"宝暦\", -6880939200000 - 75600000]\n  [\"明和\", -6485054400000 - 75600000]\n  [\"安永\", -6218510400000 - 75600000]\n  [\"天明\", -5954299200000 - 75600000]\n  [\"寛政\", -5707454400000 - 75600000]\n  [\"享和\", -5326430400000 - 75600000]\n  [\"文化\", -5231476800000 - 75600000]\n  [\"文政\", -4784097600000 - 75600000]\n  [\"天保\", -4384497600000 - 75600000]\n  [\"弘化\", -3943857600000 - 75600000]\n  [\"嘉永\", -3842078400000 - 75600000]\n  [\"安政\", -3627806400000 - 75600000]\n  [\"万延\", -3462782400000 - 75600000]\n  [\"文久\", -3432110400000 - 75600000]\n  [\"元治\", -3337588800000 - 75600000]\n  [\"慶応\", -3303028800000 - 75600000]\n  [\"明治\", -3216715200000 - 75600000]\n  [\"大正\", -1812110400000 - 75600000]\n  [\"昭和\", -1357560000000 - 75600000]\n  [\"平成\",   600264000000 - 75600000]\n  [\"令和\",  1556712000000 - 75600000]\n];\n\n日本 = [ 35, 135 ]\n\n地球 = [\n  [31556925147.0, new Date(\"2019/03/21 06:58\").getTime()]\n  [ 2551442889.6, new Date(\"2019/01/06 10:28\").getTime()]\n  [   86400000  , 0, 23.4397] # LOD ではなく、暦上の1日。Unix epoch では閏秒を消し去るため。\n  日本\n]\n\n火星 = [\n  [59354347573.5373, new Date(\"2018/10/28 09:00\").getTime()]\n  null\n  [ 88775000, 0, 25.19] # 24時間39分35秒。\n  [ 35, 0 ]\n]\n\n\nGREGORIO = \n  calendar: [\n    \"1970年1月1日(木)0時0分0秒\"\n    0\n    [4, 100, 400]\n    [31, 0,31,30,31,30,31,31,30,31,30,31]\n  ]\n  rolls: [\n    [\"曜\",  3, 七曜]\n    [\"\", 56, 六十干支,六十干支よみ]\n  ]\n  yeary: [\n    [\"月\", 0, 12]\n    [\"日\", 0]\n  ]\n  seasonly: [\n    #   節    中     節    中     節    中 \n    [\"\", 3, 二十四節季]\n  ]\n  moony: [\n    [\"\", 0, 月相]\n  ]\n  daily: [\n    [\"時\", 0, 24]\n    [\"分\", 0, 60]\n    [\"秒\", 0]\n  ]\n\n平気法 =\n  calendar: [\n    \"1970年1月1日(木)0時0分0秒\"\n    0\n  ]\n  rolls: [\n    [\"\", null, 六曜]\n    [\"\",    0, 六十干支,六十干支よみ]\n  ]\n  yeary: [\n    [\"月\", 0,和風月名]\n    [\"日\", 0]\n  ]\n  daily: [\n    [\"時\", 0, 時の鐘]\n    [\"分\", 0, ['','半']]\n    [\"秒\", 0]\n    true\n  ]\n\nROMULUS =\n  calendar: [\n    \"1970年1月1日(木)0時0分0秒\"\n    0\n    null\n    [0, 31,30,31,30,31,30,30,31,30,30]\n  ]\n  rolls: [\n    [\"\", 0, \"ABCDEFGH\"]\n    [\"\", 0, 六十干支,六十干支よみ]\n  ]\n\nFastEarth = [ # 天体が地球の百倍速のケース\n  [315569251.470, new Date(\"2019/03/21 06:58\").getTime() / 100]\n  [ 25514428.896, new Date(\"2019/01/06 10:28\").getTime() / 100]\n  [   864000    , 0, 23.4397] # LOD ではなく、暦上の1日。Unix epoch では閏秒を消し去るため。\n  日本\n]\n\nFancyDate.Gregorian = g = new FancyDate()\n  .planet   ...地球\n  .calendar ...GREGORIO.calendar\n  .rolls    ...GREGORIO.rolls\n  .era \"西暦\"\n  .yeary    ...GREGORIO.yeary\n  .seasonly ...GREGORIO.seasonly\n  .moony    ...GREGORIO.moony\n  .daily    ...GREGORIO.daily\n  .init()\n\nFancyDate.平気法 = FancyDate.Gregorian.dup()\n  .planet   ...地球\n  .calendar ...平気法.calendar\n  .rolls    ...平気法.rolls\n  .era \"西暦\", 元号\n  .yeary    ...平気法.yeary\n  .daily    ...平気法.daily\n  .init()\n\n#FancyDate.Romulus = FancyDate.Gregorian.dup()\n#  .calendar ...ROMULUS.calendar\n# .rolls    ...ROMULUS.rolls\n#  .init()\n\nFancyDate.Fast = FancyDate.Gregorian.dup()\n  .planet   ...FastEarth\n  .era \"fast\", 元号\n  .init()\n\nMARS_GREGORIO =\n  calendar: [\n    \"1年1月1日(木)0時0分0秒\"\n    g.parse \"0年9月1日\" # 春分が３月くらいになるよう、恣意的に決めました。\n    [1,2,10,100,300]\n  ]\n  yeary: [\n    [\"月\", 1, 12]\n    [\"日\", 1]\n  ]\n  daily: [\n    [\"時\", 0,24]\n    [\"分\", 0,62]\n    [\"秒\", 0]\n  ]\n\nFancyDate.MarsGregorian = FancyDate.Gregorian.dup()\n  .planet   ...火星\n  .calendar ...MARS_GREGORIO.calendar\n  .era \"西暦\"\n  .yeary    ...MARS_GREGORIO.yeary\n  .daily    ...MARS_GREGORIO.daily\n  .init()\n","module.exports = require(\"lodash\");"],"sourceRoot":""}